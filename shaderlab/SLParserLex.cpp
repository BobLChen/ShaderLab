#line 2 "SLParserLex.cpp"

#line 4 "SLParserLex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[689] =
    {   0,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
       81,   81,  145,  143,  136,  141,  140,  143,  133,  143,
      143,  143,  129,  129,  129,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  143,  135,  133,  133,  133,
      133,  133,  133,  133,  133,   46,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
       79,  133,  133,  133,  133,  133,   81,   81,   81,   81,
       81,  136,  139,  138,    0,  134,  133,  133,  133,  133,
        0,  129,  128,  142,  137,  129,    9,   10,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   23,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,    0,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   81,
       81,   81,   81,   81,   81,  133,  133,  133,  137,  129,
      100,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   36,  133,  133,   17,  133,    3,  133,

      133,  104,  103,  133,   24,   89,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  101,  133,  133,  133,  133,
      133,  133,  133,    0,  127,  133,  133,   43,  133,  133,
      133,   41,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   48,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   81,  133,  133,  133,  133,   85,   13,  133,
      133,  133,  133,   11,   83,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,   25,  133,  121,  133,  133,
      133,   12,  133,  133,  133,  133,  133,  133,  133,  133,

      133,    2,   23,  133,  133,   88,  133,  133,  133,  133,
       44,  133,  133,   38,  133,  133,   51,  133,  133,   53,
      133,  133,  133,  133,   63,  133,   57,  133,  133,   52,
      133,  133,  133,   64,  133,  133,  133,  133,  133,  133,
       29,  133,  133,   81,  133,  130,  133,  133,  133,   87,
      133,    8,  133,  133,  133,  133,   24,   15,   84,  133,
      133,  133,  133,  133,  133,  133,    7,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,   27,  133,
       37,  133,  133,  133,   40,  133,  133,  133,  133,  133,
       59,  133,  133,  133,  133,  133,  133,  133,  133,   62,

      133,  133,  133,  133,  133,  133,   54,  133,   33,  133,
      133,  133,   28,  133,  132,  133,  133,   21,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   18,
      133,  133,  133,  102,  133,  133,    1,  133,  133,  133,
      133,  133,  133,   16,   26,  133,   45,   42,   61,  133,
      133,  133,  133,  133,  133,   56,  133,  133,  133,   68,
       58,  133,  133,  133,  133,  133,  133,  133,  133,   35,
       32,  133,   31,  133,  133,  133,   99,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  124,  133,
      133,  133,  133,  133,   47,  133,  133,  123,   39,  133,

      133,   67,  133,  133,  133,   55,   66,  133,  133,  133,
      133,  133,   65,  133,  133,  133,   30,  133,  131,  133,
        4,  133,  133,   93,   92,  126,  133,  122,   19,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,   91,   90,  133,  133,   72,  133,   70,   77,  133,
       69,   60,   76,  133,   49,  133,  133,  133,   34,  133,
       80,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      113,  133,  133,  133,  133,  133,   22,  133,  133,  133,
        5,   71,   74,   73,   50,   78,  133,  133,  133,  133,
      111,  133,  133,  133,  133,  133,  133,  114,  133,  133,

      106,  115,  133,  133,    6,   14,  133,  125,   75,   82,
       20,  133,  133,  133,  133,  107,  133,  133,  112,  109,
      133,  133,  133,  133,  133,   86,  133,  133,  105,  133,
      116,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  110,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  119,   97,   96,   95,   94,   98,
      133,  117,  133,  120,  118,  133,  108,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,    1,   42,    1,   24,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   24,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,   68,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    1,    4,    1,
        5,    5,    5,    5,    6,    6,    3,    3,    3,    3,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    7,    6,    6,    3,    3,    3,    3,    6,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    6,    3,
        3,    3,    3,    3,    3,    3,    3,    1
    } ;

static yyconst flex_int16_t yy_base[695] =
    {   0,
        0,    0,   68,    0,  122,    0,    0,    0,  172,  173,
      191,  221,  213, 1626,  208,  205,  202,  199,  177,  144,
      171,  153,  234,  243,  260,  213,  260,  252,  178,    0,
      262,  185,  205,  119,  220,  269,  129,  262,  264,  282,
      300,  284,  225,  161,  305,    0, 1626,  275,  279,  271,
      302,  279,  304,  317,  325, 1626,  318,  316,  327,  317,
      334,  332,  325,  335,  337,  338,  343,  351,  331,  368,
     1626,  355,  345,  364,  370,  378,  418,  424,  418,  428,
      433,  195, 1626, 1626,  190, 1626,    0,  346,  369,  385,
      477,  483,  487, 1626,    0,  491, 1626, 1626,  391,  365,

      393,  427,  400,  423,  480,  493,  424,  440,  478,  489,
      483,  498,  481,  477,  499,  488,  495,  497,  507,  509,
      492,  501,  503,  523,  502,  517,  527,  528,  538,  540,
      529,  543,  548,  535,  550,  539,  122,  547,  546,  546,
      548,  550,  561,  560,  555,  547,  558,  564,  552,  565,
      561,  576,  579,  580,  587,  566,  572,  580,  606,  599,
      585,  610,  598,  595,  600,  622,  601,  603,  609,  662,
      666,  638,  668,  674,  677,  619,  624,  640,    0,  722,
        0,  638,  655,  650,  669,  664,  672,  669,  671,  678,
      722,  693,  697,    0,  688,  706,    0,  704,    0,  715,

      710,    0,    0,  725,    0,  720,  715,  724,  728,  717,
      719,  742,  737,  742,  733,  759,  730,  737,  734,  736,
      742,  747,  759,  119, 1626,  764,  761,  133,  779,  777,
      780,    0,  779,  786,  774,  773,  787,  780,  773,  794,
      779,  793,  784,  780,  784,  799,  803,  792,  808,    0,
      808,  802,  810,  820,  830,  832,  814,  836,  818,  822,
      837,  838,  842,  833,  840,  836,  850,    0,  852,  852,
      851,  835,  840,    0,    0,  851,  849,  865,  864,  856,
      858,  866,  870,  885,  880,    0,  883,    0,  876,  891,
      893,    0,  879,  880,  897,  899,  894,  892,  905,  892,

      903,    0,    0,  912,  900,    0,  898,  899,  904,  914,
        0,  924,  928,    0,  926,  910,  938,  924,  926,  946,
      949,  934,  937,  937,    0,  957,    0,  943,  946,  965,
      951,  965,  964,    0,  961,  950,  965,  978,  964,  984,
        0,  971,  975,  989,  978,    0,  989,  983, 1004,  993,
      994,  997, 1010,  998, 1003, 1016,    0,    0, 1017, 1019,
     1004, 1023, 1003, 1015, 1024, 1013,    0, 1031, 1032, 1019,
     1026, 1031, 1038, 1030, 1036, 1054, 1038, 1041,    0, 1055,
        0, 1042, 1051, 1046,    0, 1046, 1067, 1054, 1068, 1055,
        0, 1074, 1061, 1068, 1071, 1080, 1067, 1067, 1081,    0,

     1073, 1081, 1077, 1097, 1098, 1092, 1109, 1089,    0, 1101,
     1097, 1105,    0, 1097,    0, 1105, 1108,    0, 1108, 1107,
     1126, 1110, 1120, 1118, 1131, 1122, 1118, 1134, 1129,    0,
     1121, 1134, 1128,    0, 1143, 1133,    0, 1146, 1142, 1147,
     1154, 1161, 1148,    0,    0, 1145,    0,    0,    0, 1168,
     1158, 1156, 1177, 1176, 1166,    0, 1165, 1165, 1186,    0,
        0, 1187, 1187, 1177, 1176, 1191, 1197, 1200, 1186,    0,
        0, 1187,    0, 1201, 1202, 1198,    0, 1188, 1195, 1211,
     1219, 1205, 1214, 1217, 1208, 1209, 1255, 1215,    0, 1226,
     1234, 1223, 1246, 1228,    0, 1233, 1248,    0,    0, 1251,

     1252,    0, 1252, 1261, 1262,    0,    0, 1261, 1268, 1271,
     1269, 1274,    0, 1268, 1287, 1279,    0, 1286,    0, 1290,
        0, 1289, 1296,    0,    0,    0, 1303,    0,    0, 1294,
     1301, 1294, 1301, 1316, 1302, 1317, 1309, 1322, 1323, 1314,
     1316, 1317,    0, 1328, 1319,    0, 1319,    0,    0, 1324,
        0,    0,    0, 1326,    0, 1337, 1338, 1338,    0, 1334,
        0, 1350, 1359, 1358, 1360, 1351, 1348, 1348, 1358, 1359,
     1369, 1361, 1364, 1365, 1367, 1367,    0, 1384, 1390, 1382,
        0,    0,    0,    0,    0,    0, 1378, 1389, 1384, 1389,
     1398, 1402, 1380, 1401, 1413, 1417, 1399,    0, 1409, 1419,

        0,    0, 1406, 1425,    0,    0, 1410,    0,    0,    0,
        0, 1422, 1420, 1431, 1421, 1428, 1418, 1423,    0,    0,
     1422, 1423, 1472, 1473, 1430,    0, 1432, 1433,    0, 1444,
        0, 1439, 1457, 1458, 1457, 1455, 1467, 1465, 1465, 1472,
     1479, 1465,    0, 1470, 1471, 1476, 1481, 1478, 1483, 1497,
     1482, 1490, 1504, 1491, 1494, 1509, 1508, 1510, 1509, 1505,
     1508, 1510, 1512, 1526, 1527, 1532, 1518, 1533, 1521, 1536,
     1537, 1538, 1527, 1540,    0,    0,    0,    0,    0,    0,
     1544,    0, 1544,    0,    0, 1549,    0, 1626, 1595, 1600,
     1604, 1607, 1613, 1618

    } ;

static yyconst flex_int16_t yy_def[695] =
    {   0,
      688,    1,  688,    3,    3,    5,    1,    1,    1,    1,
        1,    1,  688,  688,  688,  688,  688,  689,  690,  688,
      688,  688,  688,  688,  688,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  691,  688,  690,  690,  690,
      690,  690,  690,  690,  690,  688,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      688,  690,  690,  690,  690,  690,  692,  690,   78,   78,
       78,  688,  688,  688,  689,  688,  690,  690,  690,  690,
      688,  688,  688,  688,  693,  688,  688,  688,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  694,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  692,
      688,   78,   78,   78,   78,  690,  690,  690,  693,  688,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  694,  688,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,   78,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,   78,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,    0,  688,  688,
      688,  688,  688,  688

    } ;

static yyconst flex_int16_t yy_nxt[1695] =
    {   0,
       14,   15,   16,   17,   18,   19,   14,   20,   21,   22,
       23,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   30,   33,   30,   34,   35,   36,   37,   38,   39,
       30,   40,   41,   42,   43,   44,   30,   30,   30,   45,
       46,   14,   26,   27,   28,   29,   30,   31,   32,   30,
       33,   34,   35,   36,   37,   38,   39,   30,   40,   41,
       42,   43,   44,   30,   30,   30,   45,   47,   14,   15,
       16,   17,   18,   19,   14,   20,   21,   22,   23,   23,
       23,   23,   30,   30,   48,   49,   50,   30,   51,   30,
       30,   30,   30,   52,   53,   30,   54,   30,   30,   55,

       30,   30,   30,   30,   30,   30,   30,   30,   46,   14,
       30,   30,   48,   49,   50,   30,   51,   30,   30,   30,
       52,   53,   30,   54,   30,   30,   55,   30,   30,   30,
       30,   30,   30,   30,   30,   56,   57,  114,   58,   59,
       60,   61,   62,  118,   63,  311,   64,   65,   30,   66,
       30,   67,   91,   68,   92,   92,   92,   92,   69,   94,
      225,   70,   95,  225,   57,  114,   58,   59,   60,   61,
       62,  118,   63,   64,   65,   30,   66,   30,   67,  133,
       68,   93,   93,   93,   93,   69,   72,   72,   70,   71,
       73,   73,   74,   74,   86,   88,   82,   75,   75,   76,

       76,   77,   89,   86,   84,   78,   79,  133,   83,   82,
      107,   80,  688,   90,   72,   72,  112,  688,   73,   73,
       74,   74,   81,   88,   75,   75,   76,   76,  688,   89,
       99,   77,  113,   78,   79,   78,   79,  107,  100,   80,
       90,   80,   96,  112,   92,   92,   92,   92,  115,   81,
      688,   96,   81,   92,   92,   92,   92,  132,   99,  113,
       97,  688,  688,   78,   79,  100,  104,  688,   96,   80,
       92,   92,   92,   92,  101,  115,  108,   98,  121,   81,
      105,  119,  102,  116,  132,  103,  106,  109,   97,  120,
      110,  117,  688,  111,  104,  122,  123,  139,  130,  688,

      124,  142,  101,  138,  108,   98,  121,  105,  140,  119,
      102,  116,  103,  106,  109,  131,  120,  110,  125,  117,
      111,  126,  122,  134,  123,  139,  130,  141,  124,  142,
      138,  127,  143,  128,  129,  140,  144,  688,  135,  145,
      688,  136,  131,  146,  147,  148,  125,  149,  150,  126,
      151,  134,  153,  154,  141,  155,  156,  158,  127,  143,
      128,  129,  160,  152,  144,  135,  157,  145,  136,  159,
      146,  147,   99,  148,  149,  164,  150,  176,  151,  153,
      163,  154,  165,  155,  156,  158,  161,  162,  167,  160,
      152,  177,  118,  157,  182,  166,  168,  159,  115,  178,

       99,  688,  164,  688,  176,  688,  169,  163,  181,  183,
      165,  688,  688,  688,  161,  162,  167,  688,  185,  177,
      118,  182,  166,  688,  168,  115,   96,  178,  170,   92,
       92,   92,  173,  169,  172,   87,  181,  183,  172,  172,
      102,   99,  688,  103,  172,   87,  185,  175,  688,  100,
       87,  124,  688,   87,  184,  172,  186,  191,   87,  174,
      173,  688,  688,   87,  688,  192,  172,  172,  102,   99,
      103,  688,  172,   87,  688,  175,  100,  688,   87,  124,
       87,  184,  172,  186,  191,   87,  174,   93,   93,   93,
       93,   96,  192,   92,   92,   92,   92,   93,   93,   93,

       93,  180,  180,  180,  180,  187,  193,  188,  189,  194,
      688,  195,  196,  688,  197,  198,  199,  688,  190,  200,
      688,  201,  203,  204,  207,  202,  205,  206,  688,  208,
      209,  213,  187,  193,  188,  212,  189,  194,  195,  210,
      196,  197,  198,  214,  199,  190,  215,  200,  201,  203,
      204,  207,  202,  216,  205,  206,  208,  209,  211,  213,
      217,  219,  212,  218,  220,  688,  221,  210,  222,  688,
      223,  214,  226,  227,  215,  228,  229,  230,  231,  232,
      236,  216,  233,  234,  235,  211,  237,  238,  217,  219,
      218,  239,  220,  221,  240,  241,  222,  223,  243,  226,

      227,  246,  228,  229,  230,  247,  231,  232,  236,  233,
      234,  235,  248,  237,  242,  238,  253,  244,  239,  245,
      249,  252,  240,  241,  254,  250,  243,  182,  246,  256,
      257,  259,  247,  260,  255,  251,  196,  688,  261,  248,
      258,  242,  262,  253,  244,  688,  245,  688,  249,  252,
      264,  265,  254,  250,  182,   87,  256,  257,  259,  267,
      260,  255,  251,   87,  196,  261,  688,  269,  258,  262,
       96,  266,  170,   92,   92,   92,  171,  264,  265,  268,
      171,  171,  271,   87,  183,   87,  171,  267,  263,  274,
       87,   87,  688,   87,   87,  269,  270,  171,  266,   87,

      272,  273,   87,  275,  209,  688,  268,  688,  171,  171,
      271,  280,  183,   87,  171,  281,  263,  274,  278,   87,
       87,  282,   87,  270,  171,  279,   87,  272,  273,   87,
      275,  209,  180,  180,  180,  180,  276,  284,  277,  280,
      283,  285,  281,  286,  289,  278,  287,  288,  291,  282,
      292,  293,  279,  290,  296,  303,  297,  294,  298,  688,
      299,  688,  302,  304,  276,  284,  277,  283,  285,  305,
      306,  286,  289,  287,  288,  295,  291,  292,  293,  307,
      290,  308,  296,  303,  297,  294,  298,  299,  300,  302,
      304,  301,  309,  310,  312,  313,  305,  306,  314,  315,

      316,  319,  295,  317,  318,  320,  307,  321,  322,  308,
      323,  324,  688,  325,  326,  300,  327,  328,  301,  309,
      310,  329,  312,  313,  330,  331,  314,  315,  316,  319,
      317,  318,  320,  332,  321,  333,  322,  323,  334,  324,
      325,  326,  335,  327,  336,  328,  337,  688,  338,  329,
      339,  330,  340,  331,  341,  342,  343,  344,  346,   87,
      332,  345,  333,  347,  348,  334,  352,   87,  349,  350,
      335,  351,  336,  353,  337,  338,  354,  355,  339,  340,
      356,  341,  357,  342,  343,  344,  346,   87,  345,  358,
      347,  359,  348,  352,   87,  360,  349,  350,  361,  351,

      353,  362,  363,  354,  355,  364,  688,  365,  356,  366,
      357,  367,  688,  368,  369,  370,  358,  371,  359,  372,
      373,  374,  360,  375,  376,  361,  377,  688,  378,  362,
      363,  379,  380,  364,  365,  381,  382,  366,  383,  367,
      368,  369,  384,  370,  385,  371,  372,  373,  386,  374,
      375,  391,  376,  387,  377,  378,  389,  388,  379,  380,
      390,  392,  381,  394,  382,  393,  383,  395,  398,  396,
      384,  399,  385,  397,  400,  386,  401,  404,  391,  405,
      402,  387,  406,  389,  403,  388,  407,  390,  408,  392,
      409,  394,  410,  393,  395,  398,  396,  411,  412,  399,

      397,  400,  413,  401,  404,  414,   87,  405,  402,  415,
      406,  416,  403,  407,   87,  408,  417,  409,  360,  418,
      410,  419,  420,  421,  411,  422,  412,  423,  424,  413,
      425,  426,  414,  427,   87,  428,  415,  429,  432,  416,
      430,   87,  431,  417,  433,  360,  434,  418,  419,  420,
      421,  435,  440,  422,  423,  424,  436,  437,  425,  426,
      438,  427,  428,  439,  441,  429,  432,  430,  442,  431,
      443,  433,  444,  445,  434,  446,  447,  448,  449,  435,
      440,  450,  452,  436,  437,  451,  453,  438,  454,  457,
      439,  441,  455,  456,  458,  463,  442,  443,  459,  444,

      460,  445,  446,  447,  448,  449,  461,  462,  464,  450,
      452,  465,  451,  453,  466,  472,  454,  457,  467,  455,
      456,  470,  458,  463,  468,  459,  471,  460,  469,  688,
      473,  474,  475,  461,  462,  464,  476,  477,  478,  465,
      479,  481,  466,  472,  480,  467,  482,  483,  470,  484,
      485,  486,  468,  471,  487,  488,  469,  473,  474,  475,
      489,  490,  491,  476,  477,  478,  492,  493,  479,  481,
      494,  480,  495,  482,  496,  483,  484,  485,  497,  486,
      498,  487,  488,  499,  500,  688,  501,  489,  490,  502,
      491,  503,  504,  492,  505,  493,  506,  494,  507,  495,

      508,  509,  496,  510,  688,  511,  497,  498,  512,  513,
      499,  514,  500,  501,  515,  518,  502,  516,  517,  503,
      504,  505,  519,  506,  520,  507,  521,  522,  508,  509,
      523,  510,  511,  524,  527,  512,  525,  513,  526,  514,
      528,  529,  515,  518,  516,  517,  688,  538,  539,  688,
      519,  520,  540,  521,  522,  688,  688,  541,  523,  543,
      542,  524,  527,  525,  544,  526,  545,  528,  529,  530,
      688,  531,  688,  532,  538,  546,  539,  533,  688,  547,
      540,  548,  534,  535,  541,  549,  543,  536,  542,  550,
      551,  544,  537,  552,  545,  553,  554,  530,  555,  531,

      556,  532,  546,  557,  560,  533,  547,  558,  548,  534,
      535,  559,  549,  561,  536,  562,  550,  551,  563,  537,
      552,  564,  553,  554,  567,  555,  565,  556,  568,  566,
      569,  557,  560,  571,  558,  572,  688,  573,  559,  574,
      561,  576,  580,  562,  570,  577,  563,  578,  564,  579,
      581,  567,  582,  565,  575,  568,  566,  583,  569,  584,
      571,  585,  586,  572,  573,  587,  588,  574,  589,  576,
      580,  570,  577,  590,  578,  591,  579,  581,  592,  582,
      593,  575,  594,  595,  583,  596,  584,  597,  585,  586,
      598,  599,  587,  588,  601,  602,  589,  603,  604,  605,

      600,  590,  606,  591,  607,  612,  592,  593,  608,  594,
      595,  609,  596,  610,  597,  611,  615,  598,  616,  599,
      613,  601,  602,  617,  603,  604,  605,  600,  620,  614,
      606,  618,  607,  612,  619,  608,  621,  622,  609,  623,
      610,  624,  611,  625,  615,  616,  626,  627,  613,  628,
      630,  617,  629,  631,  632,  620,  614,  633,  634,  618,
      688,  688,  619,  621,  639,  622,  623,  640,  641,  624,
      625,  642,  643,  626,  627,  644,  645,  628,  630,  629,
      631,  632,  646,  647,  633,  634,  635,  637,  636,  638,
      651,  639,  648,  649,  640,  641,  650,  652,  642,  643,

      653,  654,  655,  644,  645,  656,  657,  658,  659,  646,
      647,  660,  688,  661,  635,  637,  636,  638,  651,  648,
      649,  662,  663,  650,  664,  652,  665,  653,  654,  655,
      666,  668,  656,  657,  658,  659,  667,  669,  670,  660,
      661,  671,  672,  673,  674,  675,  676,  678,  662,  677,
      663,  664,  679,  665,  680,  681,  682,  684,  666,  668,
      683,  685,  686,  667,  669,  670,  687,  688,  671,  672,
      673,  688,  674,  675,  676,  678,  677,  688,  688,  679,
      688,  688,  680,  681,  682,  684,  688,  683,  688,  685,
      686,  688,  688,  688,  687,   85,   85,   85,   85,   85,

       85,   85,   87,  688,   87,   87,  137,  688,  688,  137,
      171,  171,  171,  179,  688,  179,  179,  179,  179,  179,
      224,  688,  224,  224,  224,   13,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688

    } ;

static yyconst flex_int16_t yy_chk[1695] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,   34,    5,    5,
        5,    5,    5,   37,    5,  228,    5,    5,    5,    5,
        5,    5,   20,    5,   20,   20,   20,   20,    5,   22,
      224,    5,   22,  137,    5,   34,    5,    5,    5,    5,
        5,   37,    5,    5,    5,    5,    5,    5,    5,   44,
        5,   21,   21,   21,   21,    5,    9,   10,    5,    5,
        9,   10,    9,   10,   85,   19,   82,    9,   10,    9,

       10,   11,   19,   18,   17,   11,   11,   44,   16,   15,
       29,   11,   13,   19,    9,   10,   32,    0,    9,   10,
        9,   10,   11,   19,    9,   10,    9,   10,    0,   19,
       26,   12,   33,   11,   11,   12,   12,   29,   26,   11,
       19,   12,   23,   32,   23,   23,   23,   23,   35,   11,
        0,   24,   12,   24,   24,   24,   24,   43,   26,   33,
       24,    0,    0,   12,   12,   26,   28,    0,   25,   12,
       25,   25,   25,   25,   27,   35,   31,   25,   39,   12,
       28,   38,   27,   36,   43,   27,   28,   31,   24,   38,
       31,   36,    0,   31,   28,   39,   40,   49,   42,    0,

       40,   52,   27,   48,   31,   25,   39,   28,   50,   38,
       27,   36,   27,   28,   31,   42,   38,   31,   41,   36,
       31,   41,   39,   45,   40,   49,   42,   51,   40,   52,
       48,   41,   53,   41,   41,   50,   54,    0,   45,   55,
        0,   45,   42,   57,   58,   59,   41,   60,   61,   41,
       62,   45,   63,   64,   51,   65,   66,   67,   41,   53,
       41,   41,   69,   62,   54,   45,   66,   55,   45,   68,
       57,   58,   72,   59,   60,   73,   61,   88,   62,   63,
       72,   64,   74,   65,   66,   67,   70,   70,   75,   69,
       62,   89,   76,   66,  100,   74,   76,   68,   75,   90,

       72,    0,   73,    0,   88,    0,   76,   72,   99,  101,
       74,    0,    0,    0,   70,   70,   75,    0,  103,   89,
       76,  100,   74,    0,   76,   75,   77,   90,   77,   77,
       77,   77,   79,   76,   78,   79,   99,  101,   78,   78,
       79,   78,    0,   79,   78,   80,  103,   81,    0,   78,
       81,   81,    0,   80,  102,   78,  104,  107,   81,   80,
       79,    0,    0,   79,    0,  108,   78,   78,   79,   78,
       79,    0,   78,   80,    0,   81,   78,    0,   81,   81,
       80,  102,   78,  104,  107,   81,   80,   91,   91,   91,
       91,   92,  108,   92,   92,   92,   92,   93,   93,   93,

       93,   96,   96,   96,   96,  105,  109,  105,  106,  110,
        0,  111,  112,    0,  113,  114,  115,    0,  106,  115,
        0,  116,  117,  118,  121,  116,  119,  120,    0,  122,
      123,  126,  105,  109,  105,  125,  106,  110,  111,  124,
      112,  113,  114,  127,  115,  106,  128,  115,  116,  117,
      118,  121,  116,  129,  119,  120,  122,  123,  124,  126,
      130,  132,  125,  131,  133,    0,  134,  124,  135,    0,
      136,  127,  138,  139,  128,  140,  141,  142,  143,  144,
      148,  129,  145,  146,  147,  124,  149,  150,  130,  132,
      131,  151,  133,  134,  152,  153,  135,  136,  154,  138,

      139,  156,  140,  141,  142,  157,  143,  144,  148,  145,
      146,  147,  158,  149,  153,  150,  161,  155,  151,  155,
      159,  160,  152,  153,  162,  159,  154,  163,  156,  164,
      165,  167,  157,  167,  163,  159,  166,    0,  168,  158,
      166,  153,  169,  161,  155,    0,  155,    0,  159,  160,
      176,  177,  162,  159,  163,  172,  164,  165,  167,  182,
      167,  163,  159,  172,  166,  168,    0,  184,  166,  169,
      170,  178,  170,  170,  170,  170,  171,  176,  177,  183,
      171,  171,  186,  172,  173,  173,  171,  182,  174,  189,
      172,  174,    0,  173,  175,  184,  185,  171,  178,  174,

      187,  188,  175,  190,  175,    0,  183,    0,  171,  171,
      186,  193,  173,  173,  171,  195,  174,  189,  192,  174,
      173,  196,  175,  185,  171,  192,  174,  187,  188,  175,
      190,  175,  180,  180,  180,  180,  191,  200,  191,  193,
      198,  201,  195,  204,  208,  192,  206,  207,  209,  196,
      210,  211,  192,  208,  213,  218,  214,  212,  214,    0,
      215,    0,  217,  219,  191,  200,  191,  198,  201,  220,
      221,  204,  208,  206,  207,  212,  209,  210,  211,  222,
      208,  223,  213,  218,  214,  212,  214,  215,  216,  217,
      219,  216,  226,  227,  229,  230,  220,  221,  231,  233,

      234,  237,  212,  235,  236,  238,  222,  239,  240,  223,
      241,  242,    0,  243,  244,  216,  245,  246,  216,  226,
      227,  247,  229,  230,  248,  249,  231,  233,  234,  237,
      235,  236,  238,  251,  239,  252,  240,  241,  253,  242,
      243,  244,  254,  245,  255,  246,  256,    0,  257,  247,
      258,  248,  259,  249,  260,  261,  262,  263,  265,  263,
      251,  264,  252,  266,  267,  253,  272,  263,  269,  270,
      254,  271,  255,  273,  256,  257,  276,  277,  258,  259,
      278,  260,  279,  261,  262,  263,  265,  263,  264,  280,
      266,  281,  267,  272,  263,  282,  269,  270,  283,  271,

      273,  284,  285,  276,  277,  287,    0,  289,  278,  290,
      279,  291,    0,  293,  294,  295,  280,  296,  281,  297,
      298,  299,  282,  300,  301,  283,  304,    0,  305,  284,
      285,  307,  308,  287,  289,  309,  310,  290,  312,  291,
      293,  294,  313,  295,  315,  296,  297,  298,  316,  299,
      300,  319,  301,  317,  304,  305,  318,  317,  307,  308,
      318,  320,  309,  321,  310,  320,  312,  322,  324,  323,
      313,  326,  315,  323,  328,  316,  329,  331,  319,  332,
      330,  317,  333,  318,  330,  317,  335,  318,  336,  320,
      337,  321,  338,  320,  322,  324,  323,  339,  340,  326,

      323,  328,  342,  329,  331,  343,  344,  332,  330,  345,
      333,  347,  330,  335,  344,  336,  348,  337,  344,  349,
      338,  350,  351,  352,  339,  353,  340,  354,  355,  342,
      356,  359,  343,  360,  344,  361,  345,  362,  365,  347,
      363,  344,  364,  348,  366,  344,  368,  349,  350,  351,
      352,  369,  374,  353,  354,  355,  370,  371,  356,  359,
      372,  360,  361,  373,  375,  362,  365,  363,  376,  364,
      377,  366,  378,  380,  368,  382,  383,  384,  386,  369,
      374,  387,  389,  370,  371,  388,  390,  372,  392,  395,
      373,  375,  393,  394,  396,  402,  376,  377,  397,  378,

      398,  380,  382,  383,  384,  386,  399,  401,  403,  387,
      389,  404,  388,  390,  405,  411,  392,  395,  406,  393,
      394,  408,  396,  402,  407,  397,  410,  398,  407,    0,
      412,  414,  416,  399,  401,  403,  417,  419,  420,  404,
      421,  423,  405,  411,  422,  406,  424,  425,  408,  426,
      427,  428,  407,  410,  429,  431,  407,  412,  414,  416,
      432,  433,  435,  417,  419,  420,  436,  438,  421,  423,
      439,  422,  440,  424,  441,  425,  426,  427,  442,  428,
      443,  429,  431,  446,  450,    0,  451,  432,  433,  452,
      435,  453,  454,  436,  455,  438,  457,  439,  458,  440,

      459,  462,  441,  463,    0,  464,  442,  443,  465,  466,
      446,  467,  450,  451,  468,  474,  452,  469,  472,  453,
      454,  455,  475,  457,  476,  458,  478,  479,  459,  462,
      480,  463,  464,  481,  484,  465,  482,  466,  483,  467,
      485,  486,  468,  474,  469,  472,    0,  488,  490,    0,
      475,  476,  491,  478,  479,    0,    0,  492,  480,  494,
      493,  481,  484,  482,  496,  483,  497,  485,  486,  487,
        0,  487,    0,  487,  488,  500,  490,  487,    0,  501,
      491,  503,  487,  487,  492,  504,  494,  487,  493,  505,
      508,  496,  487,  509,  497,  510,  511,  487,  512,  487,

      514,  487,  500,  515,  520,  487,  501,  516,  503,  487,
      487,  518,  504,  522,  487,  523,  505,  508,  527,  487,
      509,  530,  510,  511,  532,  512,  531,  514,  533,  531,
      534,  515,  520,  535,  516,  536,    0,  537,  518,  538,
      522,  539,  544,  523,  534,  540,  527,  541,  530,  542,
      545,  532,  547,  531,  538,  533,  531,  550,  534,  554,
      535,  556,  557,  536,  537,  558,  560,  538,  562,  539,
      544,  534,  540,  563,  541,  564,  542,  545,  565,  547,
      566,  538,  567,  568,  550,  569,  554,  570,  556,  557,
      570,  571,  558,  560,  572,  573,  562,  574,  575,  576,

      571,  563,  578,  564,  579,  590,  565,  566,  580,  567,
      568,  587,  569,  588,  570,  589,  592,  570,  593,  571,
      591,  572,  573,  594,  574,  575,  576,  571,  597,  591,
      578,  595,  579,  590,  596,  580,  599,  600,  587,  603,
      588,  604,  589,  607,  592,  593,  612,  613,  591,  614,
      616,  594,  615,  617,  618,  597,  591,  621,  622,  595,
        0,    0,  596,  599,  625,  600,  603,  627,  628,  604,
      607,  630,  632,  612,  613,  633,  634,  614,  616,  615,
      617,  618,  635,  636,  621,  622,  623,  624,  623,  624,
      640,  625,  637,  638,  627,  628,  639,  641,  630,  632,

      642,  644,  645,  633,  634,  646,  647,  648,  649,  635,
      636,  650,    0,  651,  623,  624,  623,  624,  640,  637,
      638,  652,  653,  639,  654,  641,  655,  642,  644,  645,
      656,  658,  646,  647,  648,  649,  657,  659,  660,  650,
      651,  661,  662,  663,  664,  665,  666,  668,  652,  667,
      653,  654,  669,  655,  670,  671,  672,  674,  656,  658,
      673,  681,  683,  657,  659,  660,  686,    0,  661,  662,
      663,    0,  664,  665,  666,  668,  667,    0,    0,  669,
        0,    0,  670,  671,  672,  674,    0,  673,    0,  681,
      683,    0,    0,    0,  686,  689,  689,  689,  689,  689,

      689,  689,  690,    0,  690,  690,  691,    0,    0,  691,
      692,  692,  692,  693,    0,  693,  693,  693,  693,  693,
      694,    0,  694,  694,  694,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "SLParserLex.l"
#line 2 "SLParserLex.l"

// flex --nounistd -o SLParserLex.cpp SLParserLex.lpp

#define ECHO 

#include <map>
#include <vector>
#include <string>
#include "SLParserTypes.h"

int yyerror (const char *s);

namespace shaderlab
{
	struct SLFloat;
	struct SLVector4;
	struct SLShader;
	struct SLProperties;
	struct SLShaderState;
	struct SLSubShader;
	struct SLNormalPass;
	struct SLPassBase;
	struct SLGrabPass;
	struct SLProgram;
	struct SLSubProgram;
	struct SLPropTexture;
}

using namespace shaderlab;

#include "SLParserYacc.hpp"

void InitLex(const char *data, size_t dataSize);
void FreeLex();
int  GetYYLineno();
bool ParseAndEatLine(std::string &outstring);

static int   yyinput (void);
static char* CreateBracketString(const char *src);
static char* CreateNormalString(const char *src);

#define YY_NO_UNPUT



#line 1103 "SLParserLex.cpp"

#define INITIAL 0
#define STATE_FOG 1
#define STATE_STENIL 2
#define STATE_CHANNELS 3
#define STATE_ZTEST 4
#define STATE_COLMASK 5

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 57 "SLParserLex.l"


#line 1285 "SLParserLex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 689 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 688 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "SLParserLex.l"
{ 	return TOKEN_SHADER; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "SLParserLex.l"
{ 	return TOKEN_TAGS; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "SLParserLex.l"
{ 	return TOKEN_LOD; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "SLParserLex.l"
{ 	return TOKEN_CATEGORY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "SLParserLex.l"
{ 	return TOKEN_SUBSHADER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "SLParserLex.l"
{ 	return TOKEN_PROPERTIES; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "SLParserLex.l"
{ 	return TOKEN_RANGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "SLParserLex.l"
{	return TOKEN_COLOR; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "SLParserLex.l"
{
							yylval.enumval = kTexDim2D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "SLParserLex.l"
{
							yylval.enumval = kTexDim3D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "SLParserLex.l"
{
							yylval.enumval = kTexDimCUBE;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 79 "SLParserLex.l"
{
							yylval.enumval = kTexDim2D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-ShaderSemantics.html
							return TOKEN_BIND;
						}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "SLParserLex.l"
{
							return TOKEN_SETTEXTURE;
						}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 91 "SLParserLex.l"
{ 	return TOKEN_FLOAT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 92 "SLParserLex.l"
{ 	return TOKEN_VECTOR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 93 "SLParserLex.l"
{ 	return TOKEN_FLOAT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 94 "SLParserLex.l"
{ 	return TOKEN_MATRIX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 95 "SLParserLex.l"
{ 	return TOKEN_KEYWORDS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "SLParserLex.l"
{ 	return TOKEN_CONSTBUFFER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "SLParserLex.l"
{ 	return TOKEN_BINDCB; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "SLParserLex.l"
{ 	return TOKEN_SETBUFFER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "SLParserLex.l"
{ 	return TOKEN_TRUE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "SLParserLex.l"
{	return TOKEN_FALSE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "SLParserLex.l"
{	return TOKEN_NAME; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "SLParserLex.l"
{ 	return TOKEN_ZWRITE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-CullAndDepth.html
							BEGIN(STATE_ZTEST); 
							return TOKEN_ZTEST; 
						}
	YY_BREAK

case 28:
YY_RULE_SETUP
#line 109 "SLParserLex.l"
{
							BEGIN(INITIAL);
							yylval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 114 "SLParserLex.l"
{
							BEGIN(INITIAL);
							yylval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 119 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncGreater;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 124 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncLEqual;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 129 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncGEqual;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "SLParserLex.l"
{ 
							yylval.enumval = kFuncEqual;
							BEGIN(INITIAL); 
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncAlways;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK

case 36:
YY_RULE_SETUP
#line 151 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Fog.html
							BEGIN(STATE_FOG); 
							return TOKEN_FOG; 
						}
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 157 "SLParserLex.l"
{ 	return TOKEN_COLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 158 "SLParserLex.l"
{ 	return TOKEN_MODE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 159 "SLParserLex.l"
{ 	return TOKEN_DENSITY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 160 "SLParserLex.l"
{ 	return TOKEN_RANGE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 161 "SLParserLex.l"
{
							yylval.enumval = kFogDisabled; 
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 165 "SLParserLex.l"
{
							yylval.enumval = kFogLinear;
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "SLParserLex.l"
{	
							yylval.enumval = kFogExp;
							return VAL_FOG_MODE; 
						}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 173 "SLParserLex.l"
{
							yylval.enumval = kFogExp2;
							return VAL_FOG_MODE; 
						}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "SLParserLex.l"
{
							yylval.enumval = kFogUnknown;
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 181 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							return '}';
						}
	YY_BREAK

case 47:
YY_RULE_SETUP
#line 187 "SLParserLex.l"
{	// https://docs.unity3d.com/Manual/SL-Stencil.html '
							BEGIN(STATE_STENIL);
							return TOKEN_STENCIL;
						}
	YY_BREAK

case 48:
YY_RULE_SETUP
#line 192 "SLParserLex.l"
{ return TOKEN_REF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 193 "SLParserLex.l"
{ return TOKEN_READ_MASK; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "SLParserLex.l"
{ return TOKEN_WRITE_MASK; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 195 "SLParserLex.l"
{ return TOKEN_COMP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 196 "SLParserLex.l"
{ return TOKEN_OP_PASS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 197 "SLParserLex.l"
{ return TOKEN_OP_FAIL; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 198 "SLParserLex.l"
{ return TOKEN_OP_ZFAIL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 200 "SLParserLex.l"
{
							yylval.enumval = kFuncGreater;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 204 "SLParserLex.l"
{
							yylval.enumval = kFuncGEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 208 "SLParserLex.l"
{
							yylval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 212 "SLParserLex.l"
{
							yylval.enumval = kFuncLEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 216 "SLParserLex.l"
{
							yylval.enumval = kFuncEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 220 "SLParserLex.l"
{ 
							yylval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 224 "SLParserLex.l"
{ 
							yylval.enumval = kFuncAlways;		
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 228 "SLParserLex.l"
{
							yylval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 233 "SLParserLex.l"
{
							yylval.enumval = kStencilOpKeep;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 237 "SLParserLex.l"
{ 
							yylval.enumval = kStencilOpZero;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 241 "SLParserLex.l"
{ 
							yylval.enumval = kStencilOpReplace;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 245 "SLParserLex.l"
{
							yylval.enumval = kStencilOpIncrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "SLParserLex.l"
{
							yylval.enumval = kStencilOpDecrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 253 "SLParserLex.l"
{
							yylval.enumval = kStencilOpInvert;	
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 257 "SLParserLex.l"
{
							yylval.enumval = kStencilOpIncrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 261 "SLParserLex.l"
{
							yylval.enumval = kStencilOpDecrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 265 "SLParserLex.l"
{ 	return TOKEN_COMP_FRONT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 266 "SLParserLex.l"
{ 	return TOKEN_COMP_BACK; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 267 "SLParserLex.l"
{ 	return TOKEN_OP_PASS_FRONT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 268 "SLParserLex.l"
{ 	return TOKEN_OP_FAIL_FRONT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 269 "SLParserLex.l"
{ 	return TOKEN_OP_ZFAIL_FRONT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 270 "SLParserLex.l"
{ 	return TOKEN_OP_PASS_BACK; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 271 "SLParserLex.l"
{ 	return TOKEN_OP_FAIL_BACK; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 272 "SLParserLex.l"
{ 	return TOKEN_OP_ZFAIL_BACK; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 273 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return '}';
						}
	YY_BREAK

case 80:
YY_RULE_SETUP
#line 279 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Pass.html '
							BEGIN(STATE_COLMASK); 
							yylval.enumval = 0;
							return TOKEN_COLORMASK;
						}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 285 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = 0; 
							char *temp = yytext;
							while (*temp) { 
								switch (*temp++) {
									case 'r': 
									case 'R':
										yylval.enumval |= 8;
										break;
									case 'g': 
									case 'G':
										yylval.enumval |= 4;
										break;
									case 'b': 
									case 'B':
										yylval.enumval |= 2;
										break;
									case 'a':
									case 'A':
										yylval.enumval |= 1;
										break;
									case 0:
										yylval.enumval = 0;
										break;
								} 
							}
							return VAL_RGBA_MASK;
						}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 315 "SLParserLex.l"
{ 	return TOKEN_ALPHA_TO_MASK; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 316 "SLParserLex.l"
{ 	return TOKEN_CULL; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 317 "SLParserLex.l"
{ 
							yylval.enumval = kCullFront; 
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 321 "SLParserLex.l"
{
							yylval.enumval = kCullBack; 
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 325 "SLParserLex.l"
{
							yylval.enumval = kCullFrontAndBack;
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 329 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Blend.html
							return TOKEN_BLEND;
						}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 333 "SLParserLex.l"
{
							yylval.enumval = kBlendZero; 
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 337 "SLParserLex.l"
{
							yylval.enumval = kBlendOne;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 341 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 345 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 349 "SLParserLex.l"
{
							yylval.enumval = kBlendDstColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 353 "SLParserLex.l"
{
							yylval.enumval = kBlendDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 357 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 361 "SLParserLex.l"
{	yylval.enumval = kBlendOneMinusSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 364 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusDstColor; 
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 368 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 372 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcAlphaSaturate;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 376 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Blend.html
							return TOKEN_BLEND_OP;
						}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 380 "SLParserLex.l"
{
							yylval.enumval = kBlendOpAdd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 384 "SLParserLex.l"
{
							yylval.enumval = kBlendOpSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 388 "SLParserLex.l"
{
							yylval.enumval = kBlendOpRevSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 392 "SLParserLex.l"
{
							yylval.enumval = kBlendOpMin;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 396 "SLParserLex.l"
{
							yylval.enumval = kBlendOpMax;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 400 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalClear;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 404 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalSet;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 408 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalCopy;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 412 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalCopyInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 416 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNoop;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 420 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalInvert;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 424 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAnd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 428 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNand;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 432 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOr;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 436 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 440 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalXor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 444 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalEquiv;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 448 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAndReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 452 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAndInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 456 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOrReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 460 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOrInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 465 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_PASS;
						}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 469 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_GRABPASS;
						}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 473 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_USEPASS;
						}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 477 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_PROGRAM;
						}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 482 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_SUBPROGRAM;
						}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 487 "SLParserLex.l"
{ 	return TOKEN_FALLBACK; }
	YY_BREAK

case 127:
YY_RULE_SETUP
#line 491 "SLParserLex.l"
{
									yylval.strval = CreateBracketString(yytext);
									return VAL_BRACKET_ID;
								}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 495 "SLParserLex.l"
{
									yylval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 499 "SLParserLex.l"
{
									yylval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 503 "SLParserLex.l"
{
									std::string numstr;
									if (ParseAndEatLine(numstr)) {
										// TODO:get line number do something
									} else {
										yyerror("Lex parse #LINE end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 512 "SLParserLex.l"
{
									std::string warningstr;
									if (ParseAndEatLine(warningstr)) {
										// TODO:add warning
									} else {
										yyerror("Lex parse #warning end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 521 "SLParserLex.l"
{
									std::string errorstr;
									if (ParseAndEatLine(errorstr)) {
										// TODO:add error
									} else {
										yyerror("Lex parse #warning end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 530 "SLParserLex.l"
{
									yylval.strval = CreateNormalString(yytext);
									return VAL_ID;
								}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 534 "SLParserLex.l"
{
									yylval.strval = CreateBracketString(yytext);
									const char *temp = yylval.strval;
									while (*temp) {
										char c = *temp;
										if (c == '\n') {
											yylineno++;
										}
										temp++;
									}
									return VAL_STRING;
								}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 546 "SLParserLex.l"
{
									BEGIN(INITIAL);
									return *yytext;
								}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 550 "SLParserLex.l"
{  }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 551 "SLParserLex.l"

	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 552 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 553 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 554 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 555 "SLParserLex.l"
{	yylineno++; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 556 "SLParserLex.l"
{
									int c;
									int depth = 1;
									while (true) {
										while ((c = yyinput()) != '*' && c != '/' && c != EOF && c != '\0') {
											if (c == '\r') {
												yylineno++;
												c = yyinput();
												if (c == '\r') {
													++yylineno;
												}
											} else if (c == '\n') {
												yylineno++;
											}
										}
										if (c == EOF || c == '\0') {
											yyerror("Lex parse block comment end with EOF.");
											yyterminate();
											break;
										}
										if (c == '/') {
											c = yyinput();
											if (c == '*') {
												depth++;
											}
										}
										if (c == '*') {
											while ((c = yyinput()) == '*') {
												;
											}
											if (c == '/') {
												depth--;
												if (depth == 0) {
													break;
												}
											}
										}
									}
									
								}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 596 "SLParserLex.l"
{ 	return *yytext; }
	YY_BREAK

case 144:
YY_RULE_SETUP
#line 599 "SLParserLex.l"
ECHO;
	YY_BREAK
#line 2472 "SLParserLex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STATE_FOG):
case YY_STATE_EOF(STATE_STENIL):
case YY_STATE_EOF(STATE_CHANNELS):
case YY_STATE_EOF(STATE_ZTEST):
case YY_STATE_EOF(STATE_COLMASK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 689 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 689 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 688);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 599 "SLParserLex.l"



YY_BUFFER_STATE b;

void InitLex(const char *data, size_t dataSize) {
	b = yy_scan_bytes(data,dataSize);
	yy_switch_to_buffer(b);
	BEGIN(INITIAL);
}

void FreeLex() {
	yy_delete_buffer(YY_CURRENT_BUFFER);
}

int GetYYLineno() {
	return yylineno;
}

static char *CreateBracketString(const char *src) {
	int size = strlen(src);
	char *buffer = new char[size - 1];
	memcpy(buffer, src + 1, size - 2);
	buffer[size - 2] = '\0';
	return buffer;
}

static char *CreateNormalString(const char *src) {
	int size = strlen(src) + 1;
	char *buffer = new char[size];
	memcpy(buffer, src, size);
	buffer[size - 1] = '\0';
	return buffer;
}

inline bool IsEndChar(int c) {
	if (c == EOF || c == '\0' || c == '\r' || c == '\n') {
		return true;
	} else {
		return false;
	}
}

bool ParseAndEatLine(std::string &outstring)
{
	int c = 0;
	while ((c = yyinput()) && (c==' ' || c=='\t')) {
        ;
    }
	if (IsEndChar(c)) {
		return false;
	}
	std::string temp;
	temp += c;
	while ((c = yyinput()) && !IsEndChar(c)) {
        temp += c;
    }
	if (c == EOF || c == '\0') {
		return false;
	}
	outstring = temp;
	return true;
}
