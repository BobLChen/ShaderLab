#line 1 "SLParserLex.cpp"

#line 3 "SLParserLex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1110] =
    {   0,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       84,   84,  148,  146,  139,  144,  143,  146,  136,  146,
      146,  146,  132,  132,  132,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  146,  138,  136,  136,  136,
      136,  136,  136,  136,  136,   49,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
       82,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,  136,  136,  136,  136,  136,   84,   84,   84,

       84,   84,  139,  142,  141,    0,  137,  136,  136,  136,
      136,    0,  132,  131,  145,  140,  132,    9,   10,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,   25,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,    0,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,  136,  136,  136,
      136,  136,  136,  136,   84,   84,   84,   84,   84,   84,
      136,  136,  136,  140,  132,  103,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,   39,  136,
      136,  136,   19,  136,    3,  136,  136,  107,  106,  136,
       26,   92,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  104,  136,  136,  136,  136,  136,  136,  136,    0,
      130,  136,  136,   46,  136,  136,  136,   44,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,   51,  136,  136,  136,  136,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    3,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,  136,  136,  136,
      136,  136,  136,  136,  136,   84,  136,  136,  136,  136,
       88,   13,  136,  136,  136,  136,   11,   86,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,   28,

      136,  136,  124,  136,  136,  136,   12,  136,  136,  136,
      136,  136,  136,  136,  136,  136,    2,   25,  136,  136,
       91,  136,  136,  136,  136,   47,  136,  136,   41,  136,
      136,   54,  136,  136,   56,  136,  136,  136,  136,   66,
      136,   60,  136,  136,   55,  136,  136,  136,   67,  136,
       14,   14,   14,   14,   14,   13,   14,   14,   14,   14,
       11,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       12,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        2,   14,   14,   14,   14,   14,   14,  136,  136,  136,

      136,  136,   32,  136,  136,   84,  136,  133,  136,  136,
      136,   90,  136,   15,  136,  136,  136,  136,   26,   17,
       87,  136,  136,  136,  136,  136,  136,  136,  136,  136,
        7,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   30,  136,   40,  136,  136,  136,   43,  136,
      136,  136,  136,  136,   62,  136,  136,  136,  136,  136,
      136,  136,  136,   65,  136,  136,  136,  136,  136,  136,
       57,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    7,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,  136,
       36,  136,  136,  136,   31,  136,  135,  136,  136,   23,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   20,   27,  136,  136,  136,  105,  136,  136,
        1,  136,  136,  136,  136,  136,  136,   18,   29,  136,
       48,   45,   64,  136,  136,  136,  136,  136,  136,   59,
      136,  136,  136,   71,   61,  136,  136,  136,  136,  136,
      136,  136,  136,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,   14,   14,

       14,   14,   14,   14,   14,   14,   38,   35,  136,   34,
      136,  136,  136,  102,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  127,  136,  136,  136,
      136,  136,   50,  136,  136,  126,   42,  136,  136,   70,
      136,  136,  136,   58,   69,  136,  136,  136,  136,  136,
       68,  136,  136,  136,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   33,
      136,  134,  136,    4,  136,  136,   96,   95,  129,  136,
      136,  125,   21,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,   94,   93,  136,  136,   75,
      136,   73,   80,  136,   72,   63,   79,  136,   52,  136,
      136,  136,   14,   14,    4,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       37,  136,   83,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  116,  136,  136,  136,  136,  136,   24,
      136,  136,  136,    5,   74,   77,   76,   53,   81,  136,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,    5,  136,  136,  136,  136,  114,  136,  136,
      136,  136,  136,  136,  117,  136,  136,  109,  118,  136,
      136,    6,   16,  136,  128,   78,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    6,   14,   14,   14,   85,   22,
      136,  136,  136,  136,  136,  110,  136,  136,  115,  112,
      136,  136,  136,  136,  136,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   89,    8,  136,  136,  108,  136,  119,  136,
      136,  136,  136,  136,  136,  136,  136,   14,    8,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,  136,  136,  136,  113,  136,  136,  136,  136,
      136,  136,  136,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,  136,  136,  136,  136,  122,  100,
       99,   98,   97,  101,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,  136,  120,  136,  123,   14,   14,

       14,   14,  121,  136,   14,   14,  111,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,    1,   42,    1,   24,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   24,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,   68,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    1,    4,    1,
        5,    5,    5,    5,    6,    6,    3,    3,    3,    3,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    7,    6,    6,    3,    3,    3,    3,    6,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    6,    3,
        3,    3,    3,    3,    3,    3,    3,    1
    } ;

static const flex_int16_t yy_base[1117] =
    {   0,
        0,    0,   68,    0,  122,    0,  190,    0,  244,  245,
      263,  293,  280, 2513,  275,  272,  266,  262,  249,  144,
      171,  153,  306,  315,  332,  285,  332,  324,  128,    0,
      334,  332,  234,  119,  254,  325,  129,  351,  341,  355,
      373,  379,  272,  304,  378,    0, 2513,  301,  335,  331,
      375,  358,  374,  368,  398, 2513,  378,  381,  398,  388,
      406,  408,  396,  407,  410,  414,  421,  425,  415,  433,
     2513,  439,  442,  456,  448,  415,    0,  458,  464,  434,
      431,  437,  482,  470,  480,  483,  487,  497,  505,  479,
      499,  526,  523,  493,  508,  524,  553,  572,  599,  576,

      575,  618,  259, 2513, 2513,  182, 2513,    0,  518,  538,
      555,  627,  642,  655, 2513,    0,  661, 2513, 2513,  557,
      522,  561,  569,  569,  574,  631,  634,  615,  636,  634,
      574,  641,  642,  603,  645,  641,  664,  654,  653,  664,
      663,  674,  662,  667,  670,  684,  665,  685,  685,  684,
      689,  688,  677,  695,  699,  692,  698,  695,  138,  706,
      706,  705,  707,  710,  722,  721,  715,  709,  721,  732,
      717,  727,  722,  736,  740,  737,  733,  724,  733,  738,
      766,  749,  742,  767,    0,  756,  766,  775,  774,  765,
      780,  771,  783,  770,  779,  795,  772,  782,  784,  795,

      790,  789,  812,  795,  797,  820,  809,  809,  818,  829,
      831,  819,  824,  826,  840,  825,  845,  844,  843,  849,
      846,  836,  849,  856,  843,  863,  852,  857,  856,  861,
      885,  866,  870,  873,  926,  930,  890,  930,  934,  935,
      883,  889,  891,    0,  953,    0,  905,  905,  913,  930,
      935,  939,  936,  951,  946,  969,  967,  963,    0,  963,
      962,  978,    0,  960,    0,  978,  971,    0,    0,  985,
      974,  981,  976,  995,  984,  976,  978,  997,  997, 1006,
      998, 1009,  995,  998, 1010, 1012, 1018, 1015, 1027,  122,
     2513, 1025, 1023,  133, 1041, 1040, 1041,    0, 1040, 1047,

     1034, 1033, 1053, 1044, 1036, 1057, 1044, 1058, 1049, 1045,
     1049, 1065, 1067, 1060, 1076,    0, 1073, 1067, 1073, 1072,
     1072, 1080, 1078,    0, 1089, 1088, 1097, 1089, 1099, 1092,
     1091, 1100, 1099, 1115, 1101, 1121,    0, 1110, 1111, 1126,
        0, 1108,    0, 1126, 1121,    0,    0, 1131, 1122, 1129,
     1124, 1141, 1138, 1132, 1134, 1147, 1151, 1158, 1151, 1155,
     1153, 1155, 1159, 1158, 1166, 1163, 1153, 1184, 1185, 1170,
     1192, 1174, 1177, 1192, 1195, 1208, 1188, 1199, 1192, 1206,
        0, 1208, 1211, 1209, 1201, 1204,    0,    0, 1214, 1212,
     1215, 1224, 1211, 1214, 1218, 1221, 1226, 1239, 1239,    0,

     1244, 1241,    0, 1234, 1250, 1251,    0, 1238, 1239, 1257,
     1260, 1255, 1254, 1268, 1255, 1266,    0,    0, 1274, 1265,
        0, 1261, 1262, 1267, 1279,    0, 1288, 1290,    0, 1287,
     1270, 1295, 1287, 1292, 1309, 1297, 1285, 1295, 1295,    0,
     1320,    0, 1305, 1307, 1328, 1314, 1327, 1330,    0, 1326,
     1327, 1331, 1330, 1345,    0, 1344, 1344, 1345, 1337, 1337,
        0,    0, 1347, 1345, 1351, 1356, 1346, 1347, 1350, 1354,
     1357, 1370, 1368,    0, 1373, 1370,    0, 1365, 1380, 1383,
        0, 1369, 1370, 1387, 1391, 1386, 1385, 1399, 1386, 1400,
        0,    0, 1408, 1396,    0, 1392, 1394, 1390, 1407, 1420,

     1403, 1425,    0, 1410, 1412, 1428, 1416,    0, 1426, 1423,
     1443, 1432, 1433, 1438, 1450, 1441, 1446, 1452,    0,    0,
     1458, 1447, 1463, 1448, 1467, 1448, 1456, 1463, 1468, 1461,
        0, 1480, 1477, 1462, 1470, 1474, 1479, 1485, 1483, 1494,
     1481, 1483,    0, 1497,    0, 1485, 1495, 1490,    0, 1490,
     1511, 1496, 1515, 1501,    0, 1519, 1506, 1514, 1516, 1528,
     1513, 1513, 1525,    0, 1517, 1538, 1524, 1542, 1542, 1534,
     1548, 1534,    0, 1546, 1539, 1554, 1546, 1547, 1550, 1564,
     1552, 1558, 1571,    0,    0, 1574, 1562, 1579, 1567, 1580,
     1563, 1571, 1578, 1592, 1578,    0, 1596, 1593, 1577, 1584,

     1589, 1594, 1598, 1595, 1610, 1594, 1597,    0, 1611, 1601,
        0, 1610, 1612, 1612,    0, 1604,    0, 1616, 1616,    0,
     1618, 1618, 1637, 1620, 1635, 1631, 1645, 1636, 1646, 1636,
     1652, 1647,    0,    0, 1639, 1649, 1644,    0, 1659, 1647,
        0, 1661, 1657, 1662, 1663, 1671, 1659,    0,    0, 1654,
        0,    0,    0, 1677, 1668, 1665, 1687, 1687, 1677,    0,
     1677, 1676, 1699,    0,    0, 1701, 1701, 1692, 1690, 1706,
     1712, 1713, 1699,    0, 1706, 1706,    0, 1708, 1707, 1714,
     1705, 1719, 1714, 1728, 1719, 1728, 1718, 1734, 1728,    0,
        0, 1724, 1733, 1729,    0, 1744, 1734,    0, 1749, 1746,

     1750, 1751, 1761, 1749,    0,    0,    0,    0, 1751,    0,
     1769, 1764, 1761,    0, 1750, 1758, 1773, 1779, 1764, 1772,
     1780, 1769, 1771, 1772, 1818, 1778,    0, 1783, 1789, 1782,
     1799, 1793,    0, 1795, 1801,    0,    0, 1805, 1811,    0,
     1810, 1818, 1817,    0,    0, 1819, 1824, 1828, 1827, 1833,
        0, 1826, 1843, 1833, 1843, 1841,    0, 1832, 1842, 1859,
     1866, 1852, 1862, 1872, 1861, 1861, 1863, 1909, 1867,    0,
     1868, 1878, 1868, 1886, 1872,    0, 1874, 1889,    0,    0,
     1886,    0, 1898,    0, 1891, 1897,    0,    0,    0, 1906,
     1919,    0,    0, 1912, 1920, 1913, 1920, 1943, 1919, 1916,

     1924, 1937, 1938, 1929, 1934, 1935,    0, 1944, 1945,    0,
     1945,    0,    0, 1947,    0,    0,    0, 1948,    0, 1959,
     1964, 1962,    0, 1976,    0, 1969, 1972,    0,    0,    0,
     1980, 1983,    0,    0, 1972, 1976, 1970, 1975, 2007, 1975,
     1991, 1983, 2000, 1994, 1983, 1993, 1998,    0, 2008, 2003,
        0, 2004,    0, 2021, 2028, 2018, 2029, 2029, 2023, 2019,
     2019, 2028, 2037, 2038, 2023, 2027, 2032, 2035, 2040,    0,
     2030, 2059, 2051,    0,    0,    0,    0,    0,    0, 2045,
     2052,    0, 2068, 2073, 2063, 2073, 2076, 2068, 2064, 2065,
     2075, 2075, 2086, 2074, 2079, 2080, 2082, 2087,    0, 2102,

     2107, 2097,    0, 2102, 2097, 2115, 2110, 2116, 2121, 2103,
     2120, 2125, 2128, 2122,    0, 2125, 2136,    0,    0, 2123,
     2141,    0,    0, 2128,    0,    0, 2138, 2133, 2142, 2143,
     2145, 2155, 2134, 2155, 2162, 2164, 2146,    0, 2157, 2169,
        0,    0, 2157, 2176,    0,    0, 2161,    0,    0,    0,
     2172, 2181, 2173, 2183, 2173, 2184, 2175, 2181,    0,    0,
     2178, 2179, 2202, 2208, 2194,    0,    0, 2206, 2190, 2205,
     2201, 2202, 2203, 2201, 2207,    0,    0, 2207, 2208, 2235,
     2240, 2211,    0,    0, 2213, 2223,    0, 2234,    0, 2229,
     2246, 2248, 2243, 2243, 2248, 2246, 2245,    0,    0, 2243,

     2245,    0, 2254,    0, 2250, 2268, 2269, 2265, 2263, 2268,
     2268, 2266, 2281, 2284, 2269,    0, 2275, 2278, 2282, 2287,
     2284, 2291, 2305, 2303, 2304, 2290,    0, 2295, 2297, 2300,
     2307, 2305, 2310, 2323, 2310, 2311, 2326, 2313, 2316, 2330,
     2326, 2336, 2332, 2330, 2333, 2335, 2340, 2334, 2338, 2350,
     2346, 2355, 2350, 2347, 2349, 2351, 2353, 2370, 2371, 2378,
     2364, 2382, 2367, 2382, 2369, 2371, 2375, 2390, 2394, 2399,
     2384, 2404, 2390, 2401, 2405, 2408, 2398, 2410,    0,    0,
        0,    0,    0,    0, 2414, 2416, 2404, 2418,    0,    0,
        0,    0,    0,    0, 2421,    0, 2421,    0, 2426,    0,

     2426,    0,    0, 2428,    0, 2432,    0,    0, 2513, 2478,
     2483, 2487, 2491, 2494, 2500, 2505
    } ;

static const flex_int16_t yy_def[1117] =
    {   0,
     1109,    1, 1109,    3,    3,    5, 1109,    7,    1,    1,
        1,    1, 1109, 1109, 1109, 1109, 1109, 1110, 1111, 1109,
     1109, 1109, 1109, 1109, 1109, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1112, 1109, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1109, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1109, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1111, 1111, 1111, 1111, 1111, 1114, 1111,   99,

       99,   99, 1109, 1109, 1109, 1110, 1109, 1111, 1111, 1111,
     1111, 1109, 1109, 1109, 1109, 1115, 1109, 1109, 1109, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1116, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1114, 1109,   99,   99,   99,   99,
     1111, 1111, 1111, 1115, 1109, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1116,
     1109, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111,   99, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111,   99, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1111, 1111, 1111, 1111, 1113, 1113,

     1113, 1113, 1111, 1111, 1113, 1113, 1111, 1113,    0, 1109,
     1109, 1109, 1109, 1109, 1109, 1109
    } ;

static const flex_int16_t yy_nxt[2582] =
    {   0,
       14,   15,   16,   17,   18,   19,   14,   20,   21,   22,
       23,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   30,   33,   30,   34,   35,   36,   37,   38,   39,
       30,   40,   41,   42,   43,   44,   30,   30,   30,   45,
       46,   14,   26,   27,   28,   29,   30,   31,   32,   30,
       33,   34,   35,   36,   37,   38,   39,   30,   40,   41,
       42,   43,   44,   30,   30,   30,   45,   47,   14,   15,
       16,   17,   18,   19,   14,   20,   21,   22,   23,   23,
       23,   23,   30,   30,   48,   49,   50,   30,   51,   30,
       30,   30,   30,   52,   53,   30,   54,   30,   30,   55,

       30,   30,   30,   30,   30,   30,   30,   30,   46,   14,
       30,   30,   48,   49,   50,   30,   51,   30,   30,   30,
       52,   53,   30,   54,   30,   30,   55,   30,   30,   30,
       30,   30,   30,   30,   30,   56,   57,  136,   58,   59,
       60,   61,   62,  140,   63,  426,   64,   65,   30,   66,
       30,   67,  112,   68,  113,  113,  113,  113,   69,  115,
      128,   70,  116,  291,   57,  136,   58,   59,   60,   61,
       62,  140,   63,   64,   65,   30,   66,   30,   67,  291,
       68,  114,  114,  114,  114,   69,  107,  128,   70,   71,
       14,   15,   16,   17,   18,   72,   14,   20,   21,   22,

       23,   23,   24,   25,   73,   74,   75,   76,   77,   78,
       79,   77,   80,   77,   81,   82,   83,   84,   85,   86,
       77,   87,   88,   89,   90,   91,   77,   77,   77,   92,
       46,   14,   73,   74,   75,   76,   77,   78,   79,   77,
       80,   81,   82,   83,   84,   85,   86,   77,   87,   88,
       89,   90,   91,   77,   77,   77,   92,   47,   93,   93,
      103,  135,   94,   94,   95,   95,  107,  109,  105,   96,
       96,   97,   97,   98,  110,  104,  103,   99,  100, 1109,
     1109, 1109,  137,  101, 1109,  111,   93,   93,  135, 1109,
       94,   94,   95,   95,  102,  109,   96,   96,   97,   97,

     1109,  110,  120,   98,  154,   99,  100,   99,  100,  137,
      121,  101,  111,  101,  117, 1109,  113,  113,  113,  113,
     1109,  102,  155,  117,  102,  113,  113,  113,  113,  160,
      120,  154,  118, 1109, 1109,   99,  100,  121,  125,  138,
      117,  101,  113,  113,  113,  113,  122,  139,  129,  119,
      155,  102,  126,  161,  123,  143,  160,  124,  127,  130,
      118,  133,  131,  134, 1109,  132,  125,  138,  162,  145,
      141, 1109,  144,  146,  122,  139,  129,  119,  142,  126,
      164,  161,  123,  143,  124,  127,  130,  166,  133,  131,
      134,  147,  132,  152,  148,  162,  156,  145,  141,  144,

      163,  146,  165,  168,  149,  142,  150,  151,  164,  169,
      153,  157,  167, 1109,  158,  166,  170, 1109,  171,  147,
      172,  152,  148,  175,  156,  176,  173,  163,  177,  165,
      168,  149,  178,  150,  151,  180,  169,  153,  157,  174,
      167,  158,  179,  181,  170,  171,  182,  197,  172,  205,
      175,  183,  184,  176,  173, 1109,  177,  186, 1109,  189,
      178,  204,  194,  180,  187,  206,  174,  190, 1109,  179,
      191,  181,  198,  182,  197,  188,  195,  205,  192,  183,
      184,  193,  196,  199,  209,  186,  200,  189,  204,  201,
      194,  187,  206,  202,  190,  203,  207,  212,  191,  210,

      198,  214,  188,  195,  208,  215,  192,  211,  193,  196,
      199,  223,  209,  200,  213,  216,  201,  224,  217,  221,
      202, 1109,  203,  229,  207,  212,  230,  210,  218,  214,
      219,  220,  208,  215,  211, 1109,  222,  133,  223,  231,
      120,  213,  232,  216,  225,  224,  217,  221,  228,  241,
      229,  247,  137, 1109,  230,  218, 1109,  219,  220,  226,
      242, 1109,  227,  222,  133, 1109,  231,  140,  120,  243,
      232,  233,  225, 1109,  246,  228,  241,  248,  247,  137,
      117,  234,  235,  113,  113,  113,  226,  250,  242,  227,
      238, 1109,  108,  108,  259,  140,  249,  243,  123,  233,

      108,  124,  246, 1109,  133,  248,  239,  251,  234,  237,
     1109, 1109, 1109,  237,  237,  250,  120,  262,  238,  237,
      108,  108,  259,  249,  121, 1109,  123,  108,  124, 1109,
      237,  133,  240,  239,  251,  108,  146,  114,  114,  114,
      114,  237,  237,  108,  120,  262, 1109,  237,  256,  254,
      117,  121,  113,  113,  113,  113,  252,  237,  253,  255,
      240,  257,  258,  108,  146,  114,  114,  114,  114,  260,
      108,  245,  245,  245,  245,  256,  261,  254,  263,  264,
      269,  265,  271,  252,  266,  253,  255,  267,  257,  258,
      270,  268,  272, 1109,  273,  274,  260,  275,  278,  279,

      276,  280,  281,  261,  282,  263,  264,  269,  283,  265,
      271,  284,  266,  285,  267,  286,  288,  270,  268,  277,
      272,  273,  274,  287,  275,  278,  289,  279,  276,  280,
      281,  292,  282,  293,  294,  295,  283,  296,  284,  297,
      298,  285,  299,  286,  288,  300,  277,  301,  302,  304,
      287,  303,  305,  289,  306,  309,  307, 1109,  292,  312,
      293,  294,  295,  310,  296,  311,  313,  297,  298,  299,
      314,  318,  300,  319,  301,  308,  302,  304,  303,  305,
      315,  320,  306,  309,  307,  316,  312,  321,  322,  323,
      310,  324,  311,  313,  325,  317,  326,  314,  327,  318,

      319,  328,  308,  329,  330,  334,  331,  335,  315,  320,
      332, 1109,  336,  316,  321,  337,  322,  323,  338,  324,
      333,  325,  317,  339,  326,  327,  340, 1109,  341,  328,
      329,  330,  334,  331,  335,  342,  347,  343,  332,  336,
      344, 1109,  345,  337,  348,  338,  346,  333,  349,  350,
      339,  351,  352,  353,  340,  341,  354, 1109,  356,  357,
      358,  359,  342,  347,  360,  343,  361,  363,  344,  345,
      362,  348,  364,  346,  365,  355,  349,  350,  351,  352,
      353,  366, 1109,  367,  354,  356,  247,  357,  358,  359,
      369,  370,  360,  368,  361,  363,  372,  362,  373,  262,

      364,  365,  355,  371, 1109,  374,  375,  108, 1109,  366,
      367, 1109, 1109,  247,  377,  108,  378,  369,  370, 1109,
      368, 1109,  379,  372, 1109,  373,  380,  262, 1109,  381,
      382,  371,  374,  375,  117,  108,  235,  113,  113,  113,
      236,  377,  108,  378,  236,  236,  248,  108,  376,  379,
      236,  108,  108,  384,  380,  108,  381,  383,  382,  108,
      108,  236,  275,  245,  245,  245,  245,  385,  386,  387,
     1109,  388,  236,  236,  248,  108,  376,  393,  236,  108,
      108,  384,  108,  389,  383,  390,  108,  108,  236,  275,
      394,  395,  391,  396,  385,  386,  397,  387,  388,  392,

      398, 1109,  399,  400,  406,  393,  401,  402,  403,  407,
      408,  389,  409,  390,  411,  404,  418,  394,  395,  391,
      412,  396,  413,  397,  405,  414,  392,  417,  398,  399,
      410,  400,  406,  401,  402,  403,  407,  408,  415,  419,
      409,  416,  411,  404,  418,  420,  421,  422,  412,  423,
      413,  405,  414,  424,  417,  425,  427,  410,  428,  429,
      430,  431, 1109,  432,  433,  415,  419,  434,  416,  435,
      436,  437,  420,  421,  422,  438,  439,  423,  440,  441,
      424,  442,  425,  443,  427,  444,  428,  429,  430,  431,
      432,  433,  445,  446,  450,  434,  435,  436,  447,  437,

      448,  449,  438,  451,  439,  440,  441,  452,  442,  453,
      454,  443,  455,  444,  456, 1109,  457,  458,  461,  445,
      459,  446,  450,  460,  462,  447,  465,  448,  449,  463,
      451,  464, 1109,  466,  452,  467,  453,  468,  454,  455,
      469,  470,  456,  457,  471,  458,  461,  459,  472,  474,
      460,  462,  473,  465,  475,  476,  477,  463,  480,  464,
      466,  478,  483,  467,  468,  481,  482,  469,  485,  470,
      479,  471,  486,  492,  487,  497,  472,  474,  488,  473,
      484,  475,  476,  477,  489,  491,  480,  490,  493,  478,
      483,  494,  481,  482,  495,  496,  485,  479,  498,  499,

      486,  492,  487,  497,  500,  488,  501,  484,  502,  503,
      504,  489,  491,  505,  490,  493,  507,  508,  494,  509,
      510,  495,  496,  506,  511,  108,  498,  499,  512,  513,
      518,  500,  514,  108,  501,  502,  503,  515,  504,  516,
      517,  505,  519,  507,  520,  508,  509,  521,  510,  522,
      523,  506,  511,  108,  524,  525,  512,  513,  518,  514,
      108,  526,  527,  528,  515,  529,  516,  517,  530,  531,
      519,  520,  532,  533,  521,  534,  522,  523,  535, 1109,
      536,  524,  537,  525,  538, 1109,  539,  540,  541,  526,
      527,  528,  529,  542,  543,  544,  530,  531,  545,  532,

      533,  546,  547,  534,  548,  549,  535,  536,  550,  537,
      551,  558,  538,  539,  552,  540,  541,  555,  559,  553,
      542,  543,  544,  554,  556,  545,  562,  560,  557,  546,
      547,  561,  548,  549,  563,  550,  564,  565,  551,  558,
      568,  569,  552,  566,  555,  559,  553,  567,  570,  573,
      554,  571,  556,  562,  560,  572,  557,  574,  561,  575,
      576,  577,  563,  564,  565,  578,  583,  568,  579,  569,
      580,  566,  581,  582,  584,  567,  570,  573,  571,  585,
      586,  587,  572,  588,  574,  589,  590,  575,  576,  577,
      591,  592,  593,  578,  583,  579,  594,  580,  595,  581,

      582,  596,  584,  597,  598,  599,  585,  586,  587,  600,
      588,  601,  589,  602,  590,  603, 1109,  604,  591,  592,
      593,  605,  606,  594,  607,  608,  595,  609,  610,  596,
      597,  598,  611,  599,  612, 1109,  613,  600,  601,  614,
      602,  615,  616,  603,  604,  108, 1109,  617,  618,  605,
      606,  607,  608,  108,  609,  610,  619,  523,  620,  611,
      621,  622,  612,  613,  623,  624,  627,  614,  615,  616,
      625,  626,  628,  108,  617,  629,  618,  630, 1109,  631,
      108,  632,  636,  619,  523,  633,  620,  621,  622,  634,
      635,  623,  637,  624,  627,  638,  639,  625,  626,  640,

      628,  641,  629,  642,  643,  630,  631,  644,  646,  632,
      636,  645,  633,  647,  648,  649,  634,  635,  650,  637,
      651,  652,  653,  638,  639,  654,  640,  655,  641,  656,
      642,  643,  657,  658,  661,  644,  646,  659,  645,  660,
      647,  648,  662,  649,  663,  650,  664,  651,  652,  653,
      665,  666,  667,  654,  655,  668,  669,  656,  670,  657,
      671,  658,  661,  672,  659,  674,  660,  673,  675,  677,
      662,  663,  676,  664,  678,  679,  680,  665,  666,  681,
      667,  682,  668,  683,  669,  684,  670,  671,  685, 1109,
      686,  672,  674,  687,  689,  673,  675,  677,  688,  676,

      690,  678,  679,  680,  691,  692,  693,  681,  682,  694,
      683,  695,  696,  684,  697,  698,  685,  686,  699,  700,
      701,  687,  689,  702,  703,  688,  704,  690,  705,  706,
      709,  691,  692,  707,  693,  708,  694,  710,  711,  695,
      696,  697,  698,  712,  713,  699,  700,  714,  701,  715,
      702,  716,  703,  704,  717,  705,  718,  706,  709,  719,
      707,  720,  708,  721,  710,  711,  722, 1109,  723,  724,
      712,  713,  725,  726,  714,  727,  715,  728,  729,  716,
      730,  717,  731,  734,  718,  732,  719,  733,  735,  720,
      721,  736,  737,  738,  722,  723,  739,  724,  740,  725,

      726,  741,  727,  742,  728,  743,  729,  730,  744,  745,
      731,  734,  732,  746,  733,  747,  735,  748,  736,  737,
      749,  738,  750,  739,  751,  740,  752,  753,  759,  741,
      754,  742,  743,  755,  756,  744,  745,  757,  758,  760,
      761,  746,  762,  747,  763,  748,  764,  749,  765,  750,
      766,  767,  751,  768,  752,  753,  759,  754,  769,  770,
      755,  756,  771,  772,  757,  758,  760,  773,  761,  762,
      774,  777,  763,  764,  775,  776,  765,  766,  778,  767,
      768,  779,  780,  781,  782,  769,  770,  783,  784,  771,
      785,  772,  786,  787,  773,  788,  789,  790,  774,  777,

      791,  775,  776,  792,  793,  803,  778,  804,  779,  780,
      802,  781,  782,  806,  783,  784,  805,  785, 1109,  809,
      786,  787,  788,  789,  807,  790,  808,  791, 1109,  810,
      792,  793,  794,  803,  795,  804,  796,  802,  811,  812,
      797,  806,  813,  805,  814,  798,  799,  809,  815,  816,
      800,  807,  817,  808,  818,  801,  810,  819,  820,  821,
      794,  822,  795,  823,  796,  811,  812,  824,  797,  813,
      825,  814,  798,  799,  826,  815,  816,  800,  827,  817,
      828,  818,  801,  829,  819,  820,  830,  821,  822,  831,
      844,  823,  832,  833,  824,  834,  845,  825, 1109,  843,

      847,  826,  846,  848, 1109,  849,  827,  850,  828, 1109,
      829,  851,  852,  830, 1109,  853,  854,  831,  844,  832,
      833,  855,  834,  835,  845,  836,  843,  837,  847,  846,
      848,  838,  849,  856,  865,  850,  839,  840,  851,  857,
      852,  841,  853,  860,  854,  858,  842,  861,  859,  855,
      864,  835,  866,  836,  867,  837,  869,  862,  873,  838,
      870,  856,  865,  839,  840,  871,  857,  872,  841,  868,
      860,  863,  858,  842,  861,  859,  874,  864,  875,  866,
      876,  877,  867,  878,  869,  862,  873,  870,  879,  880,
      881,  883,  871,  882,  872,  884,  868,  885,  863,  886,

      889,  887,  890,  874,  888,  875,  893,  876,  877,  894,
      878,  895,  898, 1109,  899,  879,  880,  896,  881,  883,
      882,  891,  902,  884,  900,  885,  886,  889,  887,  890,
      901,  888,  897,  893,  903,  892,  904,  894,  895,  905,
      898,  899,  906, 1109,  907,  896,  908,  909,  923,  891,
      902,  900,  910,  911,  912,  913,  918,  901,  919,  897,
      916,  903,  892,  904,  920,  914,  921,  905,  915,  917,
      906,  907,  922,  924,  908,  909,  923,  925,  926,  910,
      911,  912,  913,  918,  927,  919,  928,  929,  916,  930,
      931,  920,  914,  921,  932,  915,  917,  933,  934,  922,

      935,  924,  936,  937,  925,  926,  938,  941,  939, 1109,
      942,  927,  943,  944,  928,  929,  930,  940,  931,  945,
      946,  947,  932,  948,  933,  934,  949,  935,  950,  936,
      937,  951,  952,  938,  941,  955,  939,  942,  953,  943,
      944,  956,  957,  958,  940,  959,  945,  954,  946,  947,
      948,  960,  961,  949,  962,  950,  963,  964,  968,  951,
      952,  965,  966,  955,  967,  969,  953,  970,  956,  972,
      957,  958,  973,  959,  954,  977,  971,  974,  960,  961,
      975,  976,  962,  963,  978,  964,  968,  979,  965,  966,
      980,  967,  981,  969,  982,  970,  983,  972,  984,  973,

      985,  986,  977,  971,  987,  974,  988,  999,  975,  976,
      989,  978,  990,  991,  992,  979,  993,  980,  994, 1001,
      981,  982,  995,  983,  996, 1003,  984,  985,  997,  986,
      998,  987, 1000, 1002,  988,  999, 1004,  989, 1005,  990,
      991,  992, 1006, 1007,  993, 1012,  994, 1001, 1013, 1008,
      995, 1009,  996, 1003, 1010,  997, 1011,  998, 1014, 1000,
     1002, 1015, 1016, 1004, 1017, 1005, 1018, 1109, 1019, 1006,
     1007, 1020, 1012, 1021, 1022, 1013, 1023, 1008, 1024, 1009,
     1025, 1026, 1010, 1027, 1011, 1014, 1028, 1029, 1015, 1016,
     1030, 1031, 1017, 1032, 1018, 1019, 1033, 1034, 1020, 1035,

     1021, 1022, 1036, 1023, 1037, 1024, 1038, 1025, 1026, 1039,
     1027, 1040, 1041, 1042, 1028, 1029, 1043, 1030, 1031, 1044,
     1032, 1045, 1046, 1033, 1034, 1047, 1048, 1035, 1049, 1050,
     1036, 1037, 1051, 1038, 1052, 1053, 1039, 1054, 1040, 1041,
     1042, 1055, 1056, 1043, 1057, 1109, 1058, 1044, 1059, 1045,
     1046, 1060, 1047, 1048, 1061, 1049, 1050, 1062, 1067, 1051,
     1063, 1052, 1053, 1064, 1065, 1054, 1066, 1068, 1055, 1056,
     1069, 1070, 1057, 1058, 1071, 1059, 1072, 1109, 1073, 1060,
     1074, 1061, 1075, 1076, 1077, 1062, 1067, 1063, 1078, 1079,
     1064, 1065, 1080, 1066, 1068, 1081, 1082, 1069, 1083, 1070,

     1084, 1071, 1085, 1086, 1072, 1073, 1087, 1074, 1088, 1075,
     1076, 1077, 1089, 1090, 1109, 1091, 1078, 1079, 1092, 1094,
     1080, 1093, 1081, 1095, 1082, 1083, 1096, 1098, 1084, 1085,
     1086, 1097, 1099, 1087, 1100, 1102, 1088, 1101, 1103, 1104,
     1089, 1090, 1091, 1105, 1106, 1107, 1092, 1094, 1093, 1108,
     1109, 1095, 1109, 1109, 1096, 1098, 1109, 1109, 1097, 1109,
     1099, 1109, 1100, 1102, 1101, 1109, 1103, 1104, 1109, 1109,
     1109, 1105, 1106, 1107, 1109, 1109, 1109, 1108,  106,  106,
      106,  106,  106,  106,  106,  108, 1109,  108,  108,  159,
     1109, 1109,  159,  185, 1109,  185,  185,  236,  236,  236,

      244, 1109,  244,  244,  244,  244,  244,  290, 1109,  290,
      290,  290,   13, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109
    } ;

static const flex_int16_t yy_chk[2582] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,   34,    5,    5,
        5,    5,    5,   37,    5,  294,    5,    5,    5,    5,
        5,    5,   20,    5,   20,   20,   20,   20,    5,   22,
       29,    5,   22,  290,    5,   34,    5,    5,    5,    5,
        5,   37,    5,    5,    5,    5,    5,    5,    5,  159,
        5,   21,   21,   21,   21,    5,  106,   29,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,   10,
      103,   33,    9,   10,    9,   10,   18,   19,   17,    9,
       10,    9,   10,   11,   19,   16,   15,   11,   11,   13,
        0,    0,   35,   11,    0,   19,    9,   10,   33,    0,
        9,   10,    9,   10,   11,   19,    9,   10,    9,   10,

        0,   19,   26,   12,   43,   11,   11,   12,   12,   35,
       26,   11,   19,   12,   23,    0,   23,   23,   23,   23,
        0,   11,   44,   24,   12,   24,   24,   24,   24,   48,
       26,   43,   24,    0,    0,   12,   12,   26,   28,   36,
       25,   12,   25,   25,   25,   25,   27,   36,   31,   25,
       44,   12,   28,   49,   27,   39,   48,   27,   28,   31,
       24,   32,   31,   32,    0,   31,   28,   36,   50,   40,
       38,    0,   39,   40,   27,   36,   31,   25,   38,   28,
       52,   49,   27,   39,   27,   28,   31,   54,   32,   31,
       32,   41,   31,   42,   41,   50,   45,   40,   38,   39,

       51,   40,   53,   57,   41,   38,   41,   41,   52,   58,
       42,   45,   55,    0,   45,   54,   59,    0,   60,   41,
       61,   42,   41,   63,   45,   64,   62,   51,   65,   53,
       57,   41,   66,   41,   41,   67,   58,   42,   45,   62,
       55,   45,   66,   68,   59,   60,   69,   76,   61,   81,
       63,   70,   70,   64,   62,    0,   65,   72,    0,   73,
       66,   80,   75,   67,   72,   82,   62,   73,    0,   66,
       74,   68,   78,   69,   76,   72,   75,   81,   74,   70,
       70,   74,   75,   78,   84,   72,   78,   73,   80,   78,
       75,   72,   82,   79,   73,   79,   83,   86,   74,   85,

       78,   87,   72,   75,   83,   87,   74,   85,   74,   75,
       78,   90,   84,   78,   86,   88,   78,   91,   88,   89,
       79,    0,   79,   94,   83,   86,   95,   85,   88,   87,
       88,   88,   83,   87,   85,    0,   89,   95,   90,   95,
       93,   86,   96,   88,   92,   91,   88,   89,   93,  109,
       94,  121,   96,    0,   95,   88,    0,   88,   88,   92,
      110,    0,   92,   89,   95,    0,   95,   97,   93,  111,
       96,   97,   92,    0,  120,   93,  109,  122,  121,   96,
       98,   97,   98,   98,   98,   98,   92,  124,  110,   92,
      100,    0,  101,  100,  131,   97,  123,  111,  100,   97,

      101,  100,  120,    0,  101,  122,  101,  125,   97,   99,
        0,    0,    0,   99,   99,  124,   99,  134,  100,   99,
      101,  100,  131,  123,   99,    0,  100,  101,  100,    0,
       99,  101,  102,  101,  125,  102,  102,  112,  112,  112,
      112,   99,   99,  102,   99,  134,    0,   99,  128,  127,
      113,   99,  113,  113,  113,  113,  126,   99,  126,  127,
      102,  129,  130,  102,  102,  114,  114,  114,  114,  132,
      102,  117,  117,  117,  117,  128,  133,  127,  135,  136,
      139,  137,  141,  126,  137,  126,  127,  138,  129,  130,
      140,  138,  142,    0,  143,  144,  132,  145,  147,  148,

      146,  149,  150,  133,  151,  135,  136,  139,  152,  137,
      141,  153,  137,  154,  138,  155,  157,  140,  138,  146,
      142,  143,  144,  156,  145,  147,  158,  148,  146,  149,
      150,  160,  151,  161,  162,  163,  152,  164,  153,  165,
      166,  154,  167,  155,  157,  168,  146,  169,  170,  172,
      156,  171,  173,  158,  174,  176,  175,    0,  160,  178,
      161,  162,  163,  177,  164,  177,  179,  165,  166,  167,
      180,  182,  168,  183,  169,  175,  170,  172,  171,  173,
      181,  184,  174,  176,  175,  181,  178,  186,  187,  188,
      177,  189,  177,  179,  190,  181,  191,  180,  192,  182,

      183,  193,  175,  194,  195,  197,  195,  198,  181,  184,
      196,    0,  199,  181,  186,  200,  187,  188,  201,  189,
      196,  190,  181,  202,  191,  192,  203,    0,  204,  193,
      194,  195,  197,  195,  198,  205,  208,  206,  196,  199,
      206,    0,  207,  200,  209,  201,  207,  196,  210,  211,
      202,  212,  213,  214,  203,  204,  215,    0,  216,  217,
      218,  219,  205,  208,  220,  206,  221,  223,  206,  207,
      222,  209,  224,  207,  225,  215,  210,  211,  212,  213,
      214,  226,    0,  227,  215,  216,  228,  217,  218,  219,
      229,  230,  220,  228,  221,  223,  232,  222,  232,  231,

      224,  225,  215,  231,    0,  233,  234,  237,    0,  226,
      227,    0,    0,  228,  241,  237,  242,  229,  230,    0,
      228,    0,  243,  232,    0,  232,  247,  231,    0,  248,
      249,  231,  233,  234,  235,  237,  235,  235,  235,  235,
      236,  241,  237,  242,  236,  236,  238,  238,  239,  243,
      236,  239,  240,  251,  247,  238,  248,  250,  249,  239,
      240,  236,  240,  245,  245,  245,  245,  252,  253,  254,
        0,  255,  236,  236,  238,  238,  239,  258,  236,  239,
      240,  251,  238,  256,  250,  256,  239,  240,  236,  240,
      260,  261,  257,  262,  252,  253,  264,  254,  255,  257,

      266,    0,  267,  270,  275,  258,  271,  272,  273,  276,
      277,  256,  278,  256,  279,  274,  284,  260,  261,  257,
      280,  262,  280,  264,  274,  281,  257,  283,  266,  267,
      278,  270,  275,  271,  272,  273,  276,  277,  282,  285,
      278,  282,  279,  274,  284,  286,  287,  288,  280,  289,
      280,  274,  281,  292,  283,  293,  295,  278,  296,  297,
      299,  300,    0,  301,  302,  282,  285,  303,  282,  304,
      305,  306,  286,  287,  288,  307,  308,  289,  309,  310,
      292,  311,  293,  312,  295,  313,  296,  297,  299,  300,
      301,  302,  314,  315,  320,  303,  304,  305,  317,  306,

      318,  319,  307,  321,  308,  309,  310,  322,  311,  323,
      325,  312,  326,  313,  327,    0,  328,  329,  332,  314,
      330,  315,  320,  331,  333,  317,  335,  318,  319,  334,
      321,  334,    0,  335,  322,  336,  323,  338,  325,  326,
      339,  340,  327,  328,  342,  329,  332,  330,  344,  348,
      331,  333,  345,  335,  349,  350,  351,  334,  353,  334,
      335,  352,  356,  336,  338,  354,  355,  339,  357,  340,
      352,  342,  358,  362,  358,  367,  344,  348,  359,  345,
      356,  349,  350,  351,  360,  361,  353,  360,  363,  352,
      356,  364,  354,  355,  365,  366,  357,  352,  368,  369,

      358,  362,  358,  367,  370,  359,  371,  356,  372,  373,
      374,  360,  361,  375,  360,  363,  377,  378,  364,  379,
      380,  365,  366,  376,  382,  376,  368,  369,  383,  384,
      391,  370,  385,  376,  371,  372,  373,  386,  374,  389,
      390,  375,  392,  377,  393,  378,  379,  394,  380,  395,
      396,  376,  382,  376,  397,  398,  383,  384,  391,  385,
      376,  399,  401,  402,  386,  404,  389,  390,  405,  406,
      392,  393,  408,  409,  394,  410,  395,  396,  411,    0,
      412,  397,  413,  398,  414,    0,  415,  416,  419,  399,
      401,  402,  404,  420,  422,  423,  405,  406,  424,  408,

      409,  425,  427,  410,  428,  430,  411,  412,  431,  413,
      432,  436,  414,  415,  432,  416,  419,  434,  437,  433,
      420,  422,  423,  433,  435,  424,  439,  438,  435,  425,
      427,  438,  428,  430,  441,  431,  443,  444,  432,  436,
      446,  447,  432,  445,  434,  437,  433,  445,  448,  452,
      433,  450,  435,  439,  438,  451,  435,  453,  438,  454,
      456,  457,  441,  443,  444,  458,  465,  446,  459,  447,
      460,  445,  463,  464,  466,  445,  448,  452,  450,  467,
      468,  469,  451,  470,  453,  471,  472,  454,  456,  457,
      473,  475,  476,  458,  465,  459,  478,  460,  479,  463,

      464,  480,  466,  482,  483,  484,  467,  468,  469,  485,
      470,  486,  471,  487,  472,  488,    0,  489,  473,  475,
      476,  490,  493,  478,  494,  496,  479,  497,  498,  480,
      482,  483,  499,  484,  500,    0,  501,  485,  486,  502,
      487,  504,  505,  488,  489,  506,    0,  507,  509,  490,
      493,  494,  496,  506,  497,  498,  510,  506,  511,  499,
      512,  513,  500,  501,  514,  515,  518,  502,  504,  505,
      516,  517,  521,  506,  507,  522,  509,  523,    0,  524,
      506,  525,  529,  510,  506,  526,  511,  512,  513,  527,
      528,  514,  530,  515,  518,  532,  533,  516,  517,  534,

      521,  535,  522,  536,  537,  523,  524,  538,  540,  525,
      529,  539,  526,  541,  542,  544,  527,  528,  546,  530,
      547,  548,  550,  532,  533,  551,  534,  552,  535,  553,
      536,  537,  554,  556,  559,  538,  540,  557,  539,  558,
      541,  542,  560,  544,  561,  546,  562,  547,  548,  550,
      563,  565,  566,  551,  552,  567,  568,  553,  569,  554,
      570,  556,  559,  571,  557,  572,  558,  571,  574,  576,
      560,  561,  575,  562,  577,  578,  579,  563,  565,  580,
      566,  581,  567,  582,  568,  583,  569,  570,  586,    0,
      587,  571,  572,  588,  590,  571,  574,  576,  589,  575,

      591,  577,  578,  579,  592,  593,  594,  580,  581,  595,
      582,  597,  598,  583,  599,  600,  586,  587,  601,  602,
      603,  588,  590,  604,  605,  589,  606,  591,  607,  609,
      613,  592,  593,  610,  594,  612,  595,  614,  616,  597,
      598,  599,  600,  618,  619,  601,  602,  621,  603,  622,
      604,  623,  605,  606,  624,  607,  625,  609,  613,  626,
      610,  627,  612,  628,  614,  616,  629,    0,  630,  631,
      618,  619,  632,  635,  621,  636,  622,  637,  639,  623,
      640,  624,  642,  645,  625,  643,  626,  644,  646,  627,
      628,  647,  650,  654,  629,  630,  655,  631,  656,  632,

      635,  657,  636,  658,  637,  659,  639,  640,  661,  662,
      642,  645,  643,  663,  644,  666,  646,  667,  647,  650,
      668,  654,  669,  655,  670,  656,  671,  672,  680,  657,
      673,  658,  659,  675,  676,  661,  662,  678,  679,  681,
      682,  663,  683,  666,  684,  667,  685,  668,  686,  669,
      687,  688,  670,  689,  671,  672,  680,  673,  692,  693,
      675,  676,  694,  696,  678,  679,  681,  697,  682,  683,
      699,  702,  684,  685,  700,  701,  686,  687,  703,  688,
      689,  704,  709,  711,  712,  692,  693,  713,  715,  694,
      716,  696,  717,  718,  697,  719,  720,  721,  699,  702,

      722,  700,  701,  723,  724,  728,  703,  729,  704,  709,
      726,  711,  712,  731,  713,  715,  730,  716,    0,  735,
      717,  718,  719,  720,  732,  721,  734,  722,    0,  738,
      723,  724,  725,  728,  725,  729,  725,  726,  739,  741,
      725,  731,  742,  730,  743,  725,  725,  735,  746,  747,
      725,  732,  748,  734,  749,  725,  738,  750,  752,  753,
      725,  754,  725,  755,  725,  739,  741,  756,  725,  742,
      758,  743,  725,  725,  759,  746,  747,  725,  760,  748,
      761,  749,  725,  762,  750,  752,  763,  753,  754,  764,
      771,  755,  765,  766,  756,  767,  772,  758,    0,  769,

      774,  759,  773,  775,    0,  777,  760,  778,  761,    0,
      762,  781,  783,  763,    0,  785,  786,  764,  771,  765,
      766,  790,  767,  768,  772,  768,  769,  768,  774,  773,
      775,  768,  777,  791,  800,  778,  768,  768,  781,  794,
      783,  768,  785,  796,  786,  795,  768,  797,  795,  790,
      799,  768,  801,  768,  802,  768,  803,  798,  808,  768,
      804,  791,  800,  768,  768,  805,  794,  806,  768,  802,
      796,  798,  795,  768,  797,  795,  809,  799,  811,  801,
      814,  818,  802,  820,  803,  798,  808,  804,  821,  822,
      824,  827,  805,  826,  806,  831,  802,  832,  798,  835,

      837,  836,  838,  809,  836,  811,  840,  814,  818,  841,
      820,  842,  844,    0,  845,  821,  822,  843,  824,  827,
      826,  839,  849,  831,  846,  832,  835,  837,  836,  838,
      847,  836,  843,  840,  850,  839,  852,  841,  842,  854,
      844,  845,  855,    0,  856,  843,  857,  858,  871,  839,
      849,  846,  859,  860,  861,  862,  865,  847,  866,  843,
      864,  850,  839,  852,  867,  863,  868,  854,  863,  864,
      855,  856,  869,  872,  857,  858,  871,  873,  880,  859,
      860,  861,  862,  865,  881,  866,  883,  884,  864,  885,
      886,  867,  863,  868,  887,  863,  864,  888,  889,  869,

      890,  872,  891,  892,  873,  880,  892,  894,  893,    0,
      895,  881,  896,  897,  883,  884,  885,  893,  886,  898,
      900,  901,  887,  902,  888,  889,  904,  890,  905,  891,
      892,  906,  907,  892,  894,  909,  893,  895,  908,  896,
      897,  910,  911,  912,  893,  913,  898,  908,  900,  901,
      902,  914,  916,  904,  917,  905,  920,  921,  929,  906,
      907,  924,  927,  909,  928,  930,  908,  931,  910,  932,
      911,  912,  933,  913,  908,  937,  931,  934,  914,  916,
      935,  936,  917,  920,  939,  921,  929,  940,  924,  927,
      943,  928,  944,  930,  947,  931,  951,  932,  952,  933,

      953,  954,  937,  931,  955,  934,  956,  969,  935,  936,
      957,  939,  958,  961,  962,  940,  963,  943,  963,  971,
      944,  947,  964,  951,  964,  973,  952,  953,  965,  954,
      968,  955,  970,  972,  956,  969,  974,  957,  975,  958,
      961,  962,  978,  979,  963,  982,  963,  971,  985,  980,
      964,  980,  964,  973,  981,  965,  981,  968,  986,  970,
      972,  988,  990,  974,  991,  975,  992,    0,  993,  978,
      979,  994,  982,  995,  996,  985,  997,  980, 1000,  980,
     1001, 1003,  981, 1005,  981,  986, 1006, 1007,  988,  990,
     1008, 1009,  991, 1010,  992,  993, 1011, 1012,  994, 1013,

      995,  996, 1014,  997, 1015, 1000, 1017, 1001, 1003, 1018,
     1005, 1019, 1020, 1021, 1006, 1007, 1022, 1008, 1009, 1023,
     1010, 1024, 1025, 1011, 1012, 1026, 1028, 1013, 1029, 1030,
     1014, 1015, 1031, 1017, 1032, 1033, 1018, 1034, 1019, 1020,
     1021, 1035, 1036, 1022, 1037,    0, 1038, 1023, 1039, 1024,
     1025, 1040, 1026, 1028, 1041, 1029, 1030, 1042, 1047, 1031,
     1043, 1032, 1033, 1044, 1045, 1034, 1046, 1048, 1035, 1036,
     1049, 1050, 1037, 1038, 1051, 1039, 1052,    0, 1053, 1040,
     1054, 1041, 1055, 1056, 1057, 1042, 1047, 1043, 1058, 1059,
     1044, 1045, 1060, 1046, 1048, 1061, 1062, 1049, 1063, 1050,

     1064, 1051, 1065, 1066, 1052, 1053, 1067, 1054, 1068, 1055,
     1056, 1057, 1069, 1070,    0, 1071, 1058, 1059, 1072, 1074,
     1060, 1073, 1061, 1075, 1062, 1063, 1076, 1078, 1064, 1065,
     1066, 1077, 1085, 1067, 1086, 1088, 1068, 1087, 1095, 1097,
     1069, 1070, 1071, 1099, 1101, 1104, 1072, 1074, 1073, 1106,
        0, 1075,    0,    0, 1076, 1078,    0,    0, 1077,    0,
     1085,    0, 1086, 1088, 1087,    0, 1095, 1097,    0,    0,
        0, 1099, 1101, 1104,    0,    0,    0, 1106, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1111,    0, 1111, 1111, 1112,
        0,    0, 1112, 1113,    0, 1113, 1113, 1114, 1114, 1114,

     1115,    0, 1115, 1115, 1115, 1115, 1115, 1116,    0, 1116,
     1116, 1116, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "SLParserLex.l"
#line 2 "SLParserLex.l"

// flex --nounistd -o SLParserLex.cpp SLParserLex.lpp

#define ECHO 

#include <map>
#include <vector>
#include <string>
#include "SLParserTypes.h"

int yyerror (const char *s);

namespace shaderlab
{
	struct SLFloat;
	struct SLVector4;
	struct SLShader;
	struct SLProperties;
	struct SLShaderState;
	struct SLSubShader;
	struct SLNormalPass;
	struct SLPassBase;
	struct SLGrabPass;
	struct SLProgram;
	struct SLSubProgram;
	struct SLPropTexture;
}

using namespace shaderlab;

#include "SLParserYacc.hpp"

void InitLex(const char *data, size_t dataSize);
void FreeLex();
int  GetYYLineno();
bool ParseAndEatLine(std::string &outstring);

static int   yyinput (void);
static char* CreateBracketString(const char *src);
static char* CreateNormalString(const char *src);

#define YY_NO_UNPUT

#line 1425 "SLParserLex.cpp"

#line 1427 "SLParserLex.cpp"

#define INITIAL 0
#define STATE_FOG 1
#define STATE_STENIL 2
#define STATE_CHANNELS 3
#define STATE_ZTEST 4
#define STATE_COLMASK 5

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 57 "SLParserLex.l"


#line 1644 "SLParserLex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1110 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1109 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "SLParserLex.l"
{ 	return TOKEN_SHADER; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "SLParserLex.l"
{ 	return TOKEN_TAGS; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "SLParserLex.l"
{ 	return TOKEN_LOD; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "SLParserLex.l"
{ 	return TOKEN_CATEGORY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "SLParserLex.l"
{ 	return TOKEN_SUBSHADER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "SLParserLex.l"
{ 	return TOKEN_PROPERTIES; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "SLParserLex.l"
{ 	return TOKEN_RANGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "SLParserLex.l"
{	return TOKEN_GPU_PROGRAM_ID; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "SLParserLex.l"
{
							yylval.enumval = kTexDim2D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "SLParserLex.l"
{
							yylval.enumval = kTexDim3D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "SLParserLex.l"
{
							yylval.enumval = kTexDimCUBE;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 79 "SLParserLex.l"
{
							yylval.enumval = kTexDim2D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-ShaderSemantics.html
							BEGIN(STATE_CHANNELS);
							return TOKEN_BIND;
						}
	YY_BREAK

case 14:
YY_RULE_SETUP
#line 90 "SLParserLex.l"
{
							BEGIN(INITIAL);
							yylval.strval = CreateNormalString(yytext);
							return VAL_ID;
						}
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 97 "SLParserLex.l"
{	
							// After bind because of Bind "color" Color
							return TOKEN_COLOR; 
						}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 102 "SLParserLex.l"
{
							return TOKEN_SETTEXTURE;
						}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "SLParserLex.l"
{ 	return TOKEN_FLOAT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "SLParserLex.l"
{ 	return TOKEN_VECTOR; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 107 "SLParserLex.l"
{ 	return TOKEN_FLOAT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 108 "SLParserLex.l"
{ 	return TOKEN_MATRIX; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "SLParserLex.l"
{ 	return TOKEN_KEYWORDS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "SLParserLex.l"
{ 	return TOKEN_CONSTBUFFER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 111 "SLParserLex.l"
{ 	return TOKEN_BINDCB; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 112 "SLParserLex.l"
{ 	return TOKEN_SETBUFFER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 113 "SLParserLex.l"
{ 	return TOKEN_TRUE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 114 "SLParserLex.l"
{	return TOKEN_FALSE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 115 "SLParserLex.l"
{	return TOKEN_OFFSET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 116 "SLParserLex.l"
{	return TOKEN_NAME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "SLParserLex.l"
{ 	return TOKEN_ZWRITE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-CullAndDepth.html
							BEGIN(STATE_ZTEST); 
							return TOKEN_ZTEST; 
						}
	YY_BREAK

case 31:
YY_RULE_SETUP
#line 124 "SLParserLex.l"
{
							BEGIN(INITIAL);
							yylval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 129 "SLParserLex.l"
{
							BEGIN(INITIAL);
							yylval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncGreater;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncLEqual;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncGEqual;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "SLParserLex.l"
{ 
							yylval.enumval = kFuncEqual;
							BEGIN(INITIAL); 
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = kFuncAlways;	
							return VAL_COMPARE_MODE;
						}
	YY_BREAK

case 39:
YY_RULE_SETUP
#line 166 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Fog.html
							BEGIN(STATE_FOG); 
							return TOKEN_FOG; 
						}
	YY_BREAK

case 40:
YY_RULE_SETUP
#line 172 "SLParserLex.l"
{ 	return TOKEN_COLOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "SLParserLex.l"
{ 	return TOKEN_MODE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "SLParserLex.l"
{ 	return TOKEN_DENSITY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "SLParserLex.l"
{ 	return TOKEN_RANGE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "SLParserLex.l"
{
							yylval.enumval = kFogDisabled; 
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 180 "SLParserLex.l"
{
							yylval.enumval = kFogLinear;
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 184 "SLParserLex.l"
{	
							yylval.enumval = kFogExp;
							return VAL_FOG_MODE; 
						}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 188 "SLParserLex.l"
{
							yylval.enumval = kFogExp2;
							return VAL_FOG_MODE; 
						}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 192 "SLParserLex.l"
{
							yylval.enumval = kFogUnknown;
							return VAL_FOG_MODE;
						}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 196 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							return '}';
						}
	YY_BREAK

case 50:
YY_RULE_SETUP
#line 202 "SLParserLex.l"
{	// https://docs.unity3d.com/Manual/SL-Stencil.html '
							BEGIN(STATE_STENIL);
							return TOKEN_STENCIL;
						}
	YY_BREAK

case 51:
YY_RULE_SETUP
#line 207 "SLParserLex.l"
{ return TOKEN_REF; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 208 "SLParserLex.l"
{ return TOKEN_READ_MASK; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 209 "SLParserLex.l"
{ return TOKEN_WRITE_MASK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 210 "SLParserLex.l"
{ return TOKEN_COMP; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 211 "SLParserLex.l"
{ return TOKEN_OP_PASS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 212 "SLParserLex.l"
{ return TOKEN_OP_FAIL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 213 "SLParserLex.l"
{ return TOKEN_OP_ZFAIL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 215 "SLParserLex.l"
{
							yylval.enumval = kFuncGreater;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 219 "SLParserLex.l"
{
							yylval.enumval = kFuncGEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 223 "SLParserLex.l"
{
							yylval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 227 "SLParserLex.l"
{
							yylval.enumval = kFuncLEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 231 "SLParserLex.l"
{
							yylval.enumval = kFuncEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 235 "SLParserLex.l"
{ 
							yylval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 239 "SLParserLex.l"
{ 
							yylval.enumval = kFuncAlways;		
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 243 "SLParserLex.l"
{
							yylval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "SLParserLex.l"
{
							yylval.enumval = kStencilOpKeep;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 252 "SLParserLex.l"
{ 
							yylval.enumval = kStencilOpZero;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 256 "SLParserLex.l"
{ 
							yylval.enumval = kStencilOpReplace;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 260 "SLParserLex.l"
{
							yylval.enumval = kStencilOpIncrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 264 "SLParserLex.l"
{
							yylval.enumval = kStencilOpDecrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 268 "SLParserLex.l"
{
							yylval.enumval = kStencilOpInvert;	
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 272 "SLParserLex.l"
{
							yylval.enumval = kStencilOpIncrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "SLParserLex.l"
{
							yylval.enumval = kStencilOpDecrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 280 "SLParserLex.l"
{ 	return TOKEN_COMP_FRONT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 281 "SLParserLex.l"
{ 	return TOKEN_COMP_BACK; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 282 "SLParserLex.l"
{ 	return TOKEN_OP_PASS_FRONT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 283 "SLParserLex.l"
{ 	return TOKEN_OP_FAIL_FRONT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "SLParserLex.l"
{ 	return TOKEN_OP_ZFAIL_FRONT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "SLParserLex.l"
{ 	return TOKEN_OP_PASS_BACK; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "SLParserLex.l"
{ 	return TOKEN_OP_FAIL_BACK; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "SLParserLex.l"
{ 	return TOKEN_OP_ZFAIL_BACK; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 288 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return '}';
						}
	YY_BREAK

case 83:
YY_RULE_SETUP
#line 294 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Pass.html '
							BEGIN(STATE_COLMASK); 
							yylval.enumval = 0;
							return TOKEN_COLORMASK;
						}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 300 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							yylval.enumval = 0; 
							char *temp = yytext;
							while (*temp) { 
								switch (*temp++) {
									case 'r': 
									case 'R':
										yylval.enumval |= 8;
										break;
									case 'g': 
									case 'G':
										yylval.enumval |= 4;
										break;
									case 'b': 
									case 'B':
										yylval.enumval |= 2;
										break;
									case 'a':
									case 'A':
										yylval.enumval |= 1;
										break;
									case 0:
										yylval.enumval = 0;
										break;
								} 
							}
							return VAL_RGBA_MASK;
						}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 330 "SLParserLex.l"
{ 	return TOKEN_ALPHA_TO_MASK; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 331 "SLParserLex.l"
{ 	return TOKEN_CULL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 332 "SLParserLex.l"
{ 
							yylval.enumval = kCullFront; 
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 336 "SLParserLex.l"
{
							yylval.enumval = kCullBack; 
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 340 "SLParserLex.l"
{
							yylval.enumval = kCullFrontAndBack;
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 344 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Blend.html
							return TOKEN_BLEND;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 348 "SLParserLex.l"
{
							yylval.enumval = kBlendZero; 
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 352 "SLParserLex.l"
{
							yylval.enumval = kBlendOne;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 356 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 360 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 364 "SLParserLex.l"
{
							yylval.enumval = kBlendDstColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 368 "SLParserLex.l"
{
							yylval.enumval = kBlendDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 372 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 376 "SLParserLex.l"
{	yylval.enumval = kBlendOneMinusSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 379 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusDstColor; 
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 383 "SLParserLex.l"
{
							yylval.enumval = kBlendOneMinusDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 387 "SLParserLex.l"
{
							yylval.enumval = kBlendSrcAlphaSaturate;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 391 "SLParserLex.l"
{
							// https://docs.unity3d.com/Manual/SL-Blend.html
							return TOKEN_BLEND_OP;
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 395 "SLParserLex.l"
{
							yylval.enumval = kBlendOpAdd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 399 "SLParserLex.l"
{
							yylval.enumval = kBlendOpSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 403 "SLParserLex.l"
{
							yylval.enumval = kBlendOpRevSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 407 "SLParserLex.l"
{
							yylval.enumval = kBlendOpMin;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 411 "SLParserLex.l"
{
							yylval.enumval = kBlendOpMax;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 415 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalClear;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 419 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalSet;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 423 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalCopy;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 427 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalCopyInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 431 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNoop;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 435 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalInvert;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 439 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAnd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 443 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNand;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 447 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOr;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 451 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalNor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 455 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalXor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 459 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalEquiv;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 463 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAndReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 467 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalAndInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 471 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOrReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 475 "SLParserLex.l"
{
							yylval.enumval = kBlendOpLogicalOrInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 480 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_PASS;
						}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 484 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_GRABPASS;
						}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 488 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_USEPASS;
						}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 492 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_PROGRAM;
						}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 497 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_SUBPROGRAM;
						}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 502 "SLParserLex.l"
{ 	return TOKEN_FALLBACK; }
	YY_BREAK

case 130:
YY_RULE_SETUP
#line 506 "SLParserLex.l"
{
									yylval.strval = CreateBracketString(yytext);
									return VAL_BRACKET_ID;
								}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 510 "SLParserLex.l"
{
									yylval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 514 "SLParserLex.l"
{
									yylval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 518 "SLParserLex.l"
{
									std::string numstr;
									if (ParseAndEatLine(numstr)) {
										// TODO:get line number do something
									} else {
										yyerror("Lex parse #LINE end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 527 "SLParserLex.l"
{
									std::string warningstr;
									if (ParseAndEatLine(warningstr)) {
										// TODO:add warning
									} else {
										yyerror("Lex parse #warning end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 536 "SLParserLex.l"
{
									std::string errorstr;
									if (ParseAndEatLine(errorstr)) {
										// TODO:add error
									} else {
										yyerror("Lex parse #warning end witch EOF.");
										yyterminate();
									}
								}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 545 "SLParserLex.l"
{
									yylval.strval = CreateNormalString(yytext);
									return VAL_ID;
								}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 549 "SLParserLex.l"
{
									yylval.strval = CreateBracketString(yytext);
									const char *temp = yylval.strval;
									while (*temp) {
										char c = *temp;
										if (c == '\n') {
											yylineno++;
										}
										temp++;
									}
									return VAL_STRING;
								}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 561 "SLParserLex.l"
{
									BEGIN(INITIAL);
									return *yytext;
								}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 565 "SLParserLex.l"
{  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 566 "SLParserLex.l"

	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 567 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 568 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 569 "SLParserLex.l"
{ 	yylineno++; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 570 "SLParserLex.l"
{	yylineno++; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 571 "SLParserLex.l"
{
									int c;
									int depth = 1;
									while (true) {
										while ((c = yyinput()) != '*' && c != '/' && c != EOF && c != '\0') {
											if (c == '\r') {
												yylineno++;
												c = yyinput();
												if (c == '\r') {
													++yylineno;
												}
											} else if (c == '\n') {
												yylineno++;
											}
										}
										if (c == EOF || c == '\0') {
											yyerror("Lex parse block comment end with EOF.");
											yyterminate();
											break;
										}
										if (c == '/') {
											c = yyinput();
											if (c == '*') {
												depth++;
											}
										}
										if (c == '*') {
											while ((c = yyinput()) == '*') {
												;
											}
											if (c == '/') {
												depth--;
												if (depth == 0) {
													break;
												}
											}
										}
									}
									
								}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 611 "SLParserLex.l"
{ 	return *yytext; }
	YY_BREAK

case 147:
YY_RULE_SETUP
#line 614 "SLParserLex.l"
ECHO;
	YY_BREAK
#line 2830 "SLParserLex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STATE_FOG):
case YY_STATE_EOF(STATE_STENIL):
case YY_STATE_EOF(STATE_CHANNELS):
case YY_STATE_EOF(STATE_ZTEST):
case YY_STATE_EOF(STATE_COLMASK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1110 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1110 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1109);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 614 "SLParserLex.l"


YY_BUFFER_STATE b;

void InitLex(const char *data, size_t dataSize) {
	b = yy_scan_bytes(data, dataSize);
	yy_switch_to_buffer(b);
	BEGIN(INITIAL);
}

void FreeLex() {
	yy_delete_buffer(YY_CURRENT_BUFFER);
}

int GetYYLineno() {
	return yylineno;
}

static char *CreateBracketString(const char *src) {
	int size = strlen(src);
	char *buffer = new char[size - 1];
	memcpy(buffer, src + 1, size - 2);
	buffer[size - 2] = '\0';
	return buffer;
}

static char *CreateNormalString(const char *src) {
	int size = strlen(src) + 1;
	char *buffer = new char[size];
	memcpy(buffer, src, size);
	buffer[size - 1] = '\0';
	return buffer;
}

inline bool IsEndChar(int c) {
	if (c == EOF || c == '\0' || c == '\r' || c == '\n') {
		return true;
	} else {
		return false;
	}
}

bool ParseAndEatLine(std::string &outstring)
{
	int c = 0;
	while ((c = yyinput()) && (c==' ' || c=='\t')) {
        ;
    }
	if (IsEndChar(c)) {
		return false;
	}
	std::string temp;
	temp += c;
	while ((c = yyinput()) && !IsEndChar(c)) {
        temp += c;
    }
	if (c == EOF || c == '\0') {
		return false;
	}
	outstring = temp;
	return true;
}
