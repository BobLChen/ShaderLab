#line 2 "SLParserLex.cpp"

#line 4 "SLParserLex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[618] =
    {   0,
      123,  123,  123,  123,  109,  109,  123,  123,   63,   63,
      132,  130,  123,  128,  127,  130,  120,  130,  130,  130,
      119,  119,  119,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  130,  122,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   61,  115,
      109,  114,  113,  115,  115,  120,  120,  120,  120,  120,
       63,   63,   63,   63,   63,  123,  126,  125,    0,  121,
      120,    0,  119,  118,  129,  124,  119,    8,    9,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,   15,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,    0,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  109,  112,  111,  110,    0,  120,  120,
      120,  120,  120,  120,  120,   63,   63,   63,   63,   63,
      124,  119,   82,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   14,    3,  120,
       86,   85,  120,   16,   71,  120,  120,  120,  120,  120,
      120,  120,   83,  120,  120,  120,  120,  120,  120,  120,

        0,  117,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   30,  120,
      120,  120,  120,  110,    0,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   67,  120,  120,  120,  120,   10,
       65,  120,  120,  120,  120,  120,  120,  120,  120,  120,
       18,  120,  120,  103,  120,  120,  120,  120,  120,  120,
      120,  120,    2,   15,  120,  120,   70,  120,  120,  120,
       33,  120,  120,   35,  120,  120,  120,  120,   45,  120,
       39,  120,  120,   34,  120,  120,  120,   46,  120,    0,
        0,    0,  120,  120,  120,  120,  120,   22,  120,  120,

      120,   69,  120,  120,   11,  120,  120,  120,   16,   12,
       66,  120,  120,  120,  120,  120,  120,    7,  120,  120,
      120,  120,  120,  120,  120,  120,   20,  120,  120,  120,
      120,  120,  120,   41,  120,  120,  120,  120,  120,  120,
      120,  120,   44,  120,  120,  120,  120,  120,  120,   36,
      108,    0,    0,  120,   26,  120,  120,  120,   21,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   17,  120,  120,   84,    1,  120,  120,  120,
      120,  120,   13,   19,   43,  120,  120,  120,  120,  120,
      120,   38,  120,  120,  120,   50,   40,  120,  120,  120,

      120,  120,  120,  120,  120,    0,    0,   28,   25,  120,
       24,  120,  120,   81,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   29,  120,
      104,  120,  120,   49,  120,  120,  120,   37,   48,  120,
      120,  120,  120,  120,   47,  120,  120,  120,  108,  108,
       23,  120,  120,    4,  120,  120,   75,   74,  116,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   73,   72,  120,   54,  120,   52,   59,  120,
       51,   42,   58,  120,   31,  120,  120,  120,   27,  120,
      107,   62,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,   95,  120,  120,  120,  120,  120,  120,    5,
       53,   56,   55,   32,   60,  120,  120,  120,  120,  120,
       93,  120,  120,  120,  120,  120,  120,   96,  120,  120,
       88,   97,  120,  120,    6,  120,   57,   64,  120,  105,
      106,  120,  120,  120,   89,  120,  120,   94,   91,  120,
      120,  120,  120,  120,   68,  120,  120,   87,  120,   98,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,   92,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  101,   79,   78,   77,   76,   80,  120,
       99,  120,  102,  100,  120,   90,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,    6,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,    1,   41,    1,    6,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,    6,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,    1,   67,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    1,    4,    1,
        5,    5,    5,    5,    6,    6,    3,    3,    3,    3,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        7,    6,    6,    3,    3,    3,    3,    6,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    6,    3,    3,
        3,    3,    3,    3,    3,    3,    1
    } ;

static yyconst flex_int16_t yy_base[626] =
    {   0,
        0,    0,   67,    0,  133,  136,  126,  129,  173,  175,
      401, 1408,  375,  360,  359,  322,    0,  148,  152,  160,
      186,  196,  216,  124,  197,  198,  126,  220,  168,  186,
      209,  209,  227,  228,  227,  229,  233,  234,  242,  223,
      239,  257,    0, 1408,  255,  258,  269,  259,  276,  277,
      270,  279,  280,  282,  287,  285,  274,  292, 1408, 1408,
      317,  262,  221,  193,  279,  296,  279,  315,  323,  328,
      341,  373,  350,  341,  381,  200, 1408, 1408,  196, 1408,
        0,  368,  396,  400, 1408,    0,  423, 1408, 1408,  304,
      301,  327,  326,  325,  331,  338,  403,  343,  372,  389,

      392,  390,  397,  397,  420,  395,  412,  414,  422,  424,
      413,  420,  423,  416,  437,  436,  435,  442,  439,  427,
      443,  446,  433,  452,  442,  151,  438,  450,  465,  449,
      461,  456,  473,  477,  474,  465,  461,  466,  470,  512,
      481,  475,  492,  185, 1408, 1408,    0,  490,  489,  481,
      486,  498,  498,  501,  504,  537,  545,  522,  552,  553,
        0,  570,    0,  516,  534,  535,  553,  542,  547,  560,
      561,  575,  569,  576,  568,  583,  584,    0,    0,  587,
        0,    0,  592,  580,  588,  583,  587,  599,  591,  606,
      610,  599,  597,  598,  612,  603,  600,  606,  608,  621,

      132, 1408,  630,  617,  617,  634,  630,  628,  648,  633,
      646,  637,  634,  637,  651,  655,  645,  660,    0,  654,
      647,  653,  660,    0,  677,  669,  670,  652,  672,  654,
      668,  683,  684,  694,    0,  698,  696,  690,  688,    0,
        0,  695,  694,  707,  705,  695,  698,  703,  704,  717,
        0,  716,  714,    0,  719,  720,  706,  722,  717,  720,
      735,  731,    0,    0,  739,  728,    0,  724,  730,  732,
      756,  741,  746,  758,  767,  752,  755,  755,    0,  773,
        0,  758,  762,  786,  767,  779,  776,    0,  771,  786,
      783,  785,  773,  792,  809,  792,  811,    0,  796,  798,

      797,  803,  804,  815,  813,  811,  816,  827,    0,    0,
      828,  814,  815,  832,  815,  822,  819,    0,  840,  829,
      832,  837,  841,  850,  839,  847,    0,  860,  848,  866,
      851,  869,  854,    0,  871,  859,  868,  875,  880,  865,
      864,  874,    0,  866,  886,  871,  888,  887,  884,  898,
     1408,  883,  884,  887,    0,  900,  913,  908,    0,  900,
      907,  907,  907,  908,  925,  922,  919,  931,  922,  922,
      923,  928,    0,  920,  922,    0,    0,  934,  929,  933,
      946,  936,    0,    0,    0,  952,  942,  939,  958,  962,
      958,    0,  956,  955,  974,    0,    0,  975,  975,  965,

      962,  979,  986,  987,  972,  979,  980,    0,    0,  976,
        0,  993,  983,    0,  972,  996,  980, 1003,  991,  999,
     1006, 1005, 1006, 1040, 1001, 1019, 1028, 1013,    0, 1027,
        0, 1023, 1021,    0, 1023, 1032, 1031,    0,    0, 1032,
     1037, 1040, 1038, 1042,    0, 1044, 1061, 1052, 1408, 1408,
        0, 1056, 1072,    0, 1070, 1073,    0,    0,    0, 1082,
     1069, 1070, 1075, 1081, 1080, 1084, 1098, 1081, 1096, 1088,
     1099, 1099, 1087,    0, 1089,    0, 1088,    0,    0, 1089,
        0,    0,    0, 1097,    0, 1108, 1110, 1108,    0, 1109,
        0,    0, 1135, 1136, 1137, 1136, 1136, 1127, 1126, 1128,

     1137, 1138, 1142, 1134, 1139, 1139, 1141, 1142, 1160,    0,
        0,    0,    0,    0,    0, 1143, 1156, 1167, 1159, 1160,
     1183, 1173, 1151, 1172, 1185, 1187, 1179,    0, 1182, 1191,
        0,    0, 1184, 1201,    0, 1186,    0,    0, 1196,    0,
        0, 1194, 1204, 1193, 1202, 1191, 1196,    0,    0, 1193,
     1194, 1223, 1242, 1200,    0, 1204, 1207,    0, 1216,    0,
     1216, 1239, 1241, 1237, 1235, 1239, 1240, 1240, 1253, 1254,
     1239,    0, 1244, 1246, 1249, 1254, 1251, 1256, 1267, 1252,
     1257, 1273, 1260, 1262, 1274, 1269, 1281, 1283, 1279, 1280,
     1282, 1285, 1298, 1299, 1307, 1294, 1311, 1296, 1309, 1310,

     1312, 1299, 1315,    0,    0,    0,    0,    0,    0, 1316,
        0, 1316,    0,    0, 1318,    0, 1408, 1363, 1370, 1375,
     1379, 1382, 1388, 1393, 1400
    } ;

static yyconst flex_int16_t yy_def[626] =
    {   0,
      617,    1,  617,    3,  618,  618,    1,    1,    1,    1,
      617,  617,  617,  617,  617,  619,  620,  617,  617,  617,
      617,  617,  617,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  621,  617,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  617,  617,
      617,  617,  617,  617,  617,  620,  620,  620,  620,  620,
      622,  620,   72,   72,   72,  617,  617,  617,  619,  617,
      620,  617,  617,  617,  617,  623,  617,  617,  617,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  624,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  617,  617,  617,  625,  617,  620,  620,
      620,  620,  620,  620,  620,  622,  617,   72,   72,   72,
      623,  617,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      624,  617,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  625,  617,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  617,
      617,  617,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      617,  617,  617,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  617,  617,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  617,  617,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,    0,  617,  617,  617,
      617,  617,  617,  617,  617
    } ;

static yyconst flex_int16_t yy_nxt[1476] =
    {   0,
       12,   13,   14,   15,   16,   17,   12,   18,   19,   20,
       21,   21,   22,   23,   24,   25,   26,   27,   17,   28,
       29,   30,   31,   17,   32,   33,   34,   35,   36,   17,
       37,   38,   39,   40,   41,   17,   17,   17,   42,   43,
       12,   24,   25,   26,   27,   17,   28,   29,   30,   31,
       17,   32,   33,   34,   35,   36,   17,   37,   38,   39,
       40,   41,   17,   17,   17,   42,   44,   12,   13,   14,
       15,   16,   17,   12,   18,   19,   20,   21,   21,   21,
       21,   45,   17,   46,   47,   48,   49,   50,   17,   51,
       52,   53,   17,   54,   17,   55,   17,   56,   17,   17,

       17,   17,   57,   17,   17,   58,   43,   12,   45,   17,
       46,   47,   48,   49,   50,   17,   51,   52,   53,   17,
       54,   17,   55,   17,   56,   17,   17,   17,   17,   57,
       17,   17,   58,   59,   61,   62,   63,   61,   62,   63,
       66,   90,   64,   66,   67,   64,   68,   67,   91,   68,
       69,   65,   70,   69,   65,   70,   82,   98,   83,   83,
       83,   83,   84,   84,   84,   84,   85,   66,   90,   86,
       66,   67,  202,   68,   67,   91,   68,   69,   65,   70,
       69,   65,   70,   71,   98,   71,  144,   72,   73,   72,
       73,  202,  102,   74,   87,   74,   83,   83,   83,   83,

       80,   76,  147,   75,   87,   75,   83,   83,   83,   83,
      103,   92,   94,   88,   72,   73,   72,   73,   95,  102,
       74,   93,   74,  146,   87,   96,   83,   83,   83,   83,
       75,   97,   75,   89,   99,  104,  105,  103,   92,   94,
       88,  106,  108,  111,  100,   95,  109,  113,   93,  107,
      101,  114,   96,  110,  121,  115,  119,  122,   97,  112,
       89,   99,  104,  105,  116,  145,  117,  118,  106,  108,
      111,  100,  120,  109,  113,  123,  107,  101,  114,  127,
      110,  121,  115,  119,  122,  128,  112,  129,  130,  124,
      131,  116,  125,  117,  118,  132,  134,  135,  136,  120,

      137,  139,  123,  140,  141,  148,  127,  133,  150,  138,
      142,  143,  128,   90,  129,  130,  124,  131,  144,  125,
      149,  163,  132,  134,  135,  136,   80,  137,  139,  164,
      140,  141,  148,  151,  133,  150,  138,  142,  143,  102,
       90,  153,  108,  165,  166,  152,  154,  149,  163,   87,
      105,  156,   83,   83,   83,  155,  164,  167,   81,  168,
      151,   78,  169,   77,  159,  102,  102,   81,  153,  108,
      165,  166,  152,  154,   93,  172,   76,  105,   84,   84,
       84,   84,  155,  158,  167,   81,  168,  158,  158,  169,
       90,  159,  102,  158,   81,  160,  173,   91,   81,  114,

      617,   93,  172,  158,   87,   81,   83,   83,   83,   83,
       84,   84,   84,   84,  158,  158,  174,   90,  170,  175,
      158,  176,  160,  173,   91,   81,  114,  171,  177,  178,
      158,  181,   81,  162,  162,  162,  162,  179,  182,  183,
      180,  184,  185,  174,  186,  170,  175,  187,  176,  188,
      189,  190,  191,  192,  171,  177,  178,  193,  181,  194,
      195,  196,  197,  198,  179,  182,  183,  180,  184,  185,
      199,  186,  200,  203,  187,  204,  188,  189,  190,  191,
      192,  205,  206,  207,  193,  208,  194,  195,  196,  197,
      198,  209,  212,  210,  213,  215,  214,  199,  216,  200,

      203,  217,  204,  221,  617,  222,  223,  225,  205,  206,
      207,  211,  208,  617,  227,  228,  229,  164,  209,  212,
      210,  213,  215,  214,  226,  216,  218,  230,  217,  231,
      221,  219,  222,  223,  225,  232,  233,  234,  211,   81,
      220,  227,  228,  229,  164,   87,   81,  156,   83,   83,
       83,  226,  617,  218,  230,  157,  231,  235,  219,  157,
      157,  236,  232,  233,  234,  157,   81,  220,  165,   81,
       81,  237,  238,   81,  239,  157,   81,   81,  240,  188,
      162,  162,  162,  162,  235,  241,  157,  157,  236,  242,
      246,  243,  157,  244,  247,  165,   81,   81,  237,  238,

      245,  239,  157,   81,   81,  240,  188,  248,  249,  250,
      251,  252,  241,  253,  254,  255,  242,  246,  243,  256,
      244,  247,  257,  258,  259,  261,  260,  245,  262,  263,
      264,  265,  266,  267,  248,  249,  250,  251,  252,  268,
      253,  254,  255,  269,  270,  271,  256,  272,  273,  257,
      258,  259,  261,  260,  274,  262,  263,  264,  265,  266,
      267,  275,  276,  277,  278,  279,  268,  280,  281,  282,
      269,  270,  271,  283,  272,  273,  284,  285,  286,  287,
      288,  274,  289,  293,  294,  295,  296,  297,  275,  276,
      277,  278,  279,  290,  280,  281,  282,  291,  292,  298,

      283,  299,  300,  284,  285,  286,  287,  288,  301,  289,
      293,  294,  295,  296,  297,  302,  303,  304,  305,  306,
      290,  307,  308,  309,  291,  292,  298,  310,  299,  300,
      311,  312,  313,  314,  315,  301,  316,  317,  318,  319,
      320,  321,  302,  303,  304,  305,  306,  322,  307,  308,
      309,  323,  324,  325,  310,  326,  327,  311,  312,  313,
      314,  315,  328,  316,  317,  318,  319,  320,  321,  329,
      334,  330,  332,  335,  322,  331,  333,  336,  323,  324,
      325,  337,  326,  327,  338,  341,  339,  342,  343,  328,
      340,  344,  347,  348,  349,  350,  329,  334,  330,  332,

      335,  345,  331,  333,  336,  346,  351,  352,  337,  353,
      354,  338,  341,  339,  342,  343,  355,  340,  344,  347,
      348,  349,  350,  356,  357,  358,  359,  360,  345,  361,
      362,  363,  346,  351,  352,  364,  353,  354,  365,  366,
      367,  368,  369,  355,  370,  371,  372,  373,  374,  375,
      356,  357,  358,  359,  360,  376,  361,  362,  363,  377,
      378,  379,  364,  380,  381,  365,  366,  367,  368,  369,
      382,  370,  371,  372,  373,  374,  375,  383,  384,  385,
      386,  387,  376,  388,  389,  390,  377,  378,  379,  391,
      380,  381,  392,  393,  394,  395,  396,  382,  397,  398,

      399,  400,  401,  402,  383,  384,  385,  386,  387,  403,
      388,  389,  390,  404,  406,  407,  391,  405,  408,  392,
      393,  394,  395,  396,  409,  397,  398,  399,  400,  401,
      402,  410,  411,  412,  413,  414,  403,  415,  416,  417,
      404,  406,  407,  418,  405,  408,  419,  420,  421,  422,
      423,  409,  424,  425,  426,  427,  428,  429,  410,  411,
      412,  413,  414,  430,  415,  416,  417,  431,  432,  433,
      418,  434,  435,  419,  420,  421,  422,  423,  436,  424,
      425,  426,  427,  428,  429,  437,  438,  439,  440,  441,
      430,  442,  443,  444,  431,  432,  433,  445,  434,  435,

      446,  447,  448,  449,  450,  436,  451,  452,  453,  454,
      455,  456,  437,  438,  439,  440,  441,  457,  442,  443,
      444,  458,  459,  460,  445,  461,  462,  446,  447,  448,
      449,  450,  471,  451,  452,  453,  454,  455,  456,  617,
      617,  472,  473,  474,  457,  475,  476,  477,  458,  459,
      460,  478,  461,  462,  463,  479,  464,  480,  465,  471,
      481,  482,  466,  483,  484,  485,  467,  468,  472,  473,
      474,  469,  475,  476,  477,  486,  470,  487,  478,  488,
      489,  463,  479,  464,  480,  465,  490,  481,  482,  466,
      483,  484,  485,  467,  468,  491,  492,  493,  469,  494,

      495,  496,  486,  470,  487,  497,  488,  489,  498,  499,
      500,  503,  501,  490,  504,  505,  506,  508,  509,  510,
      511,  512,  491,  492,  493,  502,  494,  495,  496,  513,
      507,  514,  497,  515,  516,  498,  499,  500,  503,  501,
      517,  504,  505,  506,  508,  509,  510,  511,  512,  518,
      519,  520,  502,  521,  522,  523,  513,  507,  514,  524,
      515,  516,  525,  526,  529,  527,  531,  517,  528,  532,
      533,  534,  530,  535,  536,  537,  518,  519,  520,  538,
      521,  522,  523,  539,  540,  541,  524,  544,  545,  525,
      526,  529,  527,  531,  546,  528,  532,  533,  534,  530,

      535,  536,  537,  547,  548,  542,  538,  549,  550,  551,
      539,  540,  541,  543,  544,  545,  552,  553,  554,  555,
      556,  546,  557,  558,  559,  560,  561,  562,  563,  617,
      547,  548,  542,  568,  549,  550,  551,  564,  569,  565,
      543,  570,  571,  552,  553,  554,  555,  556,  572,  557,
      558,  559,  560,  561,  562,  563,  566,  573,  567,  574,
      568,  575,  576,  577,  564,  569,  565,  578,  570,  571,
      579,  580,  581,  582,  583,  572,  584,  585,  586,  587,
      588,  589,  590,  566,  573,  567,  574,  591,  575,  576,
      577,  592,  593,  594,  578,  595,  596,  579,  580,  581,

      582,  583,  597,  584,  585,  586,  587,  588,  589,  590,
      598,  599,  600,  601,  591,  602,  603,  604,  592,  593,
      594,  605,  595,  596,  606,  607,  608,  609,  610,  597,
      611,  612,  613,  614,  615,  616,  617,  598,  599,  600,
      601,  617,  602,  603,  604,  617,  617,  617,  605,  617,
      617,  606,  607,  608,  609,  610,  617,  611,  612,  613,
      614,  615,  616,   60,   60,   60,   60,   60,   60,   60,
       79,   79,   79,   79,   79,   79,   79,   81,  617,   81,
       81,  126,  617,  617,  126,  157,  157,  157,  161,  617,
      161,  161,  161,  161,  161,  201,  617,  201,  201,  201,

      224,  617,  224,  224,  224,  224,  224,   11,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617
    } ;

static yyconst flex_int16_t yy_chk[1476] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    6,    6,    6,
        7,   24,    5,    8,    7,    6,    7,    8,   24,    8,
        7,    5,    7,    8,    6,    8,   18,   27,   18,   18,
       18,   18,   19,   19,   19,   19,   20,    7,   24,   20,
        8,    7,  201,    7,    8,   24,    8,    7,    5,    7,
        8,    6,    8,    9,   27,   10,  144,    9,    9,   10,
       10,  126,   29,    9,   21,   10,   21,   21,   21,   21,

       79,   76,   64,    9,   22,   10,   22,   22,   22,   22,
       30,   25,   26,   22,    9,    9,   10,   10,   26,   29,
        9,   25,   10,   63,   23,   26,   23,   23,   23,   23,
        9,   26,   10,   23,   28,   31,   32,   30,   25,   26,
       22,   33,   34,   36,   28,   26,   35,   37,   25,   33,
       28,   37,   26,   35,   40,   38,   39,   41,   26,   36,
       23,   28,   31,   32,   38,   62,   38,   38,   33,   34,
       36,   28,   39,   35,   37,   42,   33,   28,   37,   45,
       35,   40,   38,   39,   41,   46,   36,   47,   48,   42,
       49,   38,   42,   38,   38,   50,   51,   52,   53,   39,

       54,   55,   42,   56,   57,   65,   45,   50,   67,   54,
       58,   58,   46,   66,   47,   48,   42,   49,   61,   42,
       66,   90,   50,   51,   52,   53,   16,   54,   55,   91,
       56,   57,   65,   68,   50,   67,   54,   58,   58,   68,
       66,   69,   70,   92,   93,   68,   70,   66,   90,   71,
       69,   71,   71,   71,   71,   70,   91,   94,   74,   95,
       68,   15,   96,   14,   73,   74,   68,   73,   69,   70,
       92,   93,   68,   70,   73,   98,   13,   69,   82,   82,
       82,   82,   70,   72,   94,   74,   95,   72,   72,   96,
       72,   73,   74,   72,   73,   75,   99,   72,   75,   75,

       11,   73,   98,   72,   83,   75,   83,   83,   83,   83,
       84,   84,   84,   84,   72,   72,  100,   72,   97,  101,
       72,  102,   75,   99,   72,   75,   75,   97,  103,  104,
       72,  106,   75,   87,   87,   87,   87,  105,  107,  108,
      105,  109,  110,  100,  111,   97,  101,  112,  102,  113,
      114,  115,  116,  117,   97,  103,  104,  118,  106,  119,
      120,  121,  122,  123,  105,  107,  108,  105,  109,  110,
      124,  111,  125,  127,  112,  128,  113,  114,  115,  116,
      117,  129,  130,  131,  118,  132,  119,  120,  121,  122,
      123,  133,  135,  134,  136,  137,  136,  124,  138,  125,

      127,  139,  128,  141,    0,  142,  143,  148,  129,  130,
      131,  134,  132,    0,  150,  151,  152,  149,  133,  135,
      134,  136,  137,  136,  149,  138,  140,  153,  139,  153,
      141,  140,  142,  143,  148,  154,  155,  164,  134,  158,
      140,  150,  151,  152,  149,  156,  158,  156,  156,  156,
      156,  149,    0,  140,  153,  157,  153,  165,  140,  157,
      157,  166,  154,  155,  164,  157,  158,  140,  159,  159,
      160,  167,  168,  158,  169,  157,  159,  160,  170,  160,
      162,  162,  162,  162,  165,  171,  157,  157,  166,  172,
      174,  172,  157,  173,  175,  159,  159,  160,  167,  168,

      173,  169,  157,  159,  160,  170,  160,  176,  177,  180,
      183,  184,  171,  185,  186,  187,  172,  174,  172,  188,
      173,  175,  189,  190,  191,  192,  191,  173,  193,  194,
      195,  196,  197,  198,  176,  177,  180,  183,  184,  199,
      185,  186,  187,  200,  203,  204,  188,  205,  206,  189,
      190,  191,  192,  191,  207,  193,  194,  195,  196,  197,
      198,  208,  209,  210,  211,  212,  199,  213,  214,  215,
      200,  203,  204,  216,  205,  206,  217,  218,  220,  221,
      222,  207,  223,  226,  227,  228,  229,  230,  208,  209,
      210,  211,  212,  225,  213,  214,  215,  225,  225,  231,

      216,  232,  233,  217,  218,  220,  221,  222,  234,  223,
      226,  227,  228,  229,  230,  236,  237,  238,  239,  242,
      225,  243,  244,  245,  225,  225,  231,  246,  232,  233,
      247,  248,  249,  250,  252,  234,  253,  255,  256,  257,
      258,  259,  236,  237,  238,  239,  242,  260,  243,  244,
      245,  261,  262,  265,  246,  266,  268,  247,  248,  249,
      250,  252,  269,  253,  255,  256,  257,  258,  259,  270,
      273,  271,  272,  274,  260,  271,  272,  274,  261,  262,
      265,  275,  266,  268,  276,  278,  277,  280,  282,  269,
      277,  283,  285,  286,  287,  289,  270,  273,  271,  272,

      274,  284,  271,  272,  274,  284,  290,  291,  275,  292,
      293,  276,  278,  277,  280,  282,  294,  277,  283,  285,
      286,  287,  289,  295,  296,  297,  299,  300,  284,  301,
      302,  303,  284,  290,  291,  304,  292,  293,  305,  306,
      307,  308,  311,  294,  312,  313,  314,  315,  316,  317,
      295,  296,  297,  299,  300,  319,  301,  302,  303,  320,
      321,  322,  304,  323,  324,  305,  306,  307,  308,  311,
      325,  312,  313,  314,  315,  316,  317,  326,  328,  329,
      330,  331,  319,  332,  333,  335,  320,  321,  322,  336,
      323,  324,  337,  338,  339,  340,  341,  325,  342,  344,

      345,  346,  347,  348,  326,  328,  329,  330,  331,  349,
      332,  333,  335,  350,  352,  353,  336,  350,  354,  337,
      338,  339,  340,  341,  356,  342,  344,  345,  346,  347,
      348,  357,  358,  360,  361,  362,  349,  363,  364,  365,
      350,  352,  353,  366,  350,  354,  367,  368,  369,  370,
      371,  356,  372,  374,  375,  378,  379,  380,  357,  358,
      360,  361,  362,  381,  363,  364,  365,  382,  386,  387,
      366,  388,  389,  367,  368,  369,  370,  371,  390,  372,
      374,  375,  378,  379,  380,  391,  393,  394,  395,  398,
      381,  399,  400,  401,  382,  386,  387,  402,  388,  389,

      403,  404,  405,  406,  407,  390,  410,  412,  413,  415,
      416,  417,  391,  393,  394,  395,  398,  418,  399,  400,
      401,  419,  420,  421,  402,  422,  423,  403,  404,  405,
      406,  407,  425,  410,  412,  413,  415,  416,  417,    0,
        0,  426,  427,  428,  418,  430,  432,  433,  419,  420,
      421,  435,  422,  423,  424,  436,  424,  437,  424,  425,
      440,  441,  424,  442,  443,  444,  424,  424,  426,  427,
      428,  424,  430,  432,  433,  446,  424,  447,  435,  448,
      452,  424,  436,  424,  437,  424,  453,  440,  441,  424,
      442,  443,  444,  424,  424,  455,  456,  460,  424,  461,

      462,  463,  446,  424,  447,  464,  448,  452,  464,  465,
      466,  468,  467,  453,  469,  470,  471,  472,  473,  475,
      477,  480,  455,  456,  460,  467,  461,  462,  463,  484,
      471,  486,  464,  487,  488,  464,  465,  466,  468,  467,
      490,  469,  470,  471,  472,  473,  475,  477,  480,  493,
      494,  495,  467,  496,  497,  498,  484,  471,  486,  499,
      487,  488,  500,  501,  503,  502,  504,  490,  502,  505,
      506,  507,  503,  508,  509,  516,  493,  494,  495,  517,
      496,  497,  498,  518,  519,  520,  499,  522,  523,  500,
      501,  503,  502,  504,  524,  502,  505,  506,  507,  503,

      508,  509,  516,  525,  526,  521,  517,  527,  529,  530,
      518,  519,  520,  521,  522,  523,  533,  534,  536,  539,
      542,  524,  543,  544,  545,  546,  547,  550,  551,    0,
      525,  526,  521,  554,  527,  529,  530,  552,  556,  552,
      521,  557,  559,  533,  534,  536,  539,  542,  561,  543,
      544,  545,  546,  547,  550,  551,  553,  562,  553,  563,
      554,  564,  565,  566,  552,  556,  552,  567,  557,  559,
      568,  569,  570,  571,  573,  561,  574,  575,  576,  577,
      578,  579,  580,  553,  562,  553,  563,  581,  564,  565,
      566,  582,  583,  584,  567,  585,  586,  568,  569,  570,

      571,  573,  587,  574,  575,  576,  577,  578,  579,  580,
      588,  589,  590,  591,  581,  592,  593,  594,  582,  583,
      584,  595,  585,  586,  596,  597,  598,  599,  600,  587,
      601,  602,  603,  610,  612,  615,    0,  588,  589,  590,
      591,    0,  592,  593,  594,    0,    0,    0,  595,    0,
        0,  596,  597,  598,  599,  600,    0,  601,  602,  603,
      610,  612,  615,  618,  618,  618,  618,  618,  618,  618,
      619,  619,  619,  619,  619,  619,  619,  620,    0,  620,
      620,  621,    0,    0,  621,  622,  622,  622,  623,    0,
      623,  623,  623,  623,  623,  624,    0,  624,  624,  624,

      625,    0,  625,  625,  625,  625,  625,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "SLParserLex.l"
#line 2 "SLParserLex.l"

// flex --nounistd -o SLParserLex.cpp SLParserLex.l

#define ECHO

#include <stdio.h>
#include <map>
#include <vector>
#include <string>

#include "Common/Common.h"
#include "SLParserTypes.h"

int32 shaderlaberror(const char *s);

namespace shaderlab
{
	struct SLFloat;
	struct SLVector4;
	struct SLShader;
	struct SLProperties;
	struct SLShaderState;
	struct SLSubShader;
	struct SLNormalPass;
	struct SLPassBase;
	struct SLProgram;
	struct SLPropTexture;
}

using namespace shaderlab;

#define yylex shaderlablex
#include "SLParserYacc.hpp"

static int32 yyinput();

bool ParseAndEatLine(std::string &outstring);

static char* CreateBracketString(const char* src);

static char* CreateNormalString(const char* src);

inline int32 GetYYLineno() 
{
	return yylineno;
}

static std::string g_LexTempString;

#define YY_NO_UNPUT



#line 1038 "SLParserLex.cpp"

#define INITIAL 0
#define STATE_STENIL 1
#define STATE_PROGRAM 2
#define STATE_ZTEST 3
#define STATE_COLMASK 4

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 65 "SLParserLex.l"


#line 1219 "SLParserLex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 618 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 617 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 67 "SLParserLex.l"
{ 	
							return TOKEN_SHADER; 
						}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "SLParserLex.l"
{ 	
							return TOKEN_TAGS; 
						}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 75 "SLParserLex.l"
{ 	
							return TOKEN_LOD; 
						}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "SLParserLex.l"
{ 	
							return TOKEN_CATEGORY; 
						}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "SLParserLex.l"
{ 	
							return TOKEN_SUBSHADER; 
						}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "SLParserLex.l"
{ 	
							return TOKEN_PROPERTIES; 
						}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "SLParserLex.l"
{
							return TOKEN_RANGE; 
						}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 95 "SLParserLex.l"
{
							shaderlablval.enumval = kTexDim2D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "SLParserLex.l"
{
							shaderlablval.enumval = kTexDim3D;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "SLParserLex.l"
{
							shaderlablval.enumval = kTexDimCUBE;
							return VAL_TEX_DIM;
						}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "SLParserLex.l"
{	
							return TOKEN_COLOR; 
						}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 114 "SLParserLex.l"
{
							return TOKEN_FLOAT; 
						}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 118 "SLParserLex.l"
{ 	
							return TOKEN_VECTOR; 
						}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "SLParserLex.l"
{ 	
							return TOKEN_FLOAT; 
						}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "SLParserLex.l"
{ 	
							return TOKEN_TRUE; 
						}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "SLParserLex.l"
{	
							return TOKEN_FALSE; 
						}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "SLParserLex.l"
{	
							return TOKEN_OFFSET; 
						}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "SLParserLex.l"
{	
							return TOKEN_NAME; 
						}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 142 "SLParserLex.l"
{ 	
							return TOKEN_ZWRITE; 
						}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 146 "SLParserLex.l"
{
							BEGIN(STATE_ZTEST); 
							return TOKEN_ZTEST; 
						}
	YY_BREAK

case 21:
YY_RULE_SETUP
#line 152 "SLParserLex.l"
{
							BEGIN(INITIAL);
							shaderlablval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 157 "SLParserLex.l"
{
							BEGIN(INITIAL);
							shaderlablval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 162 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncGreater;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 167 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncLEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 172 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncGEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 177 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 182 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 187 "SLParserLex.l"
{
							BEGIN(INITIAL); 
							shaderlablval.enumval = kFuncAlways;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK

case 29:
YY_RULE_SETUP
#line 194 "SLParserLex.l"
{	
							BEGIN(STATE_STENIL);
							return TOKEN_STENCIL;
						}
	YY_BREAK

case 30:
YY_RULE_SETUP
#line 200 "SLParserLex.l"
{
							return TOKEN_REF; 
						}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 203 "SLParserLex.l"
{
							return TOKEN_READ_MASK; 
						}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 206 "SLParserLex.l"
{
							return TOKEN_WRITE_MASK; 
						}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 209 "SLParserLex.l"
{
							return TOKEN_COMP; 
						}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 212 "SLParserLex.l"
{
							return TOKEN_OP_PASS; 
						}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 215 "SLParserLex.l"
{
							return TOKEN_OP_FAIL; 
						}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 218 "SLParserLex.l"
{
							return TOKEN_OP_ZFAIL; 
						}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 221 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncGreater;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 225 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncGEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 229 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncLess;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 233 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncLEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 237 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 241 "SLParserLex.l"
{ 
							shaderlablval.enumval = kFuncNotEqual;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "SLParserLex.l"
{ 
							shaderlablval.enumval = kFuncAlways;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 249 "SLParserLex.l"
{
							shaderlablval.enumval = kFuncNever;
							return VAL_COMPARE_MODE;
						}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 253 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpKeep;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 257 "SLParserLex.l"
{ 
							shaderlablval.enumval = kStencilOpZero;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 261 "SLParserLex.l"
{ 
							shaderlablval.enumval = kStencilOpReplace;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpIncrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 269 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpDecrSat;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 273 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpInvert;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 277 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpIncrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 281 "SLParserLex.l"
{
							shaderlablval.enumval = kStencilOpDecrWrap;
							return VAL_STENCIL_ACTION;
						}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 285 "SLParserLex.l"
{
							return TOKEN_COMP_FRONT;
						}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 288 "SLParserLex.l"
{
							return TOKEN_COMP_BACK; 
						}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 291 "SLParserLex.l"
{
							return TOKEN_OP_PASS_FRONT; 
						}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 294 "SLParserLex.l"
{
							return TOKEN_OP_FAIL_FRONT; 
						}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 297 "SLParserLex.l"
{
							return TOKEN_OP_ZFAIL_FRONT; 
						}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 300 "SLParserLex.l"
{
							return TOKEN_OP_PASS_BACK; 
						}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 303 "SLParserLex.l"
{
							return TOKEN_OP_FAIL_BACK; 
						}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 306 "SLParserLex.l"
{
							return TOKEN_OP_ZFAIL_BACK; 
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 309 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return '}';
						}
	YY_BREAK

case 62:
YY_RULE_SETUP
#line 315 "SLParserLex.l"
{
							BEGIN(STATE_COLMASK); 
							shaderlablval.enumval = 0;
							return TOKEN_COLORMASK;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 321 "SLParserLex.l"
{
							BEGIN(INITIAL);
							shaderlablval.enumval = 0;
							char* temp = yytext;
							while (*temp) { 
								switch (*temp++) {
									case 'r': 
									case 'R':
										shaderlablval.enumval |= 8;
										break;
									case 'g': 
									case 'G':
										shaderlablval.enumval |= 4;
										break;
									case 'b': 
									case 'B':
										shaderlablval.enumval |= 2;
										break;
									case 'a':
									case 'A':
										shaderlablval.enumval |= 1;
										break;
									case 0:
										shaderlablval.enumval = 0;
										break;
								} 
							}
							return VAL_RGBA_MASK;
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 351 "SLParserLex.l"
{ 	
							return TOKEN_ALPHA_TO_MASK; 
						}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 355 "SLParserLex.l"
{ 	
							return TOKEN_CULL; 
						}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 359 "SLParserLex.l"
{ 
							shaderlablval.enumval = kCullFront;
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 364 "SLParserLex.l"
{
							shaderlablval.enumval = kCullBack;
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 369 "SLParserLex.l"
{
							shaderlablval.enumval = kCullFrontAndBack;
							return VAL_TRIANGLE_FACE;
						}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 374 "SLParserLex.l"
{
							return TOKEN_BLEND;
						}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 378 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendZero;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 383 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOne;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 388 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 393 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 398 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendDstColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 403 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 408 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOneMinusSrcColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 413 "SLParserLex.l"
{	
							shaderlablval.enumval = kBlendOneMinusSrcAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 418 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOneMinusDstColor;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 423 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOneMinusDstAlpha;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 428 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendSrcAlphaSaturate;
							return VAL_BLEND_FACTOR;
						}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 433 "SLParserLex.l"
{
							return TOKEN_BLEND_OP;
						}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 437 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpAdd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 442 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 447 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpRevSub;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 452 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpMin;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 457 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpMax;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 462 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalClear;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 467 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalSet;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 472 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalCopy;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 477 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalCopyInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 482 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalNoop;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 487 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalInvert;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 492 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalAnd;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 497 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalNand;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 502 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalOr;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 507 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalNor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 512 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalXor;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 517 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalEquiv;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 522 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalAndReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 527 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalAndInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 532 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalOrReverse;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 537 "SLParserLex.l"
{
							shaderlablval.enumval = kBlendOpLogicalOrInverted;
							return VAL_BLEND_OP_MODE;
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 542 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_PASS;
						}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 547 "SLParserLex.l"
{
							BEGIN(INITIAL);
							return TOKEN_USEPASS;
						}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 552 "SLParserLex.l"
{
							BEGIN(STATE_PROGRAM);
							g_LexTempString.clear();
							shaderlablval.number = yylineno;
							return VAL_GLSLPROGRAM;
						}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 559 "SLParserLex.l"
{
							BEGIN(STATE_PROGRAM);
							g_LexTempString.clear();
							shaderlablval.number = yylineno;
							return VAL_HLSLPROGRAM;
						}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 566 "SLParserLex.l"
{
							BEGIN(STATE_PROGRAM);
							g_LexTempString.clear();
							shaderlablval.number = yylineno;
							return VAL_CGPROGRAM;
						}						
	YY_BREAK

case 108:
YY_RULE_SETUP
#line 575 "SLParserLex.l"
{
							BEGIN(INITIAL);
							shaderlablval.strval = g_LexTempString.c_str();
							return VAL_PROGRAM_SOURCE;
						}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 581 "SLParserLex.l"
{
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
 						}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 590 "SLParserLex.l"
{
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
						}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 599 "SLParserLex.l"
{ 	
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
							yylineno++; 
						}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 609 "SLParserLex.l"
{ 	
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
							yylineno++; 
						}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 619 "SLParserLex.l"
{ 	
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
							yylineno++; 
						}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 629 "SLParserLex.l"
{	
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
							yylineno++; 
						}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 639 "SLParserLex.l"
{
							char* temp = yytext;
							while (*temp)
							{
								g_LexTempString.push_back(*temp);
								temp++;
							}
						}
	YY_BREAK

case 116:
YY_RULE_SETUP
#line 650 "SLParserLex.l"
{ 	
							return TOKEN_FALLBACK; 
						}
	YY_BREAK

case 117:
YY_RULE_SETUP
#line 656 "SLParserLex.l"
{
									shaderlablval.strval = CreateBracketString(yytext);
									return VAL_BRACKET_ID;
								}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 661 "SLParserLex.l"
{
									shaderlablval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 666 "SLParserLex.l"
{
									shaderlablval.number = atof(yytext);
									return VAL_NUMBER;
								}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 671 "SLParserLex.l"
{
									shaderlablval.strval = CreateNormalString(yytext);
									return VAL_ID;
								}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 676 "SLParserLex.l"
{
									shaderlablval.strval = CreateBracketString(yytext);
									const char *temp = shaderlablval.strval;
									while (*temp) 
									{
										char c = *temp;
										if (c == '\n') 
										{
											yylineno++;
										}
										temp++;
									}
									return VAL_STRING;
								}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 691 "SLParserLex.l"
{
									BEGIN(INITIAL);
									return *yytext;
								}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 696 "SLParserLex.l"
{

 								}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 700 "SLParserLex.l"
{

								}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 704 "SLParserLex.l"
{ 	
									yylineno++; 
								}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 708 "SLParserLex.l"
{ 	
									yylineno++; 
								}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 712 "SLParserLex.l"
{ 	
									yylineno++; 
								}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 716 "SLParserLex.l"
{	
									yylineno++; 
								}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 720 "SLParserLex.l"
{
									int32 c;
									int32 depth = 1;
									while (true) 
									{
										while ((c = yyinput()) != '*' && c != '/' && c != EOF && c != '\0') 
										{
											if (c == '\r') 
											{
												yylineno++;
												c = yyinput();
												if (c == '\r') 
												{
													++yylineno;
												}
											} 
											else if (c == '\n') 
											{
												yylineno++;
											}
										}
										if (c == EOF || c == '\0') 
										{
											shaderlaberror("Lex parse block comment end with EOF.");
											yyterminate();
											break;
										}
										if (c == '/') 
										{
											c = yyinput();
											if (c == '*') 
											{
												depth++;
											}
										}
										if (c == '*') 
										{
											while ((c = yyinput()) == '*') 
											{
												;
											}
											if (c == '/') 
											{
												depth--;
												if (depth == 0) 
												{
													break;
												}
											}
										}
									}
								}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 773 "SLParserLex.l"
{ 	
									return *yytext; 
								}
	YY_BREAK

case 131:
YY_RULE_SETUP
#line 779 "SLParserLex.l"
ECHO;
	YY_BREAK
#line 2446 "SLParserLex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STATE_STENIL):
case YY_STATE_EOF(STATE_PROGRAM):
case YY_STATE_EOF(STATE_ZTEST):
case YY_STATE_EOF(STATE_COLMASK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 618 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 618 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 617);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 779 "SLParserLex.l"



inline bool IsEndChar(int32 c) 
{
	if (c == EOF || c == '\0' || c == '\r' || c == '\n') 
	{
		return true;
	} 
	else {
		return false;
	}
}

void InitLex(const char *data, int32 dataSize) 
{
	g_LexTempString.reserve(64 * 1024);
	YY_BUFFER_STATE b = yy_scan_bytes(data,dataSize);
	yy_switch_to_buffer(b);
	BEGIN(INITIAL);
}

void FreeLex() 
{
	g_LexTempString.clear();
	yy_delete_buffer(YY_CURRENT_BUFFER);
}

bool ParseAndEatLine(std::string &outstring)
{
	int32 c = 0;
	while ((c = yyinput()) && (c==' ' || c=='\t')) 
	{
        ;
    }
	if (IsEndChar(c)) 
	{
		return false;
	}
	std::string temp;
	temp += c;
	while ((c = yyinput()) && !IsEndChar(c)) 
	{
        temp += c;
    }
	if (c == EOF || c == '\0') 
	{
		return false;
	}
	outstring = temp;
	return true;
}

static char* CreateBracketString(const char *src) 
{
	int32 size = strlen(src);
	char *buffer = new char[size - 1];
	memcpy(buffer, src + 1, size - 2);
	buffer[size - 2] = '\0';
	return buffer;
}

static char* CreateNormalString(const char *src) 
{
	int32 size = strlen(src) + 1;
	char *buffer = new char[size];
	memcpy(buffer, src, size);
	buffer[size - 1] = '\0';
	return buffer;
}
