{
    "fallbackName": "",
    "shaderName": "Test/ConstantBuffer",
    "subShaders": [
        {
            "lod": 0,
            "passes": [
                {
                    "errorMsg": "",
                    "programs": [
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nstruct LightState\n{\n    vec3 position;\n    vec3 direction;\n    vec4 color;\n    vec4 falloff;\n    mat4 view;\n    mat4 projection;\n};\n\nlayout(binding = 0, std140) uniform type_SceneConstantBuffer\n{\n    mat4 model;\n    mat4 view;\n    mat4 projection;\n    vec4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n} SceneConstantBuffer;\n\nlayout(location = 0) in vec3 in_var_POSITION;\nlayout(location = 1) in vec3 in_var_NORMAL;\nlayout(location = 2) in vec2 in_var_TEXCOORD0;\nlayout(location = 3) in vec3 in_var_TANGENT;\nlayout(location = 0) out vec4 out_var_POSITION;\nlayout(location = 1) out vec2 out_var_TEXCOORD0;\nlayout(location = 2) out vec3 out_var_NORMAL;\nlayout(location = 3) out vec3 out_var_TANGENT;\n\nvoid main()\n{\n    vec3 _48 = in_var_NORMAL;\n    _48.z = in_var_NORMAL.z * (-1.0);\n    vec4 _51 = SceneConstantBuffer.model * vec4(in_var_POSITION, 1.0);\n    gl_Position = SceneConstantBuffer.projection * (SceneConstantBuffer.view * _51);\n    out_var_POSITION = _51;\n    out_var_TEXCOORD0 = in_var_TEXCOORD0;\n    out_var_NORMAL = _48;\n    out_var_TANGENT = in_var_TANGENT;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 320 es\n\nstruct LightState\n{\n    vec3 position;\n    vec3 direction;\n    vec4 color;\n    vec4 falloff;\n    mat4 view;\n    mat4 projection;\n};\n\nlayout(binding = 0, std140) uniform type_SceneConstantBuffer\n{\n    mat4 model;\n    mat4 view;\n    mat4 projection;\n    vec4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n} SceneConstantBuffer;\n\nlayout(location = 0) in vec3 in_var_POSITION;\nlayout(location = 1) in vec3 in_var_NORMAL;\nlayout(location = 2) in vec2 in_var_TEXCOORD0;\nlayout(location = 3) in vec3 in_var_TANGENT;\nlayout(location = 0) out vec4 out_var_POSITION;\nlayout(location = 1) out vec2 out_var_TEXCOORD0;\nlayout(location = 2) out vec3 out_var_NORMAL;\nlayout(location = 3) out vec3 out_var_TANGENT;\n\nvoid main()\n{\n    vec3 _48 = in_var_NORMAL;\n    _48.z = in_var_NORMAL.z * (-1.0);\n    vec4 _51 = SceneConstantBuffer.model * vec4(in_var_POSITION, 1.0);\n    gl_Position = SceneConstantBuffer.projection * (SceneConstantBuffer.view * _51);\n    out_var_POSITION = _51;\n    out_var_TEXCOORD0 = in_var_TEXCOORD0;\n    out_var_NORMAL = _48;\n    out_var_TANGENT = in_var_TANGENT;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct LightState\n{\n    float3 position;\n    float3 direction;\n    float4 color;\n    float4 falloff;\n    float4x4 view;\n    float4x4 projection;\n};\n\nstruct type_SceneConstantBuffer\n{\n    float4x4 model;\n    float4x4 view;\n    float4x4 projection;\n    float4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n};\n\nstruct vert_out\n{\n    float4 out_var_POSITION [[user(locn0)]];\n    float2 out_var_TEXCOORD0 [[user(locn1)]];\n    float3 out_var_NORMAL [[user(locn2)]];\n    float3 out_var_TANGENT [[user(locn3)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 in_var_POSITION [[attribute(0)]];\n    float3 in_var_NORMAL [[attribute(1)]];\n    float2 in_var_TEXCOORD0 [[attribute(2)]];\n    float3 in_var_TANGENT [[attribute(3)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant type_SceneConstantBuffer& SceneConstantBuffer [[buffer(0)]])\n{\n    vert_out out = {};\n    float3 _48 = in.in_var_NORMAL;\n    _48.z = in.in_var_NORMAL.z * (-1.0);\n    float4 _51 = SceneConstantBuffer.model * float4(in.in_var_POSITION, 1.0);\n    out.gl_Position = SceneConstantBuffer.projection * (SceneConstantBuffer.view * _51);\n    out.out_var_POSITION = _51;\n    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD0;\n    out.out_var_NORMAL = _48;\n    out.out_var_TANGENT = in.in_var_TANGENT;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct LightState\n{\n    float3 position;\n    float3 direction;\n    float4 color;\n    float4 falloff;\n    float4x4 view;\n    float4x4 projection;\n};\n\nstruct type_SceneConstantBuffer\n{\n    float4x4 model;\n    float4x4 view;\n    float4x4 projection;\n    float4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n};\n\nstruct vert_out\n{\n    float4 out_var_POSITION [[user(locn0)]];\n    float2 out_var_TEXCOORD0 [[user(locn1)]];\n    float3 out_var_NORMAL [[user(locn2)]];\n    float3 out_var_TANGENT [[user(locn3)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 in_var_POSITION [[attribute(0)]];\n    float3 in_var_NORMAL [[attribute(1)]];\n    float2 in_var_TEXCOORD0 [[attribute(2)]];\n    float3 in_var_TANGENT [[attribute(3)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant type_SceneConstantBuffer& SceneConstantBuffer [[buffer(0)]])\n{\n    vert_out out = {};\n    float3 _48 = in.in_var_NORMAL;\n    _48.z = in.in_var_NORMAL.z * (-1.0);\n    float4 _51 = SceneConstantBuffer.model * float4(in.in_var_POSITION, 1.0);\n    out.gl_Position = SceneConstantBuffer.projection * (SceneConstantBuffer.view * _51);\n    out.out_var_POSITION = _51;\n    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD0;\n    out.out_var_NORMAL = _48;\n    out.out_var_TANGENT = in.in_var_TANGENT;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AOgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ADgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAKAAAAAwADAAUAAABYAgAABQAJAAsAAAB0eXBlLlNjZW5lQ29uc3RhbnRCdWZmZXIAAAAABgAFAAsAAAAAAAAAbW9kZWwAAAAGAAUACwAAAAEAAAB2aWV3AAAAAAYABgALAAAAAgAAAHByb2plY3Rpb24AAAYABwALAAAAAwAAAGFtYmllbnRDb2xvcgAAAAAGAAcACwAAAAQAAABzYW1wbGVTaGFkb3dNYXAABgAFAAsAAAAFAAAAbGlnaHRzAAAFAAUADAAAAExpZ2h0U3RhdGUAAAYABgAMAAAAAAAAAHBvc2l0aW9uAAAAAAYABgAMAAAAAQAAAGRpcmVjdGlvbgAAAAYABQAMAAAAAgAAAGNvbG9yAAAABgAFAAwAAAADAAAAZmFsbG9mZgAGAAUADAAAAAQAAAB2aWV3AAAAAAYABgAMAAAABQAAAHByb2plY3Rpb24AAAUABwANAAAAU2NlbmVDb25zdGFudEJ1ZmZlcgAFAAYAAgAAAGluLnZhci5QT1NJVElPTgAFAAYAAwAAAGluLnZhci5OT1JNQUwAAAAFAAcABAAAAGluLnZhci5URVhDT09SRDAAAAAABQAGAAUAAABpbi52YXIuVEFOR0VOVAAABQAHAAcAAABvdXQudmFyLlBPU0lUSU9OAAAAAAUABwAIAAAAb3V0LnZhci5URVhDT09SRDAAAAAFAAYACQAAAG91dC52YXIuTk9STUFMAAAFAAYACgAAAG91dC52YXIuVEFOR0VOVAAFAAQAAQAAAHZlcnQAAAAARwAEAAYAAAALAAAAAAAAAEcABAACAAAAHgAAAAAAAABHAAQAAwAAAB4AAAABAAAARwAEAAQAAAAeAAAAAgAAAEcABAAFAAAAHgAAAAMAAABHAAQABwAAAB4AAAAAAAAARwAEAAgAAAAeAAAAAQAAAEcABAAJAAAAHgAAAAIAAABHAAQACgAAAB4AAAADAAAARwAEAA0AAAAiAAAAAAAAAEcABAANAAAAIQAAAAAAAABIAAUADAAAAAAAAAAjAAAAAAAAAEgABQAMAAAAAQAAACMAAAAQAAAASAAFAAwAAAACAAAAIwAAACAAAABIAAUADAAAAAMAAAAjAAAAMAAAAEgABQAMAAAABAAAACMAAABAAAAASAAFAAwAAAAEAAAABwAAABAAAABIAAQADAAAAAQAAAAFAAAASAAFAAwAAAAFAAAAIwAAAIAAAABIAAUADAAAAAUAAAAHAAAAEAAAAEgABAAMAAAABQAAAAUAAABHAAQADgAAAAYAAADAAAAASAAFAAsAAAAAAAAAIwAAAAAAAABIAAUACwAAAAAAAAAHAAAAEAAAAEgABAALAAAAAAAAAAUAAABIAAUACwAAAAEAAAAjAAAAQAAAAEgABQALAAAAAQAAAAcAAAAQAAAASAAEAAsAAAABAAAABQAAAEgABQALAAAAAgAAACMAAACAAAAASAAFAAsAAAACAAAABwAAABAAAABIAAQACwAAAAIAAAAFAAAASAAFAAsAAAADAAAAIwAAAMAAAABIAAUACwAAAAQAAAAjAAAA0AAAAEgABQALAAAABQAAACMAAADgAAAARwADAAsAAAACAAAAFgADAA8AAAAgAAAAKwAEAA8AAAAQAAAAAACAPxUABAARAAAAIAAAAAEAAAArAAQAEQAAABIAAAACAAAAFQAEABMAAAAgAAAAAAAAACsABAARAAAAFAAAAAAAAAArAAQAEQAAABUAAAABAAAAFwAEABYAAAAPAAAABAAAABgABAAXAAAAFgAAAAQAAAArAAQAEwAAABgAAAADAAAAFwAEABkAAAAPAAAAAwAAAB4ACAAMAAAAGQAAABkAAAAWAAAAFgAAABcAAAAXAAAAHAAEAA4AAAAMAAAAGAAAAB4ACAALAAAAFwAAABcAAAAXAAAAFgAAABMAAAAOAAAAIAAEABoAAAACAAAACwAAACAABAAbAAAAAQAAABkAAAAXAAQAHAAAAA8AAAACAAAAIAAEAB0AAAABAAAAHAAAACAABAAeAAAAAwAAABYAAAAgAAQAHwAAAAMAAAAcAAAAIAAEACAAAAADAAAAGQAAABMAAgAhAAAAIQADACIAAAAhAAAAIAAEACMAAAACAAAAFwAAADsABAAaAAAADQAAAAIAAAA7AAQAGwAAAAIAAAABAAAAOwAEABsAAAADAAAAAQAAADsABAAdAAAABAAAAAEAAAA7AAQAGwAAAAUAAAABAAAAOwAEAB4AAAAGAAAAAwAAADsABAAeAAAABwAAAAMAAAA7AAQAHwAAAAgAAAADAAAAOwAEACAAAAAJAAAAAwAAADsABAAgAAAACgAAAAMAAAArAAQADwAAACQAAAAAAIC/NgAFACEAAAABAAAAAAAAACIAAAD4AAIAJQAAAD0ABAAZAAAAJgAAAAIAAAA9AAQAGQAAACcAAAADAAAAPQAEABwAAAAoAAAABAAAAD0ABAAZAAAAKQAAAAUAAABRAAUADwAAACoAAAAmAAAAAAAAAFEABQAPAAAAKwAAACYAAAABAAAAUQAFAA8AAAAsAAAAJgAAAAIAAABQAAcAFgAAAC0AAAAqAAAAKwAAACwAAAAQAAAAUQAFAA8AAAAuAAAAJwAAAAIAAACFAAUADwAAAC8AAAAuAAAAJAAAAFIABgAZAAAAMAAAAC8AAAAnAAAAAgAAAEEABQAjAAAAMQAAAA0AAAAUAAAAPQAEABcAAAAyAAAAMQAAAJEABQAWAAAAMwAAADIAAAAtAAAAQQAFACMAAAA0AAAADQAAABUAAAA9AAQAFwAAADUAAAA0AAAAkQAFABYAAAA2AAAANQAAADMAAABBAAUAIwAAADcAAAANAAAAEgAAAD0ABAAXAAAAOAAAADcAAACRAAUAFgAAADkAAAA4AAAANgAAAD4AAwAGAAAAOQAAAD4AAwAHAAAAMwAAAD4AAwAIAAAAKAAAAD4AAwAJAAAAMAAAAD4AAwAKAAAAKQAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nstruct LightState\n{\n    vec3 position;\n    vec3 direction;\n    vec4 color;\n    vec4 falloff;\n    mat4 view;\n    mat4 projection;\n};\n\nlayout(binding = 0, std140) uniform type_SceneConstantBuffer\n{\n    mat4 model;\n    mat4 view;\n    mat4 projection;\n    vec4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n} SceneConstantBuffer;\n\nuniform sampler2D SPIRV_Cross_CombineddiffuseMapsampleWrap;\nuniform sampler2D SPIRV_Cross_CombinednormalMapsampleWrap;\nuniform sampler2D SPIRV_Cross_CombinedshadowMapsampleClamp;\n\nlayout(location = 0) in vec4 in_var_POSITION;\nlayout(location = 1) in vec2 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_NORMAL;\nlayout(location = 3) in vec3 in_var_TANGENT;\nlayout(location = 0) out vec4 out_var_SV_TARGET;\n\nvec4 _65;\n\nvoid main()\n{\n    vec4 _80 = texture(SPIRV_Cross_CombineddiffuseMapsampleWrap, in_var_TEXCOORD0);\n    vec3 _81 = normalize(in_var_NORMAL);\n    vec3 _82 = normalize(in_var_TANGENT);\n    vec4 _88 = texture(SPIRV_Cross_CombinednormalMapsampleWrap, in_var_TEXCOORD0);\n    vec3 _95 = mat3(_82, normalize(cross(_82, _81)), _81) * ((vec3(_88.xyz) * 2.0) - vec3(1.0));\n    vec4 _99;\n    vec4 _102;\n    _99 = _65;\n    _102 = SceneConstantBuffer.ambientColor;\n    vec4 _103;\n    vec4 _100;\n    for (int _104 = 0; _104 < 3; _99 = _100, _102 = _103, _104++)\n    {\n        vec3 _118 = in_var_POSITION.xyz - SceneConstantBuffer.lights[_104].position;\n        float _119 = length(_118);\n        vec3 _126 = _118 / vec3(_119);\n        vec4 _141 = ((SceneConstantBuffer.lights[_104].color * clamp(-dot(_126, _95), 0.0, 1.0)) * clamp((SceneConstantBuffer.lights[_104].falloff.x - _119) / SceneConstantBuffer.lights[_104].falloff.y, 0.0, 1.0)) * clamp((dot(_126, SceneConstantBuffer.lights[_104].direction / vec3(length(SceneConstantBuffer.lights[_104].direction))) - SceneConstantBuffer.lights[_104].falloff.z) / SceneConstantBuffer.lights[_104].falloff.w, 0.0, 1.0);\n        vec4 _202;\n        if ((SceneConstantBuffer.sampleShadowMap != 0u) && (_104 == 0))\n        {\n            vec4 _154 = SceneConstantBuffer.lights[_104].projection * (SceneConstantBuffer.lights[_104].view * in_var_POSITION);\n            vec3 _158 = _154.xyz / vec3(_154.w);\n            vec2 _161 = (_158.xy * 0.5) + vec2(0.5);\n            vec2 _164 = _161;\n            _164.y = 1.0 - _161.y;\n            vec2 _168 = fract(vec2(1280.0, 720.0) * _164);\n            vec2 _170 = vec2(1.0) - _168.xy;\n            vec4 _171 = vec4(_168.x, _168.y, _170.x, _170.y);\n            vec4 _180 = _99;\n            _180.x = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164).x;\n            vec4 _185 = _180;\n            _185.y = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0007812500116415321826934814453125, 0.0)).x;\n            vec4 _190 = _185;\n            _190.z = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0, 0.001388888922519981861114501953125)).x;\n            vec4 _195 = _190;\n            _195.w = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0007812500116415321826934814453125, 0.001388888922519981861114501953125)).x;\n            _100 = _195;\n            _202 = _141 * vec4(dot(_171.zxzx * _171.wwyy, mix(vec4(0.0), vec4(1.0), greaterThanEqual(_195, vec4(_158.z - 4.9999998736893758177757263183594e-05)))));\n        }\n        else\n        {\n            _100 = _99;\n            _202 = _141;\n        }\n        _103 = _102 + _202;\n    }\n    out_var_SV_TARGET = _80 * clamp(_102, vec4(0.0), vec4(1.0));\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nstruct LightState\n{\n    highp vec3 position;\n    highp vec3 direction;\n    highp vec4 color;\n    highp vec4 falloff;\n    highp mat4 view;\n    highp mat4 projection;\n};\n\nlayout(binding = 0, std140) uniform type_SceneConstantBuffer\n{\n    highp mat4 model;\n    highp mat4 view;\n    highp mat4 projection;\n    highp vec4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n} SceneConstantBuffer;\n\nuniform highp sampler2D SPIRV_Cross_CombineddiffuseMapsampleWrap;\nuniform highp sampler2D SPIRV_Cross_CombinednormalMapsampleWrap;\nuniform highp sampler2D SPIRV_Cross_CombinedshadowMapsampleClamp;\n\nlayout(location = 0) in highp vec4 in_var_POSITION;\nlayout(location = 1) in highp vec2 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_NORMAL;\nlayout(location = 3) in highp vec3 in_var_TANGENT;\nlayout(location = 0) out highp vec4 out_var_SV_TARGET;\n\nvec4 _65;\n\nvoid main()\n{\n    highp vec4 _80 = texture(SPIRV_Cross_CombineddiffuseMapsampleWrap, in_var_TEXCOORD0);\n    highp vec3 _81 = normalize(in_var_NORMAL);\n    highp vec3 _82 = normalize(in_var_TANGENT);\n    highp vec4 _88 = texture(SPIRV_Cross_CombinednormalMapsampleWrap, in_var_TEXCOORD0);\n    highp vec3 _95 = mat3(_82, normalize(cross(_82, _81)), _81) * ((vec3(_88.xyz) * 2.0) - vec3(1.0));\n    highp vec4 _99;\n    highp vec4 _102;\n    _99 = _65;\n    _102 = SceneConstantBuffer.ambientColor;\n    highp vec4 _103;\n    highp vec4 _100;\n    for (int _104 = 0; _104 < 3; _99 = _100, _102 = _103, _104++)\n    {\n        highp vec3 _118 = in_var_POSITION.xyz - SceneConstantBuffer.lights[_104].position;\n        highp float _119 = length(_118);\n        highp vec3 _126 = _118 / vec3(_119);\n        highp vec4 _141 = ((SceneConstantBuffer.lights[_104].color * clamp(-dot(_126, _95), 0.0, 1.0)) * clamp((SceneConstantBuffer.lights[_104].falloff.x - _119) / SceneConstantBuffer.lights[_104].falloff.y, 0.0, 1.0)) * clamp((dot(_126, SceneConstantBuffer.lights[_104].direction / vec3(length(SceneConstantBuffer.lights[_104].direction))) - SceneConstantBuffer.lights[_104].falloff.z) / SceneConstantBuffer.lights[_104].falloff.w, 0.0, 1.0);\n        highp vec4 _202;\n        if ((SceneConstantBuffer.sampleShadowMap != 0u) && (_104 == 0))\n        {\n            highp vec4 _154 = SceneConstantBuffer.lights[_104].projection * (SceneConstantBuffer.lights[_104].view * in_var_POSITION);\n            highp vec3 _158 = _154.xyz / vec3(_154.w);\n            highp vec2 _161 = (_158.xy * 0.5) + vec2(0.5);\n            highp vec2 _164 = _161;\n            _164.y = 1.0 - _161.y;\n            highp vec2 _168 = fract(vec2(1280.0, 720.0) * _164);\n            highp vec2 _170 = vec2(1.0) - _168.xy;\n            highp vec4 _171 = vec4(_168.x, _168.y, _170.x, _170.y);\n            highp vec4 _180 = _99;\n            _180.x = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164).x;\n            highp vec4 _185 = _180;\n            _185.y = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0007812500116415321826934814453125, 0.0)).x;\n            highp vec4 _190 = _185;\n            _190.z = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0, 0.001388888922519981861114501953125)).x;\n            highp vec4 _195 = _190;\n            _195.w = texture(SPIRV_Cross_CombinedshadowMapsampleClamp, _164 + vec2(0.0007812500116415321826934814453125, 0.001388888922519981861114501953125)).x;\n            _100 = _195;\n            _202 = _141 * vec4(dot(_171.zxzx * _171.wwyy, mix(vec4(0.0), vec4(1.0), greaterThanEqual(_195, vec4(_158.z - 4.9999998736893758177757263183594e-05)))));\n        }\n        else\n        {\n            _100 = _99;\n            _202 = _141;\n        }\n        _103 = _102 + _202;\n    }\n    out_var_SV_TARGET = _80 * clamp(_102, vec4(0.0), vec4(1.0));\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct LightState\n{\n    float3 position;\n    float3 direction;\n    float4 color;\n    float4 falloff;\n    float4x4 view;\n    float4x4 projection;\n};\n\nstruct type_SceneConstantBuffer\n{\n    float4x4 model;\n    float4x4 view;\n    float4x4 projection;\n    float4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n};\n\nconstant float4 _65 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_TARGET [[color(0)]];\n};\n\nstruct frag_in\n{\n    float4 in_var_POSITION [[user(locn0)]];\n    float2 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_NORMAL [[user(locn2)]];\n    float3 in_var_TANGENT [[user(locn3)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_SceneConstantBuffer& SceneConstantBuffer [[buffer(0)]], texture2d<float> shadowMap [[texture(0)]], texture2d<float> diffuseMap [[texture(1)]], texture2d<float> normalMap [[texture(2)]], sampler sampleWrap [[sampler(0)]], sampler sampleClamp [[sampler(1)]])\n{\n    frag_out out = {};\n    float4 _80 = diffuseMap.sample(sampleWrap, in.in_var_TEXCOORD0);\n    float3 _81 = normalize(in.in_var_NORMAL);\n    float3 _82 = normalize(in.in_var_TANGENT);\n    float4 _88 = normalMap.sample(sampleWrap, in.in_var_TEXCOORD0);\n    float3 _95 = float3x3(_82, normalize(cross(_82, _81)), _81) * ((float3(_88.xyz) * 2.0) - float3(1.0));\n    float4 _99;\n    float4 _102;\n    _99 = _65;\n    _102 = SceneConstantBuffer.ambientColor;\n    float4 _103;\n    float4 _100;\n    for (int _104 = 0; _104 < 3; _99 = _100, _102 = _103, _104++)\n    {\n        float3 _118 = in.in_var_POSITION.xyz - SceneConstantBuffer.lights[_104].position;\n        float _119 = length(_118);\n        float3 _126 = _118 / float3(_119);\n        float4 _141 = ((SceneConstantBuffer.lights[_104].color * fast::clamp(-dot(_126, _95), 0.0, 1.0)) * fast::clamp((SceneConstantBuffer.lights[_104].falloff.x - _119) / SceneConstantBuffer.lights[_104].falloff.y, 0.0, 1.0)) * fast::clamp((dot(_126, SceneConstantBuffer.lights[_104].direction / float3(length(SceneConstantBuffer.lights[_104].direction))) - SceneConstantBuffer.lights[_104].falloff.z) / SceneConstantBuffer.lights[_104].falloff.w, 0.0, 1.0);\n        float4 _202;\n        if ((SceneConstantBuffer.sampleShadowMap != 0u) && (_104 == 0))\n        {\n            float4 _154 = SceneConstantBuffer.lights[_104].projection * (SceneConstantBuffer.lights[_104].view * in.in_var_POSITION);\n            float3 _158 = _154.xyz / float3(_154.w);\n            float2 _161 = (_158.xy * 0.5) + float2(0.5);\n            float2 _164 = _161;\n            _164.y = 1.0 - _161.y;\n            float2 _168 = fract(float2(1280.0, 720.0) * _164);\n            float2 _170 = float2(1.0) - _168.xy;\n            float4 _171 = float4(_168.x, _168.y, _170.x, _170.y);\n            float4 _180 = _99;\n            _180.x = shadowMap.sample(sampleClamp, _164).x;\n            float4 _185 = _180;\n            _185.y = shadowMap.sample(sampleClamp, (_164 + float2(0.0007812500116415321826934814453125, 0.0))).x;\n            float4 _190 = _185;\n            _190.z = shadowMap.sample(sampleClamp, (_164 + float2(0.0, 0.001388888922519981861114501953125))).x;\n            float4 _195 = _190;\n            _195.w = shadowMap.sample(sampleClamp, (_164 + float2(0.0007812500116415321826934814453125, 0.001388888922519981861114501953125))).x;\n            _100 = _195;\n            _202 = _141 * float4(dot(_171.zxzx * _171.wwyy, select(float4(0.0), float4(1.0), _195 >= float4(_158.z - 4.9999998736893758177757263183594e-05))));\n        }\n        else\n        {\n            _100 = _99;\n            _202 = _141;\n        }\n        _103 = _102 + _202;\n    }\n    out.out_var_SV_TARGET = _80 * fast::clamp(_102, float4(0.0), float4(1.0));\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct LightState\n{\n    float3 position;\n    float3 direction;\n    float4 color;\n    float4 falloff;\n    float4x4 view;\n    float4x4 projection;\n};\n\nstruct type_SceneConstantBuffer\n{\n    float4x4 model;\n    float4x4 view;\n    float4x4 projection;\n    float4 ambientColor;\n    uint sampleShadowMap;\n    LightState lights[3];\n};\n\nconstant float4 _65 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_TARGET [[color(0)]];\n};\n\nstruct frag_in\n{\n    float4 in_var_POSITION [[user(locn0)]];\n    float2 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_NORMAL [[user(locn2)]];\n    float3 in_var_TANGENT [[user(locn3)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_SceneConstantBuffer& SceneConstantBuffer [[buffer(0)]], texture2d<float> shadowMap [[texture(0)]], texture2d<float> diffuseMap [[texture(1)]], texture2d<float> normalMap [[texture(2)]], sampler sampleWrap [[sampler(0)]], sampler sampleClamp [[sampler(1)]])\n{\n    frag_out out = {};\n    float4 _80 = diffuseMap.sample(sampleWrap, in.in_var_TEXCOORD0);\n    float3 _81 = normalize(in.in_var_NORMAL);\n    float3 _82 = normalize(in.in_var_TANGENT);\n    float4 _88 = normalMap.sample(sampleWrap, in.in_var_TEXCOORD0);\n    float3 _95 = float3x3(_82, normalize(cross(_82, _81)), _81) * ((float3(_88.xyz) * 2.0) - float3(1.0));\n    float4 _99;\n    float4 _102;\n    _99 = _65;\n    _102 = SceneConstantBuffer.ambientColor;\n    float4 _103;\n    float4 _100;\n    for (int _104 = 0; _104 < 3; _99 = _100, _102 = _103, _104++)\n    {\n        float3 _118 = in.in_var_POSITION.xyz - SceneConstantBuffer.lights[_104].position;\n        float _119 = length(_118);\n        float3 _126 = _118 / float3(_119);\n        float4 _141 = ((SceneConstantBuffer.lights[_104].color * fast::clamp(-dot(_126, _95), 0.0, 1.0)) * fast::clamp((SceneConstantBuffer.lights[_104].falloff.x - _119) / SceneConstantBuffer.lights[_104].falloff.y, 0.0, 1.0)) * fast::clamp((dot(_126, SceneConstantBuffer.lights[_104].direction / float3(length(SceneConstantBuffer.lights[_104].direction))) - SceneConstantBuffer.lights[_104].falloff.z) / SceneConstantBuffer.lights[_104].falloff.w, 0.0, 1.0);\n        float4 _202;\n        if ((SceneConstantBuffer.sampleShadowMap != 0u) && (_104 == 0))\n        {\n            float4 _154 = SceneConstantBuffer.lights[_104].projection * (SceneConstantBuffer.lights[_104].view * in.in_var_POSITION);\n            float3 _158 = _154.xyz / float3(_154.w);\n            float2 _161 = (_158.xy * 0.5) + float2(0.5);\n            float2 _164 = _161;\n            _164.y = 1.0 - _161.y;\n            float2 _168 = fract(float2(1280.0, 720.0) * _164);\n            float2 _170 = float2(1.0) - _168.xy;\n            float4 _171 = float4(_168.x, _168.y, _170.x, _170.y);\n            float4 _180 = _99;\n            _180.x = shadowMap.sample(sampleClamp, _164).x;\n            float4 _185 = _180;\n            _185.y = shadowMap.sample(sampleClamp, (_164 + float2(0.0007812500116415321826934814453125, 0.0))).x;\n            float4 _190 = _185;\n            _190.z = shadowMap.sample(sampleClamp, (_164 + float2(0.0, 0.001388888922519981861114501953125))).x;\n            float4 _195 = _190;\n            _195.w = shadowMap.sample(sampleClamp, (_164 + float2(0.0007812500116415321826934814453125, 0.001388888922519981861114501953125))).x;\n            _100 = _195;\n            _202 = _141 * float4(dot(_171.zxzx * _171.wwyy, select(float4(0.0), float4(1.0), _195 >= float4(_158.z - 4.9999998736893758177757263183594e-05))));\n        }\n        else\n        {\n            _100 = _99;\n            _202 = _141;\n        }\n        _103 = _102 + _202;\n    }\n    out.out_var_SV_TARGET = _80 * fast::clamp(_102, float4(0.0), float4(1.0));\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AzQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACwAEAAAAAgAAAGZyYWcAAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAAEAADAAIAAAAHAAAAAwADAAUAAABYAgAABQAGAAkAAAB0eXBlLjJkLmltYWdlAAAABQAFAAoAAABzaGFkb3dNYXAAAAAFAAUACwAAAGRpZmZ1c2VNYXAAAAUABQAMAAAAbm9ybWFsTWFwAAAABQAGAA0AAAB0eXBlLnNhbXBsZXIAAAAABQAFAA4AAABzYW1wbGVXcmFwAAAFAAUADwAAAHNhbXBsZUNsYW1wAAUACQAQAAAAdHlwZS5TY2VuZUNvbnN0YW50QnVmZmVyAAAAAAYABQAQAAAAAAAAAG1vZGVsAAAABgAFABAAAAABAAAAdmlldwAAAAAGAAYAEAAAAAIAAABwcm9qZWN0aW9uAAAGAAcAEAAAAAMAAABhbWJpZW50Q29sb3IAAAAABgAHABAAAAAEAAAAc2FtcGxlU2hhZG93TWFwAAYABQAQAAAABQAAAGxpZ2h0cwAABQAFABEAAABMaWdodFN0YXRlAAAGAAYAEQAAAAAAAABwb3NpdGlvbgAAAAAGAAYAEQAAAAEAAABkaXJlY3Rpb24AAAAGAAUAEQAAAAIAAABjb2xvcgAAAAYABQARAAAAAwAAAGZhbGxvZmYABgAFABEAAAAEAAAAdmlldwAAAAAGAAYAEQAAAAUAAABwcm9qZWN0aW9uAAAFAAcAEgAAAFNjZW5lQ29uc3RhbnRCdWZmZXIABQAGAAQAAABpbi52YXIuUE9TSVRJT04ABQAHAAUAAABpbi52YXIuVEVYQ09PUkQwAAAAAAUABgAGAAAAaW4udmFyLk5PUk1BTAAAAAUABgAHAAAAaW4udmFyLlRBTkdFTlQAAAUABwAIAAAAb3V0LnZhci5TVl9UQVJHRVQAAAAFAAQAAgAAAGZyYWcAAAAABQAHABMAAAB0eXBlLnNhbXBsZWQuaW1hZ2UAAEcABAADAAAACwAAAA8AAABHAAQABAAAAB4AAAAAAAAARwAEAAUAAAAeAAAAAQAAAEcABAAGAAAAHgAAAAIAAABHAAQABwAAAB4AAAADAAAARwAEAAgAAAAeAAAAAAAAAEcABAAKAAAAIgAAAAAAAABHAAQACgAAACEAAAAAAAAARwAEAAsAAAAiAAAAAAAAAEcABAALAAAAIQAAAAEAAABHAAQADAAAACIAAAAAAAAARwAEAAwAAAAhAAAAAgAAAEcABAAOAAAAIgAAAAAAAABHAAQADgAAACEAAAAAAAAARwAEAA8AAAAiAAAAAAAAAEcABAAPAAAAIQAAAAEAAABHAAQAEgAAACIAAAAAAAAARwAEABIAAAAhAAAAAAAAAEgABQARAAAAAAAAACMAAAAAAAAASAAFABEAAAABAAAAIwAAABAAAABIAAUAEQAAAAIAAAAjAAAAIAAAAEgABQARAAAAAwAAACMAAAAwAAAASAAFABEAAAAEAAAAIwAAAEAAAABIAAUAEQAAAAQAAAAHAAAAEAAAAEgABAARAAAABAAAAAUAAABIAAUAEQAAAAUAAAAjAAAAgAAAAEgABQARAAAABQAAAAcAAAAQAAAASAAEABEAAAAFAAAABQAAAEcABAAUAAAABgAAAMAAAABIAAUAEAAAAAAAAAAjAAAAAAAAAEgABQAQAAAAAAAAAAcAAAAQAAAASAAEABAAAAAAAAAABQAAAEgABQAQAAAAAQAAACMAAABAAAAASAAFABAAAAABAAAABwAAABAAAABIAAQAEAAAAAEAAAAFAAAASAAFABAAAAACAAAAIwAAAIAAAABIAAUAEAAAAAIAAAAHAAAAEAAAAEgABAAQAAAAAgAAAAUAAABIAAUAEAAAAAMAAAAjAAAAwAAAAEgABQAQAAAABAAAACMAAADQAAAASAAFABAAAAAFAAAAIwAAAOAAAABHAAMAEAAAAAIAAAAVAAQAFQAAACAAAAABAAAAKwAEABUAAAAWAAAAAgAAACsABAAVAAAAFwAAAAMAAAArAAQAFQAAABgAAAAEAAAAKwAEABUAAAAZAAAAAAAAACsABAAVAAAAGgAAAAUAAAArAAQAFQAAABsAAAABAAAAFQAEABwAAAAgAAAAAAAAACsABAAcAAAAHQAAAAAAAAAWAAMAHgAAACAAAAArAAQAHgAAAB8AAAAAAAAAFwAEACAAAAAeAAAABAAAACwABwAgAAAAIQAAAB8AAAAfAAAAHwAAAB8AAAArAAQAHgAAACIAAAAAAIA/LAAHACAAAAAjAAAAIgAAACIAAAAiAAAA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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        }
                    ],
                    "state": {
                        "alphaToMask": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOp": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOpAlpha": {
                            "ref": "",
                            "val": 0
                        },
                        "colMask": {
                            "ref": "",
                            "val": 15
                        },
                        "culling": {
                            "ref": "",
                            "val": 2
                        },
                        "destBlend": {
                            "ref": "",
                            "val": 0
                        },
                        "destBlendAlpha": {
                            "ref": "",
                            "val": 0
                        },
                        "lod": 0,
                        "name": "",
                        "offsetFactor": {
                            "ref": "",
                            "val": 0
                        },
                        "offsetUnits": {
                            "ref": "",
                            "val": 0
                        },
                        "srcBlend": {
                            "ref": "",
                            "val": 1
                        },
                        "srcBlendAlpha": {
                            "ref": "",
                            "val": 1
                        },
                        "stencilOp": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilOpBack": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilOpFront": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilReadMask": {
                            "ref": "",
                            "val": 255
                        },
                        "stencilRef": {
                            "ref": "",
                            "val": 0
                        },
                        "stencilWriteMask": {
                            "ref": "",
                            "val": 255
                        },
                        "tags": {
                            "IgnoreProjector": "True",
                            "Queue": "Transparent",
                            "RenderType": "Transparent"
                        },
                        "zTest": {
                            "ref": "",
                            "val": 4
                        },
                        "zWrite": {
                            "ref": "",
                            "val": 1
                        }
                    },
                    "type": "compiledPass"
                }
            ],
            "tags": {
                "IgnoreProjector": "True",
                "Queue": "Transparent",
                "RenderType": "Transparent"
            }
        }
    ]
}