{"fallbackName":"","properties":{"description":"_Intensito","name":"_Intensito","texture":{"dimension":"Unknown","name":""},"type":"Range","value":{"w":0.0,"x":2.2000000476837158,"y":0.0099999997764825821,"z":3.0}},"shaderName":"Particles/Blend","subShaders":[{"lod":0,"passes":[{"errorMsg":"","programs":[{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARgAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAIA/KwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAA2AAUAAgAAAAQAAAAAAAAAAwAAAPgAAgAFAAAAOwAEAC4AAAAvAAAABwAAADsABAAuAAAANAAAAAcAAAA7AAQABwAAADgAAAAHAAAAOwAEAAcAAAA8AAAABwAAAD0ABAAtAAAAMgAAADEAAAAMAAYALQAAADMAAAABAAAARQAAADIAAAA+AAMALwAAADMAAAA+AAMANAAAADcAAAA9AAQALQAAADkAAAAvAAAAPQAEAC0AAAA6AAAANAAAAJQABQAGAAAAOwAAADkAAAA6AAAAPgADADgAAAA7AAAAPQAEAAYAAAA9AAAAOAAAAD4AAwA8AAAAPQAAADkABQAGAAAAPgAAAA0AAAA8AAAAPgADADgAAAA+AAAAPQAEAAYAAABCAAAAOAAAAD0ABAAGAAAAQwAAADgAAAA9AAQABgAAAEQAAAA4AAAAUAAHAD8AAABFAAAAQgAAAEMAAABEAAAAHQAAAD4AAwBBAAAARQAAAP0AAQA4AAEANgAFAAYAAAAKAAAAAAAAAAgAAAA3AAMABwAAAAkAAAD4AAIACwAAAD0ABAAGAAAADwAAAAkAAAA9AAQABgAAABAAAAAJAAAAhQAFAAYAAAARAAAADwAAABAAAAA9AAQABgAAABIAAAAJAAAAhQAFAAYAAAATAAAAEQAAABIAAAA9AAQABgAAABQAAAAJAAAAhQAFAAYAAAAVAAAAEwAAABQAAAA9AAQABgAAABYAAAAJAAAAhQAFAAYAAAAXAAAAFQAAABYAAAD+AAIAFwAAADgAAQA2AAUABgAAAA0AAAAAAAAACAAAADcAAwAHAAAADAAAAPgAAgAOAAAAOwAEAAcAAAAaAAAABwAAADsABAAHAAAAIAAAAAcAAAA7AAQABwAAACYAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARgAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAIA/KwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAA2AAUAAgAAAAQAAAAAAAAAAwAAAPgAAgAFAAAAOwAEAC4AAAAvAAAABwAAADsABAAuAAAANAAAAAcAAAA7AAQABwAAADgAAAAHAAAAOwAEAAcAAAA8AAAABwAAAD0ABAAtAAAAMgAAADEAAAAMAAYALQAAADMAAAABAAAARQAAADIAAAA+AAMALwAAADMAAAA+AAMANAAAADcAAAA9AAQALQAAADkAAAAvAAAAPQAEAC0AAAA6AAAANAAAAJQABQAGAAAAOwAAADkAAAA6AAAAPgADADgAAAA7AAAAPQAEAAYAAAA9AAAAOAAAAD4AAwA8AAAAPQAAADkABQAGAAAAPgAAAA0AAAA8AAAAPgADADgAAAA+AAAAPQAEAAYAAABCAAAAOAAAAD0ABAAGAAAAQwAAADgAAAA9AAQABgAAAEQAAAA4AAAAUAAHAD8AAABFAAAAQgAAAEMAAABEAAAAHQAAAD4AAwBBAAAARQAAAP0AAQA4AAEANgAFAAYAAAAKAAAAAAAAAAgAAAA3AAMABwAAAAkAAAD4AAIACwAAAD0ABAAGAAAADwAAAAkAAAA9AAQABgAAABAAAAAJAAAAhQAFAAYAAAARAAAADwAAABAAAAA9AAQABgAAABIAAAAJAAAAhQAFAAYAAAATAAAAEQAAABIAAAA9AAQABgAAABQAAAAJAAAAhQAFAAYAAAAVAAAAEwAAABQAAAA9AAQABgAAABYAAAAJAAAAhQAFAAYAAAAXAAAAFQAAABYAAAD+AAIAFwAAADgAAQA2AAUABgAAAA0AAAAAAAAACAAAADcAAwAHAAAADAAAAPgAAgAOAAAAOwAEAAcAAAAaAAAABwAAADsABAAHAAAAIAAAAAcAAAA7AAQABwAAACYAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARgAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAIA/KwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAA2AAUAAgAAAAQAAAAAAAAAAwAAAPgAAgAFAAAAOwAEAC4AAAAvAAAABwAAADsABAAuAAAANAAAAAcAAAA7AAQABwAAADgAAAAHAAAAOwAEAAcAAAA8AAAABwAAAD0ABAAtAAAAMgAAADEAAAAMAAYALQAAADMAAAABAAAARQAAADIAAAA+AAMALwAAADMAAAA+AAMANAAAADcAAAA9AAQALQAAADkAAAAvAAAAPQAEAC0AAAA6AAAANAAAAJQABQAGAAAAOwAAADkAAAA6AAAAPgADADgAAAA7AAAAPQAEAAYAAAA9AAAAOAAAAD4AAwA8AAAAPQAAADkABQAGAAAAPgAAAA0AAAA8AAAAPgADADgAAAA+AAAAPQAEAAYAAABCAAAAOAAAAD0ABAAGAAAAQwAAADgAAAA9AAQABgAAAEQAAAA4AAAAUAAHAD8AAABFAAAAQgAAAEMAAABEAAAAHQAAAD4AAwBBAAAARQAAAP0AAQA4AAEANgAFAAYAAAAKAAAAAAAAAAgAAAA3AAMABwAAAAkAAAD4AAIACwAAAD0ABAAGAAAADwAAAAkAAAA9AAQABgAAABAAAAAJAAAAhQAFAAYAAAARAAAADwAAABAAAAA9AAQABgAAABIAAAAJAAAAhQAFAAYAAAATAAAAEQAAABIAAAA9AAQABgAAABQAAAAJAAAAhQAFAAYAAAAVAAAAEwAAABQAAAA9AAQABgAAABYAAAAJAAAAhQAFAAYAAAAXAAAAFQAAABYAAAD+AAIAFwAAADgAAQA2AAUABgAAAA0AAAAAAAAACAAAADcAAwAHAAAADAAAAPgAAgAOAAAAOwAEAAcAAAAaAAAABwAAADsABAAHAAAAIAAAAAcAAAA7AAQABwAAACYAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARgAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAIA/KwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAA2AAUAAgAAAAQAAAAAAAAAAwAAAPgAAgAFAAAAOwAEAC4AAAAvAAAABwAAADsABAAuAAAANAAAAAcAAAA7AAQABwAAADgAAAAHAAAAOwAEAAcAAAA8AAAABwAAAD0ABAAtAAAAMgAAADEAAAAMAAYALQAAADMAAAABAAAARQAAADIAAAA+AAMALwAAADMAAAA+AAMANAAAADcAAAA9AAQALQAAADkAAAAvAAAAPQAEAC0AAAA6AAAANAAAAJQABQAGAAAAOwAAADkAAAA6AAAAPgADADgAAAA7AAAAPQAEAAYAAAA9AAAAOAAAAD4AAwA8AAAAPQAAADkABQAGAAAAPgAAAA0AAAA8AAAAPgADADgAAAA+AAAAPQAEAAYAAABCAAAAOAAAAD0ABAAGAAAAQwAAADgAAAA9AAQABgAAAEQAAAA4AAAAUAAHAD8AAABFAAAAQgAAAEMAAABEAAAAHQAAAD4AAwBBAAAARQAAAP0AAQA4AAEANgAFAAYAAAAKAAAAAAAAAAgAAAA3AAMABwAAAAkAAAD4AAIACwAAAD0ABAAGAAAADwAAAAkAAAA9AAQABgAAABAAAAAJAAAAhQAFAAYAAAARAAAADwAAABAAAAA9AAQABgAAABIAAAAJAAAAhQAFAAYAAAATAAAAEQAAABIAAAA9AAQABgAAABQAAAAJAAAAhQAFAAYAAAAVAAAAEwAAABQAAAA9AAQABgAAABYAAAAJAAAAhQAFAAYAAAAXAAAAFQAAABYAAAD+AAIAFwAAADgAAQA2AAUABgAAAA0AAAAAAAAACAAAADcAAwAHAAAADAAAAPgAAgAOAAAAOwAEAAcAAAAaAAAABwAAADsABAAHAAAAIAAAAAcAAAA7AAQABwAAACYAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=","encode":"base64","entryPoint":"frag","keywords":["TEST1","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST3","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST3","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST3","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST3","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST4","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST4","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST4","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST4","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST5","TEST6"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST5","TEST7"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST5","TEST8"],"shaderStage":"fragment","shaderTarget":"vulkan"},{"data":"#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"opengl"},{"data":"#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"gles20"},{"data":"#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"gles30"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"ios"},{"data":"#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=","encode":"base64","entryPoint":"vert","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"vertex","shaderTarget":"vulkan"},{"data":"#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"opengl"},{"data":"#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"gles20"},{"data":"#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"gles30"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"ios"},{"data":"#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n","encode":"string","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"mac"},{"data":"AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA","encode":"base64","entryPoint":"frag","keywords":["TEST2","TEST5","TEST9"],"shaderStage":"fragment","shaderTarget":"vulkan"}],"state":{"alphaToMask":{"ref":"","val":0.0},"blendOp":{"ref":"","val":0.0},"blendOpAlpha":{"ref":"","val":0.0},"colMask":{"ref":"","val":14.0},"culling":{"ref":"","val":0.0},"destBlend":{"ref":"","val":1.0},"destBlendAlpha":{"ref":"","val":1.0},"lod":0,"name":"","offsetFactor":{"ref":"","val":0.0},"offsetUnits":{"ref":"","val":0.0},"srcBlend":{"ref":"","val":2.0},"srcBlendAlpha":{"ref":"","val":2.0},"stencilOp":{"comp":{"ref":"","val":8.0},"fail":{"ref":"","val":0.0},"pass":{"ref":"","val":0.0},"zFail":{"ref":"","val":0.0}},"stencilOpBack":{"comp":{"ref":"","val":8.0},"fail":{"ref":"","val":0.0},"pass":{"ref":"","val":0.0},"zFail":{"ref":"","val":0.0}},"stencilOpFront":{"comp":{"ref":"","val":8.0},"fail":{"ref":"","val":0.0},"pass":{"ref":"","val":0.0},"zFail":{"ref":"","val":0.0}},"stencilReadMask":{"ref":"","val":255.0},"stencilRef":{"ref":"","val":0.0},"stencilWriteMask":{"ref":"","val":255.0},"tags":{"IgnoreProjector":"True","Queue":"Transparent","RenderType":"Transparent"},"zTest":{"ref":"","val":4.0},"zWrite":{"ref":"","val":0.0}},"type":"compiledPass"}],"tags":{"IgnoreProjector":"True","Queue":"Transparent","RenderType":"Transparent"}}]}