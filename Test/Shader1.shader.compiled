{
    "fallbackName": "",
    "properties": {
        "description": "_Intensito",
        "name": "_Intensito",
        "texture": {
            "dimension": "Unknown",
            "name": ""
        },
        "type": "Range",
        "value": {
            "w": 0,
            "x": 2.200000047683716,
            "y": 0.009999999776482582,
            "z": 3
        }
    },
    "shaderName": "Particles/Blend",
    "subShaders": [
        {
            "lod": 0,
            "passes": [
                {
                    "errorMsg": "",
                    "programs": [
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "RFhCQwAAAAAAAAAAAAAAAAAAAAABAAAAOxAAAAcAAAA8AAAATAAAAAEBAAA7AQAAQwIAAFMJAABvCQAAU0ZJMAgAAAAAAAAAAAAAAElTRzGtAAAABAAAAAgAAAAAAAAAiAAAAAAAAAABAAAAAwAAAAAAAAAPAAAAAAAAAAAAAACUAAAAAAAAAAAAAAADAAAAAQAAAAcHAAAAAAAAAAAAAJsAAAAAAAAAAAAAAAMAAAACAAAABwcAAAAAAAAAAAAApAAAAAEAAAAAAAAAAwAAAAMAAAAHBwAAAAAAAFNWX1Bvc2l0aW9uAE5PUk1BTABURVhDT09SRABURVhDT09SRABPU0cxMgAAAAEAAAAIAAAAAAAAACgAAAAAAAAAQAAAAAMAAAAAAAAADwAAAAAAAABTVl9UYXJnZXQAUFNWMAABAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAQBAAQBAAAAAQAAABAAAAACAAAAAAAAAAAAAAAAAAAAHAAAAABOT1JNQUwAVEVYQ09PUkQAVEVYQ09PUkQAAAACAAAAAAAAAAEAAAAQAAAAAAAAAAAAAAABAEQDAwQAAAEAAAAAAAAAAQFDAAMCAAAIAAAAAAAAAAECQwADAgAAEQAAAAEAAAABA0MAAwIAAAAAAAAAAAAAAQBEEAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAEAAAAAAAAAAEAAAACAAAABAAAAAAAAAABAAAAAgAAAAQAAAAAAAAAU1RBVAgHAABgAAAAwgEAAERYSUwAAQAAEAAAAPAGAABCQ8DeIQwAALkBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAFEUCQpILQqQQMhQ4CBhLCjJSiEiQFCBDRoilABkyQuRIDpCRIsRQQVGBjOGD5YoEKUYGURgAAAgAAAAbjOD/////B0ACqA2E8P////8DIG0whv////8fAAmoAEkYAAADAAAAE4JgQiBMCAYAAAAAiSAAACYAAAAyIkgJIGSFBJMipIQEkyLjhKGQFBJMiowLhKRMEGQzAMMIA3BPSkRokBDCtFFFQURoCAGQGAEoAaEyRwAGcwRIMcA5Bx1KxSDnHARoHTVc/oQ9hORzG1WsxOQXt40IAAAgdM9w+RP2EJIfAs2wEChwhWjnHYJzBEEx3kHnSJoDAcMIBHCONEWUMPkpKzYPNSHChhAy4gAAABMUcsCHdGCHNmiHeWgDcsCHDa9QDm3QDnpQDm0AD3owB3KgB3MgB22QDnGgB3MgB22QDnigB3MgB22QDnFgB3owB3LQBukwB3KgB3MgB22QDnZAB3pgB3TQBuYQB3agB3MgB21gDnMgB3owB3LQBuZgB3SgB3ZAB23gDnigB3FgB3owB3KgB3ZABzoPRJAhIyVAADoAYMhTAAEAAAAAAAAAAMCQJwECIAAAAAAAAACAIc8CBIAAAAAAAAAAAEMeCAiAAQAAAAAAAACGPBMQAAMAAAAAAAAAZIEAAAAUAAAAMh6YGBkRTJCMCSZHxgRDkjVAqEDolMAIQDEUUOGVQSGUQ0kUSIEVThGURzkRKokyKIQRgCKgMQNAYgaA7gwA4bGihwAAAAgEAggEAggEAgB5GAAAtgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEA5kgHMkGYSA2CARBAW5ugnAoG4YDISYIA8cHqkzuSUytbIxOqM7MrExugnAsGxBCWQhiYIANQbOBAAAHmCBc3gThYDjAvc1NEI5mgnA4XKasvqDe5tLo0t7cJgjHM0E4oA0IIk0EVVkXDbc3ubYwtgnCEdFwepJqCmLagCDZpFGbdRFhSztDo7MqG2NCVYQ19PQkRQSzAUG6iaE86+KBFsZmdheWN0E4JCZURVhDT09SRDEbEAQMpjCgxMC6NhQRxn1jMEEQOiZkaWZmQ29sb3ITBMnYgCBmMBHWdZ0Bkzm4srGhN7Y3uQ0IkgaTZl3XGTCZQ0tzS3Mrm5ubIBzTBgRZg4kNrOs6gw0EgwZq0AYbCgIigzJwgwmCEWwANgxEHMTBhkAONgwDHMzBBAH7NgR1QMJMLuxsgoBcEwQE2xAQEwQkmyAg2oaFqPAgD/RgD4Y9IPgAmCAg2wZhsjYsw4YHfKAHfjDkwcAHfzBBOCgiVEVYQ09PUkQbllAQBTzgAz3wgyEPQoEP/mBDMGxYJlHAAz4gBT8Y8mDigz/YQPQBKIxCKTCZsvqiCpM7K6ObICDHBOGoNghTKmxYiFPAA1TQAz4Y9oDgA1XYEKzChsEUWAHYUMDBHbTCA9AwY3sLo5tjkeY2Rzc3QTgsGnNpZ19sZDTm0s6+5ug2IK+QCrAQC7JwzQJVhY3Nrs0ljazMjW5KEFQhw3OxK5ObS3tzmxIQTcjwXOzC2OzK5KYERR0yPJc5tDCyMrmmN7IytikBUoYMz0WubO6tTm6sbG5K4FQiw3Ohy4MrC3Jze6MLo0t7c5ubIrjBHNQhw3OxSyu7SyKbogujK5sS1EEdMjyXMjc6uTyotzQ3urkpQSt0IcNzGXurc6Mrk5ubEswCAAAAeRgAAEwAAAAzCIAcxOEcZhQBPYhDOITDjEKAB3l4B3OYcQzmAA/tEA70gA4zDEIewsEdzqEcZjAFPYhDOISDG8wDPchDPYwDPcx4jHRwB3sIB3lIh3BwB3pwA3Z4h3AghxnMEQ7skA7hMA9uMA/j8A7wUA4zEMQd3iEc2CEdwmEeZjCJO7yDO9BDObQDPLyDPIQDO8zwFHZgB3toBzdoh3JoBzeAh3CQh3BgB3YoB3b4BXZ4h3eAh18Ih3EYh3KYh3mYgSzu8A7u4A71wA7sMANiyKEc5KEczKEc5KEc3GEcyiEcxIEdymEG1pBDOchDOZhDOchDObjDOJRDOIgDO5TDL7yDPPyCO9QDO7DDDMQhB3xwA3ooh3aAhxnRQw744AbkIA7n4Ab2EA7ywA7hkA/vUA/0AAAAcSAAABcAAAAG8KREhAYJIUwbVRREZATbcPnO4wsBVRREVDrAUBIGIGB+cdtWIA2X7zy+EBHARIRAMyyECUzD5TuPvzjAIDYPNfnFbdtANVy+8/jS5EQESk0PNfnFbVsAUUSAAQAAAABIQVNIFAAAAAAAAABMc/EKPyoSYoms9YapLcvTRFhJTMQGAABgAAAAsQEAAERYSUwAAQAAEAAAAKwGAABCQ8DeIQwAAKgBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAFEUCQpILQqQQMhQ4CBhLCjJSiEiQFCBDRoilABkyQuRIDpCRIsRQQVGBjOGD5YoEKUYGURgAAAgAAAAbjOD/////B0ACqA2E8P////8DIG0whv////8fAAmoAEkYAAADAAAAE4JgQiBMCAYAAAAAiSAAACEAAAAyIkgJIGSFBJMipIQEkyLjhKGQFBJMiowLhKRMEFwjACUAFGYA5gjAYI4AKcYghBRCphiAEFIGoaOGy5+wh5B8bqOKlZj84rYRMcYYVO4ZLn/CHkLyQ6AZFgIFqxCKMEJtjiAoBiOFkEdwIGAYYRjuSYkIDRJCmDaqKIgIDXMOohlBAAATFHLAh3RghzZoh3loA3LAhw2vUA5t0A56UA5tAA96MAdyoAdzIAdtkA5xoAdzIAdtkA54oAdzIAdtkA5xYAd6MAdy0AbpMAdyoAdzIAdtkA52QAd6YAd00AbmEAd2oAdzIAdtYA5zIAd6MAdy0AbmYAd0oAd2QAdt4A54oAdxYAd6MAdyoAd2QAdDngAAAAAAAAAAAAAAhjwGEAABAAAAAAAAAAx5ECAABAAAAAAAAAAY8jRAAAwAAAAAAAAAMOSBgAAYAAAAAAAAACALBAAADwAAADIemBQZEUyQjAkmR8YEQyIlMAJQDAVUBuVQBOVBpSTKoBBGAIqgQKjOAJAdK3oIAACAQCCAQCCAQCAAAHkYAABiAAAAGgNMkEYCE0Q1GGMLczsDsSuTm0t7cwOZcbkBQaELO5t7kSpiKgqaKvqauYF5MUtzC2NL2RAEEwSimCAQxgZhICYIxLFBGAwKcHMbBsQgJgjVRGCCQCAbEEJZCGJggA1Bs4EAAAeYIFjUhgCaIAgACTO5sDMuU1ZfUG9zaXRpb24ThKKZIBTOhoCYIBTPBKGANiwEVVkXNmBEBtBwepJqCmKaIBTRBIFIJgiEskHovA3LsFXZxQ3WkH0TBGIhQlWENfT0JEW0YQkDMaiyixusMMi+DcGwYenEoMrIgBusLvs2EBoYjEEZMJmy+qIKkzsro5sgFNIEgWA2CF0abFiIM6jQ4MoGjMjUYEOwBhsGM2ADYEMhTW3wAFXY2OzaXNLIytzopgRBFTI8F7syubm0N7cpAdGEDM/FLozNrkxuSmDUIcNzmUMLIyuTa3ojK2ObEiBlyPBc5Mrm3urkxsrmpgROHTI8F7u0srsksim6MLqyKQFUhwzPpcyNTi4P6i3NjW5uStAGAAB5GAAATAAAADMIgBzE4RxmFAE9iEM4hMOMQoAHeXgHc5hxDOYAD+0QDvSADjMMQh7CwR3OoRxmMAU9iEM4hIMbzAM9yEM9jAM9zHiMdHAHewgHeUiHcHAHenADdniHcCCHGcwRDuyQDuEwD24wD+PwDvBQDjMQxB3eIRzYIR3CYR5mMIk7vIM70EM5tAM8vIM8hAM7zPAUdmAHe2gHN2iHcmgHN4CHcJCHcGAHdigHdvgFdniHd4CHXwiHcRiHcpiHeZiBLO7wDu7gDvXADuwwA2LIoRzkoRzMoRzkoRzcYRzKIRzEgR3KYQbWkEM5yEM5mEM5yEM5uMM4lEM4iAM7lMMvvIM8/II71AM7sMMMxCEHfHADeiiHdoCHGdFDDvjgBuQgDufgBvYQDvLADuGQD+9QD/QAAABxIAAAFAAAADawDZfvPL4QUEVBRKUDDCVhAALmF7dtBNJw+c7jCxEBTEQINMNCWMA0XL7z+IsDDGLzUJNf3LYJVMPlO48vTU5EoNT0UJNf3LYBEEUEGAAAYSAAAFEAAAATBEEsEAAAAAYAAAD0RgCIFMIMQCmUXclRKQEaYwQgCIIyGAAjBgkAgmAAZQNzXciIQQKAIBgYHVJhzjFikAAgCAaGl1gZgYwYJAAIgoHxKZf2JCMGCQCCYGCAwWJtkTJikAAgCAZGGDAXdywjBgkAgmBgiEGDdRIzYpAAIAgGxhg4n0c1IwYJAIJgYJDBAwaf4owYJAAIgoFRBlAYgEH1jBgcAAiCQUMGjiIGownBMJogAKMJQzCaQAgjBgcAgmDQpMH0mMFoQgCMJgjBaMIg2HDIx4ZDPjYc8rFFko8xknyskeRjEiYfkzD5mITJx4wBPhYo8LGDgI8FC3wMKeBjAQOfEYMEAEEwQPrgDPIgD96gGDFIABAEA6QPziAP8oAMhhGDBABBMED64AzyIA/cIBgxSAAQBAOkD84gD/IgDsYAAQAAAAAA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "RFhCQwAAAAAAAAAAAAAAAAAAAAABAAAA8AkAAAcAAAA8AAAATAAAAFwAAACYAAAA8AAAAFQFAABwBQAAU0ZJMAgAAAAAAAAAAAAAAElTRzEIAAAAAAAAAAgAAABPU0cxNAAAAAEAAAAIAAAAAAAAACgAAAAAAAAAAQAAAAMAAAAAAAAADwAAAAAAAABTVl9Qb3NpdGlvbgBQU1YwUAAAACQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAP////8BAAAAAAEAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAABAAAAAAAAAAAAAAAAEARAMDBAAAU1RBVFwEAABgAAEAFwEAAERYSUwAAQAAEAAAAEQEAABCQ8DeIQwAAA4BAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAEEUCQpILQoQQMhQ4CBhLCjJCiEiQFCBDRoilABkyQuRIDpARIsRQQVGBjOGD5YoEIUYGURgAAAMAAAAbiOD/////B0ACAABJGAAAAQAAABOCAACJIAAADgAAADIiCAkgZIUEEyKkhAQTIuOEoZAUEkyIjAuEhEwQKCMAJQCKOQIwmCNAZgCKATNDRTYQkAIDAAAAExRywId0YIc2aId5aANywIcNr1AObdAOelAObQAPejAHcqAHcyAHbZAOcaAHcyAHbZAOeKAHcyAHbZAOcWAHejAHctAG6TAHcqAHcyAHbZAOdkAHemAHdNAG5hAHdqAHcyAHbWAOcyAHejAHctAG5mAHdKAHdkAHbeAOeKAHcWAHejAHcqAHdkAHQ54ACAAAAAAAAAAAAIY8BhAAAQAAAAAAAABkgQAACgAAADIemBAZEUyQjAkmR8YEQ5oSGAEohjIoj1IoBKKSKINCGAGgHEsACAB5GAAAUgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEQZggDMMGYSA2CARBwW5ugjAQG4YDISYIArAB2DAQy7IhYDYMg9JMEJJmQ/CQsCuTo+MyZfUF9TaXRpf25jZBIJIJAqFsCIgJArFMEAhmgjAUE4TB2CBg2YaFkCaqsgaLuLQNwbZhADhgQ6FEHQCwSHObo5ubIAwHjbm0s685ugnCgGwgPjAIAzGowsZm1+aSRlbmRjclCKqQ4bnYlcnNpb25TQmIJmR4LnZhbHZlclOCog4ZnsscWhhZmVzTG1kZ25QAqUSG50KXB1cW5Ob2RhdGl/bmNjclaOqQ4bnYpZXdJZFN0YXRlU0JnjpkeC5lbnRyeVBvaW50c1OCrgsZnsvYW50bXZnc3JRADAAAAAB5GAAATAAAADMIgBzE4RxmFAE9iEM4hMOMQoAHeXgHc5hxDOYAD+0QDvSADjMMQh7CwR3OoRxmMAU9iEM4hIMbzAM9yEM9jAM9zHiMdHAHewgHeUiHcHAHenADdniHcCCHGcwRDuyQDuEwD24wD+PwDvBQDjMQxB3eIRzYIR3CYR5mMIk7vIM70EM5tAM8vIM8hAM7zPAUdmAHe2gHN2iHcmgHN4CHcJCHcGAHdigHdvgFdniHd4CHXwiHcRiHcpiHeZiBLO7wDu7gDvXADuwwA2LIoRzkoRzMoRzkoRzcYRzKIRzEgR3KYQbWkEM5yEM5mEM5yEM5uMM4lEM4iAM7lMMvvIM8/II71AM7sMMMxCEHfHADeiiHdoCHGdFDDvjgBuQgDufgBvYQDvLADuGQD+9QD/QAAABxIAAABgAAABZQDZfvPL40ORGBUtNDTX5x2wZAVEQ0AQAAAABIQVNIFAAAAAAAAACMVnZXp/hRcLKP4YjnSmJpRFhJTHgEAABgAAEAHgEAAERYSUwAAQAAEAAAAGAEAABCQ8DeIQwAABUBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAEEUCQpILQoQQMhQ4CBhLCjJCiEiQFCBDRoilABkyQuRIDpARIsRQQVGBjOGD5YoEIUYGURgAAAMAAAAbiOD/////B0ACAABJGAAAAQAAABOCAACJIAAADgAAADIiCAkgZIUEEyKkhAQTIuOEoZAUEkyIjAuEhEwQKCMAJQCKOQIwmCNAZgCKATNDRTYQkAIDAAAAExRywId0YIc2aId5aANywIcNr1AObdAOelAObQAPejAHcqAHcyAHbZAOcaAHcyAHbZAOeKAHcyAHbZAOcWAHejAHctAG6TAHcqAHcyAHbZAOdkAHemAHdNAG5hAHdqAHcyAHbWAOcyAHejAHctAG5mAHdKAHdkAHbeAOeKAHcWAHejAHcqAHdkAHQ54AAAAAAAAAAAAAAIY8BhAAAQAAAAAAAABkgQAACgAAADIemBAZEUyQjAkmR8YEQ5oSGAEohjIoD6KSKINCGAGgHEsACAAAAAB5GAAAPgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEQZggDMMGYSAmCAOxQRgMCnZzGwbEICYIybIhUCYIAkDCrkyOjsuU1RfU21waXdqb2wSBOCYIBLIhICYIRDJBIJQJwlBMEAZjg0BVGxbCeaBIGiRisjYE14YBwIANBdNkAFCFjc2uzSWNrMyNbkoQVCHDc7Erk5tLe3ObEhBNyPBc7MLY7MrkpgRGHTI8lzm0MLIyuaY3sjK2KQFShwzPxS6t7C6JbIoujK5sSqDUIcNzKXOjk8uDektzo5ubEmQAeRgAAEwAAAAzCIAcxOEcZhQBPYhDOITDjEKAB3l4B3OYcQzmAA/tEA70gA4zDEIewsEdzqEcZjAFPYhDOISDG8wDPchDPYwDPcx4jHRwB3sIB3lIh3BwB3pwA3Z4h3AghxnMEQ7skA7hMA9uMA/j8A7wUA4zEMQd3iEc2CEdwmEeZjCJO7yDO9BDObQDPLyDPIQDO8zwFHZgB3toBzdoh3JoBzeAh3CQh3BgB3YoB3b4BXZ4h3eAh18Ih3EYh3KYh3mYgSzu8A7u4A71wA7sMANiyKEc5KEczKEc5KEc3GEcyiEcxIEdymEG1pBDOchDOZhDOchDObjDOJRDOIgDO5TDL7yDPPyCO9QDO7DDDMQhB3xwA3ooh3aAhxnRQw744AbkIA7n4Ab2EA7ywA7hkA/vUA/0AAAAcSAAAAYAAAAWUA2X7zy+NDkRgVLTQ01+cdsGQFRENAFhIAAAGQAAABMEQSwQAAAACgAAADSlQFQCRUA1RgCCIIh/YwQgCIIgGIwRgCAIkmAwRgCCIIiCAQAAAAAjBgkAgmBgSAcEJcSIQQKAIBgY0gFBxjBikAAgCAaGdEBQIYwYJAAIgoEhHRC0BAgAAAAA",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "RFhCQwAAAAAAAAAAAAAAAAAAAAABAAAA8AkAAAcAAAA8AAAATAAAAFwAAACYAAAA8AAAAFQFAABwBQAAU0ZJMAgAAAAAAAAAAAAAAElTRzEIAAAAAAAAAAgAAABPU0cxNAAAAAEAAAAIAAAAAAAAACgAAAAAAAAAAQAAAAMAAAAAAAAADwAAAAAAAABTVl9Qb3NpdGlvbgBQU1YwUAAAACQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAP////8BAAAAAAEAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAABAAAAAAAAAAAAAAAAEARAMDBAAAU1RBVFwEAABgAAEAFwEAAERYSUwAAQAAEAAAAEQEAABCQ8DeIQwAAA4BAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAEEUCQpILQoQQMhQ4CBhLCjJCiEiQFCBDRoilABkyQuRIDpARIsRQQVGBjOGD5YoEIUYGURgAAAMAAAAbiOD/////B0ACAABJGAAAAQAAABOCAACJIAAADgAAADIiCAkgZIUEEyKkhAQTIuOEoZAUEkyIjAuEhEwQKCMAJQCKOQIwmCNAZgCKATNDRTYQkAIDAAAAExRywId0YIc2aId5aANywIcNr1AObdAOelAObQAPejAHcqAHcyAHbZAOcaAHcyAHbZAOeKAHcyAHbZAOcWAHejAHctAG6TAHcqAHcyAHbZAOdkAHemAHdNAG5hAHdqAHcyAHbWAOcyAHejAHctAG5mAHdKAHdkAHbeAOeKAHcWAHejAHcqAHdkAHQ54ACAAAAAAAAAAAAIY8BhAAAQAAAAAAAABkgQAACgAAADIemBAZEUyQjAkmR8YEQ5oSGAEohjIoj1IoBKKSKINCGAGgHEsACAB5GAAAUgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEQZggDMMGYSA2CARBwW5ugjAQG4YDISYIArAB2DAQy7IhYDYMg9JMEJJmQ/CQsCuTo+MyZfUF9TaXRpf25jZBIJIJAqFsCIgJArFMEAhmgjAUE4TB2CBg2YaFkCaqsgaLuLQNwbZhADhgQ6FEHQCwSHObo5ubIAwHjbm0s685ugnCgGwgPjAIAzGowsZm1+aSRlbmRjclCKqQ4bnYlcnNpb25TQmIJmR4LnZhbHZlclOCog4ZnsscWhhZmVzTG1kZ25QAqUSG50KXB1cW5Ob2RhdGl/bmNjclaOqQ4bnYpZXdJZFN0YXRlU0JnjpkeC5lbnRyeVBvaW50c1OCrgsZnsvYW50bXZnc3JRADAAAAAB5GAAATAAAADMIgBzE4RxmFAE9iEM4hMOMQoAHeXgHc5hxDOYAD+0QDvSADjMMQh7CwR3OoRxmMAU9iEM4hIMbzAM9yEM9jAM9zHiMdHAHewgHeUiHcHAHenADdniHcCCHGcwRDuyQDuEwD24wD+PwDvBQDjMQxB3eIRzYIR3CYR5mMIk7vIM70EM5tAM8vIM8hAM7zPAUdmAHe2gHN2iHcmgHN4CHcJCHcGAHdigHdvgFdniHd4CHXwiHcRiHcpiHeZiBLO7wDu7gDvXADuwwA2LIoRzkoRzMoRzkoRzcYRzKIRzEgR3KYQbWkEM5yEM5mEM5yEM5uMM4lEM4iAM7lMMvvIM8/II71AM7sMMMxCEHfHADeiiHdoCHGdFDDvjgBuQgDufgBvYQDvLADuGQD+9QD/QAAABxIAAABgAAABZQDZfvPL40ORGBUtNDTX5x2wZAVEQ0AQAAAABIQVNIFAAAAAAAAACMVnZXp/hRcLKP4YjnSmJpRFhJTHgEAABgAAEAHgEAAERYSUwAAQAAEAAAAGAEAABCQ8DeIQwAABUBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAEEUCQpILQoQQMhQ4CBhLCjJCiEiQFCBDRoilABkyQuRIDpARIsRQQVGBjOGD5YoEIUYGURgAAAMAAAAbiOD/////B0ACAABJGAAAAQAAABOCAACJIAAADgAAADIiCAkgZIUEEyKkhAQTIuOEoZAUEkyIjAuEhEwQKCMAJQCKOQIwmCNAZgCKATNDRTYQkAIDAAAAExRywId0YIc2aId5aANywIcNr1AObdAOelAObQAPejAHcqAHcyAHbZAOcaAHcyAHbZAOeKAHcyAHbZAOcWAHejAHctAG6TAHcqAHcyAHbZAOdkAHemAHdNAG5hAHdqAHcyAHbWAOcyAHejAHctAG5mAHdKAHdkAHbeAOeKAHcWAHejAHcqAHdkAHQ54AAAAAAAAAAAAAAIY8BhAAAQAAAAAAAABkgQAACgAAADIemBAZEUyQjAkmR8YEQ5oSGAEohjIoD6KSKINCGAGgHEsACAAAAAB5GAAAPgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEQZggDMMGYSAmCAOxQRgMCnZzGwbEICYIybIhUCYIAkDCrkyOjsuU1RfU21waXdqb2wSBOCYIBLIhICYIRDJBIJQJwlBMEAZjg0BVGxbCeaBIGiRisjYE14YBwIANBdNkAFCFjc2uzSWNrMyNbkoQVCHDc7Erk5tLe3ObEhBNyPBc7MLY7MrkpgRGHTI8lzm0MLIyuaY3sjK2KQFShwzPxS6t7C6JbIoujK5sSqDUIcNzKXOjk8uDektzo5ubEmQAeRgAAEwAAAAzCIAcxOEcZhQBPYhDOITDjEKAB3l4B3OYcQzmAA/tEA70gA4zDEIewsEdzqEcZjAFPYhDOISDG8wDPchDPYwDPcx4jHRwB3sIB3lIh3BwB3pwA3Z4h3AghxnMEQ7skA7hMA9uMA/j8A7wUA4zEMQd3iEc2CEdwmEeZjCJO7yDO9BDObQDPLyDPIQDO8zwFHZgB3toBzdoh3JoBzeAh3CQh3BgB3YoB3b4BXZ4h3eAh18Ih3EYh3KYh3mYgSzu8A7u4A71wA7sMANiyKEc5KEczKEc5KEc3GEcyiEcxIEdymEG1pBDOchDOZhDOchDObjDOJRDOIgDO5TDL7yDPPyCO9QDO7DDDMQhB3xwA3ooh3aAhxnRQw744AbkIA7n4Ab2EA7ywA7hkA/vUA/0AAAAcSAAAAYAAAAWUA2X7zy+NDkRgVLTQ01+cdsGQFRENAFhIAAAGQAAABMEQSwQAAAACgAAADSlQFQCRUA1RgCCIIh/YwQgCIIgGIwRgCAIkmAwRgCCIIiCAQAAAAAjBgkAgmBgSAcEJcSIQQKAIBgY0gFBxjBikAAgCAaGdEBQIYwYJAAIgoEhHRC0BAgAAAAA",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "RFhCQwAAAAAAAAAAAAAAAAAAAAABAAAAOxAAAAcAAAA8AAAATAAAAAEBAAA7AQAAQwIAAFMJAABvCQAAU0ZJMAgAAAAAAAAAAAAAAElTRzGtAAAABAAAAAgAAAAAAAAAiAAAAAAAAAABAAAAAwAAAAAAAAAPAAAAAAAAAAAAAACUAAAAAAAAAAAAAAADAAAAAQAAAAcHAAAAAAAAAAAAAJsAAAAAAAAAAAAAAAMAAAACAAAABwcAAAAAAAAAAAAApAAAAAEAAAAAAAAAAwAAAAMAAAAHBwAAAAAAAFNWX1Bvc2l0aW9uAE5PUk1BTABURVhDT09SRABURVhDT09SRABPU0cxMgAAAAEAAAAIAAAAAAAAACgAAAAAAAAAQAAAAAMAAAAAAAAADwAAAAAAAABTVl9UYXJnZXQAUFNWMAABAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAQBAAQBAAAAAQAAABAAAAACAAAAAAAAAAAAAAAAAAAAHAAAAABOT1JNQUwAVEVYQ09PUkQAVEVYQ09PUkQAAAACAAAAAAAAAAEAAAAQAAAAAAAAAAAAAAABAEQDAwQAAAEAAAAAAAAAAQFDAAMCAAAIAAAAAAAAAAECQwADAgAAEQAAAAEAAAABA0MAAwIAAAAAAAAAAAAAAQBEEAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAEAAAAAAAAAAEAAAACAAAABAAAAAAAAAABAAAAAgAAAAQAAAAAAAAAU1RBVAgHAABgAAAAwgEAAERYSUwAAQAAEAAAAPAGAABCQ8DeIQwAALkBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAFEUCQpILQqQQMhQ4CBhLCjJSiEiQFCBDRoilABkyQuRIDpCRIsRQQVGBjOGD5YoEKUYGURgAAAgAAAAbjOD/////B0ACqA2E8P////8DIG0whv////8fAAmoAEkYAAADAAAAE4JgQiBMCAYAAAAAiSAAACYAAAAyIkgJIGSFBJMipIQEkyLjhKGQFBJMiowLhKRMEGQzAMMIA3BPSkRokBDCtFFFQURoCAGQGAEoAaEyRwAGcwRIMcA5Bx1KxSDnHARoHTVc/oQ9hORzG1WsxOQXt40IAAAgdM9w+RP2EJIfAs2wEChwhWjnHYJzBEEx3kHnSJoDAcMIBHCONEWUMPkpKzYPNSHChhAy4gAAABMUcsCHdGCHNmiHeWgDcsCHDa9QDm3QDnpQDm0AD3owB3KgB3MgB22QDnGgB3MgB22QDnigB3MgB22QDnFgB3owB3LQBukwB3KgB3MgB22QDnZAB3pgB3TQBuYQB3agB3MgB21gDnMgB3owB3LQBuZgB3SgB3ZAB23gDnigB3FgB3owB3KgB3ZABzoPRJAhIyVAADoAYMhTAAEAAAAAAAAAAMCQJwECIAAAAAAAAACAIc8CBIAAAAAAAAAAAEMeCAiAAQAAAAAAAACGPBMQAAMAAAAAAAAAZIEAAAAUAAAAMh6YGBkRTJCMCSZHxgRDkjVAqEDolMAIQDEUUOGVQSGUQ0kUSIEVThGURzkRKokyKIQRgCKgMQNAYgaA7gwA4bGihwAAAAgEAggEAggEAgB5GAAAtgAAABoDTJBGAhNENRhjC3M7A7Erk5tLe3MDmXG5AUGhCzube5EqYioKmir6mrmBeTFLcwtjS9kQBBOEA5kgHMkGYSA2CARBAW5ugnAoG4YDISYIA8cHqkzuSUytbIxOqM7MrExugnAsGxBCWQhiYIANQbOBAAAHmCBc3gThYDjAvc1NEI5mgnA4XKasvqDe5tLo0t7cJgjHM0E4oA0IIk0EVVkXDbc3ubYwtgnCEdFwepJqCmLagCDZpFGbdRFhSztDo7MqG2NCVYQ19PQkRQSzAUG6iaE86+KBFsZmdheWN0E4JCZURVhDT09SRDEbEAQMpjCgxMC6NhQRxn1jMEEQOiZkaWZmQ29sb3ITBMnYgCBmMBHWdZ0Bkzm4srGhN7Y3uQ0IkgaTZl3XGTCZQ0tzS3Mrm5ubIBzTBgRZg4kNrOs6gw0EgwZq0AYbCgIigzJwgwmCEWwANgxEHMTBhkAONgwDHMzBBAH7NgR1QMJMLuxsgoBcEwQE2xAQEwQkmyAg2oaFqPAgD/RgD4Y9IPgAmCAg2wZhsjYsw4YHfKAHfjDkwcAHfzBBOCgiVEVYQ09PUkQbllAQBTzgAz3wgyEPQoEP/mBDMGxYJlHAAz4gBT8Y8mDigz/YQPQBKIxCKTCZsvqiCpM7K6ObICDHBOGoNghTKmxYiFPAA1TQAz4Y9oDgA1XYEKzChsEUWAHYUMDBHbTCA9AwY3sLo5tjkeY2Rzc3QTgsGnNpZ19sZDTm0s6+5ug2IK+QCrAQC7JwzQJVhY3Nrs0ljazMjW5KEFQhw3OxK5ObS3tzmxIQTcjwXOzC2OzK5KYERR0yPJc5tDCyMrmmN7IytikBUoYMz0WubO6tTm6sbG5K4FQiw3Ohy4MrC3Jze6MLo0t7c5ubIrjBHNQhw3OxSyu7SyKbogujK5sS1EEdMjyXMjc6uTyotzQ3urkpQSt0IcNzGXurc6Mrk5ubEswCAAAAeRgAAEwAAAAzCIAcxOEcZhQBPYhDOITDjEKAB3l4B3OYcQzmAA/tEA70gA4zDEIewsEdzqEcZjAFPYhDOISDG8wDPchDPYwDPcx4jHRwB3sIB3lIh3BwB3pwA3Z4h3AghxnMEQ7skA7hMA9uMA/j8A7wUA4zEMQd3iEc2CEdwmEeZjCJO7yDO9BDObQDPLyDPIQDO8zwFHZgB3toBzdoh3JoBzeAh3CQh3BgB3YoB3b4BXZ4h3eAh18Ih3EYh3KYh3mYgSzu8A7u4A71wA7sMANiyKEc5KEczKEc5KEc3GEcyiEcxIEdymEG1pBDOchDOZhDOchDObjDOJRDOIgDO5TDL7yDPPyCO9QDO7DDDMQhB3xwA3ooh3aAhxnRQw744AbkIA7n4Ab2EA7ywA7hkA/vUA/0AAAAcSAAABcAAAAG8KREhAYJIUwbVRREZATbcPnO4wsBVRREVDrAUBIGIGB+cdtWIA2X7zy+EBHARIRAMyyECUzD5TuPvzjAIDYPNfnFbdtANVy+8/jS5EQESk0PNfnFbVsAUUSAAQAAAABIQVNIFAAAAAAAAABMc/EKPyoSYoms9YapLcvTRFhJTMQGAABgAAAAsQEAAERYSUwAAQAAEAAAAKwGAABCQ8DeIQwAAKgBAAALgiAAAgAAABMAAAAHgSORQcgESQYQMjmSAYQMJQUIGR4Ei2KAFEUCQpILQqQQMhQ4CBhLCjJSiEiQFCBDRoilABkyQuRIDpCRIsRQQVGBjOGD5YoEKUYGURgAAAgAAAAbjOD/////B0ACqA2E8P////8DIG0whv////8fAAmoAEkYAAADAAAAE4JgQiBMCAYAAAAAiSAAACEAAAAyIkgJIGSFBJMipIQEkyLjhKGQFBJMiowLhKRMEFwjACUAFGYA5gjAYI4AKcYghBRCphiAEFIGoaOGy5+wh5B8bqOKlZj84rYRMcYYVO4ZLn/CHkLyQ6AZFgIFqxCKMEJtjiAoBiOFkEdwIGAYYRjuSYkIDRJCmDaqKIgIDXMOohlBAAATFHLAh3RghzZoh3loA3LAhw2vUA5t0A56UA5tAA96MAdyoAdzIAdtkA5xoAdzIAdtkA54oAdzIAdtkA5xYAd6MAdy0AbpMAdyoAdzIAdtkA52QAd6YAd00AbmEAd2oAdzIAdtYA5zIAd6MAdy0AbmYAd0oAd2QAdt4A54oAdxYAd6MAdyoAd2QAdDngAAAAAAAAAAAAAAhjwGEAABAAAAAAAAAAx5ECAABAAAAAAAAAAY8jRAAAwAAAAAAAAAMOSBgAAYAAAAAAAAACALBAAADwAAADIemBQZEUyQjAkmR8YEQyIlMAJQDAVUBuVQBOVBpSTKoBBGAIqgQKjOAJAdK3oIAACAQCCAQCCAQCAAAHkYAABiAAAAGgNMkEYCE0Q1GGMLczsDsSuTm0t7cwOZcbkBQaELO5t7kSpiKgqaKvqauYF5MUtzC2NL2RAEEwSimCAQxgZhICYIxLFBGAwKcHMbBsQgJgjVRGCCQCAbEEJZCGJggA1Bs4EAAAeYIFjUhgCaIAgACTO5sDMuU1ZfUG9zaXRpb24ThKKZIBTOhoCYIBTPBKGANiwEVVkXNmBEBtBwepJqCmKaIBTRBIFIJgiEskHovA3LsFXZxQ3WkH0TBGIhQlWENfT0JEW0YQkDMaiyixusMMi+DcGwYenEoMrIgBusLvs2EBoYjEEZMJmy+qIKkzsro5sgFNIEgWA2CF0abFiIM6jQ4MoGjMjUYEOwBhsGM2ADYEMhTW3wAFXY2OzaXNLIytzopgRBFTI8F7syubm0N7cpAdGEDM/FLozNrkxuSmDUIcNzmUMLIyuTa3ojK2ObEiBlyPBc5Mrm3urkxsrmpgROHTI8F7u0srsksim6MLqyKQFUhwzPpcyNTi4P6i3NjW5uStAGAAB5GAAATAAAADMIgBzE4RxmFAE9iEM4hMOMQoAHeXgHc5hxDOYAD+0QDvSADjMMQh7CwR3OoRxmMAU9iEM4hIMbzAM9yEM9jAM9zHiMdHAHewgHeUiHcHAHenADdniHcCCHGcwRDuyQDuEwD24wD+PwDvBQDjMQxB3eIRzYIR3CYR5mMIk7vIM70EM5tAM8vIM8hAM7zPAUdmAHe2gHN2iHcmgHN4CHcJCHcGAHdigHdvgFdniHd4CHXwiHcRiHcpiHeZiBLO7wDu7gDvXADuwwA2LIoRzkoRzMoRzkoRzcYRzKIRzEgR3KYQbWkEM5yEM5mEM5yEM5uMM4lEM4iAM7lMMvvIM8/II71AM7sMMMxCEHfHADeiiHdoCHGdFDDvjgBuQgDufgBvYQDvLADuGQD+9QD/QAAABxIAAAFAAAADawDZfvPL4QUEVBRKUDDCVhAALmF7dtBNJw+c7jCxEBTEQINMNCWMA0XL7z+IsDDGLzUJNf3LYJVMPlO48vTU5EoNT0UJNf3LYBEEUEGAAAYSAAAFEAAAATBEEsEAAAAAYAAAD0RgCIFMIMQCmUXclRKQEaYwQgCIIyGAAjBgkAgmAAZQNzXciIQQKAIBgYHVJhzjFikAAgCAaGl1gZgYwYJAAIgoHxKZf2JCMGCQCCYGCAwWJtkTJikAAgCAZGGDAXdywjBgkAgmBgiEGDdRIzYpAAIAgGxhg4n0c1IwYJAIJgYJDBAwaf4owYJAAIgoFRBlAYgEH1jBgcAAiCQUMGjiIGownBMJogAKMJQzCaQAgjBgcAgmDQpMH0mMFoQgCMJgjBaMIg2HDIx4ZDPjYc8rFFko8xknyskeRjEiYfkzD5mITJx4wBPhYo8LGDgI8FC3wMKeBjAQOfEYMEAEEwQPrgDPIgD96gGDFIABAEA6QPziAP8oAMhhGDBABBMED64AzyIA/cIBgxSAAQBAOkD84gD/IgDsYAAQAAAAAA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 10.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAIEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nvoid main()\n{\n    gl_Position = vec4(1.0, 2.0, 3.0, 4.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct vert_out\n{\n    float4 gl_Position [[position]];\n};\n\nvertex vert_out vert()\n{\n    vert_out out = {};\n    out.gl_Position = float4(1.0, 2.0, 3.0, 4.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4ADgAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ABgAAAAAAAQAAAHZlcnQAAAAAAgAAAAMAAwAFAAAAWAIAAAUABAABAAAAdmVydAAAAABHAAQAAgAAAAsAAAAAAAAAFgADAAMAAAAgAAAAKwAEAAMAAAAEAAAAAACAPysABAADAAAABQAAAAAAAEArAAQAAwAAAAYAAAAAAEBAKwAEAAMAAAAHAAAAAACAQBcABAAIAAAAAwAAAAQAAAAsAAcACAAAAAkAAAAEAAAABQAAAAYAAAAHAAAAIAAEAAoAAAADAAAACAAAABMAAgALAAAAIQADAAwAAAALAAAAOwAEAAoAAAACAAAAAwAAADYABQALAAAAAQAAAAAAAAAMAAAA+AACAA0AAAA+AAMAAgAAAAkAAAD9AAEAOAABAA==",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    vec3 diffColor;\n    vec3 specColor;\n    float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in vec3 in_var_NORMAL;\nlayout(location = 1) in vec3 in_var_TEXCOORD0;\nlayout(location = 2) in vec3 in_var_TEXCOORD1;\nlayout(location = 0) out vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nstruct type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n};\n\nuniform type_PerObjectBuffer PerObjectBuffer;\n\nvarying highp vec3 in_var_NORMAL;\nvarying highp vec3 in_var_TEXCOORD0;\nvarying highp vec3 in_var_TEXCOORD1;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    gl_FragData[0] = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(binding = 0, std140) uniform type_PerObjectBuffer\n{\n    highp vec3 diffColor;\n    highp vec3 specColor;\n    highp float shininess;\n} PerObjectBuffer;\n\nlayout(location = 0) in highp vec3 in_var_NORMAL;\nlayout(location = 1) in highp vec3 in_var_TEXCOORD0;\nlayout(location = 2) in highp vec3 in_var_TEXCOORD1;\nlayout(location = 0) out highp vec4 out_var_SV_Target;\n\nvec4 _25;\n\nvoid main()\n{\n    highp vec3 _40 = ((PerObjectBuffer.diffColor * PerObjectBuffer.specColor) + (in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in_var_TEXCOORD1 * in_var_NORMAL);\n    highp vec4 _42 = vec4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out_var_SV_Target = _42;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct type_PerObjectBuffer\n{\n    float3 diffColor;\n    packed_float3 specColor;\n    float shininess;\n};\n\nconstant float4 _25 = {};\n\nstruct frag_out\n{\n    float4 out_var_SV_Target [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 in_var_NORMAL [[user(locn0)]];\n    float3 in_var_TEXCOORD0 [[user(locn1)]];\n    float3 in_var_TEXCOORD1 [[user(locn2)]];\n};\n\nfragment frag_out frag(frag_in in [[stage_in]], constant type_PerObjectBuffer& PerObjectBuffer [[buffer(0)]])\n{\n    frag_out out = {};\n    float3 _40 = ((PerObjectBuffer.diffColor * float3(PerObjectBuffer.specColor)) + (in.in_var_TEXCOORD0 * PerObjectBuffer.shininess)) + (in.in_var_TEXCOORD1 * in.in_var_NORMAL);\n    float4 _42 = float4(_40.x, _40.y, _40.z, _25.w);\n    _42.w = 12.0;\n    out.out_var_SV_Target = _42;\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAAAQAAAA4AKwAAAAAAAAARAAIAAQAAAA4AAwAAAAAAAQAAAA8ACgAEAAAAAQAAAGZyYWcAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAQAAMAAQAAAAcAAAADAAMABQAAAFgCAAAFAAgABwAAAHR5cGUuUGVyT2JqZWN0QnVmZmVyAAAAAAYABgAHAAAAAAAAAGRpZmZDb2xvcgAAAAYABgAHAAAAAQAAAHNwZWNDb2xvcgAAAAYABgAHAAAAAgAAAHNoaW5pbmVzcwAAAAUABgAIAAAAUGVyT2JqZWN0QnVmZmVyAAUABgADAAAAaW4udmFyLk5PUk1BTAAAAAUABwAEAAAAaW4udmFyLlRFWENPT1JEMAAAAAAFAAcABQAAAGluLnZhci5URVhDT09SRDEAAAAABQAHAAYAAABvdXQudmFyLlNWX1RhcmdldAAAAAUABAABAAAAZnJhZwAAAABHAAQAAgAAAAsAAAAPAAAARwAEAAMAAAAeAAAAAAAAAEcABAAEAAAAHgAAAAEAAABHAAQABQAAAB4AAAACAAAARwAEAAYAAAAeAAAAAAAAAEcABAAIAAAAIgAAAAAAAABHAAQACAAAACEAAAAAAAAASAAFAAcAAAAAAAAAIwAAAAAAAABIAAUABwAAAAEAAAAjAAAAEAAAAEgABQAHAAAAAgAAACMAAAAcAAAARwADAAcAAAACAAAAFQAEAAkAAAAgAAAAAQAAACsABAAJAAAACgAAAAAAAAArAAQACQAAAAsAAAABAAAAKwAEAAkAAAAMAAAAAgAAABYAAwANAAAAIAAAACsABAANAAAADgAAAAAAQEEXAAQADwAAAA0AAAADAAAAHgAFAAcAAAAPAAAADwAAAA0AAAAgAAQAEAAAAAIAAAAHAAAAFwAEABEAAAANAAAABAAAACAABAASAAAAAQAAABEAAAAgAAQAEwAAAAEAAAAPAAAAIAAEABQAAAADAAAAEQAAABMAAgAVAAAAIQADABYAAAAVAAAAIAAEABcAAAACAAAADwAAACAABAAYAAAAAgAAAA0AAAA7AAQAEAAAAAgAAAACAAAAOwAEABIAAAACAAAAAQAAADsABAATAAAAAwAAAAEAAAA7AAQAEwAAAAQAAAABAAAAOwAEABMAAAAFAAAAAQAAADsABAAUAAAABgAAAAMAAAABAAMAEQAAABkAAAA2AAUAFQAAAAEAAAAAAAAAFgAAAPgAAgAaAAAAPQAEAA8AAAAbAAAAAwAAAD0ABAAPAAAAHAAAAAQAAAA9AAQADwAAAB0AAAAFAAAAQQAFABcAAAAeAAAACAAAAAoAAAA9AAQADwAAAB8AAAAeAAAAQQAFABcAAAAgAAAACAAAAAsAAAA9AAQADwAAACEAAAAgAAAAQQAFABgAAAAiAAAACAAAAAwAAAA9AAQADQAAACMAAAAiAAAAhQAFAA8AAAAkAAAAHwAAACEAAACOAAUADwAAACUAAAAcAAAAIwAAAIEABQAPAAAAJgAAACQAAAAlAAAAhQAFAA8AAAAnAAAAHQAAABsAAACBAAUADwAAACgAAAAmAAAAJwAAAE8ACQARAAAAKQAAABkAAAAoAAAABAAAAAUAAAAGAAAAAwAAAFIABgARAAAAKgAAAA4AAAApAAAAAwAAAD4AAwAGAAAAKgAAAP0AAQA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        }
                    ],
                    "state": {
                        "alphaToMask": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOp": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOpAlpha": {
                            "ref": "",
                            "val": 0
                        },
                        "colMask": {
                            "ref": "",
                            "val": 14
                        },
                        "culling": {
                            "ref": "",
                            "val": 0
                        },
                        "destBlend": {
                            "ref": "",
                            "val": 1
                        },
                        "destBlendAlpha": {
                            "ref": "",
                            "val": 1
                        },
                        "lod": 0,
                        "name": "",
                        "offsetFactor": {
                            "ref": "",
                            "val": 0
                        },
                        "offsetUnits": {
                            "ref": "",
                            "val": 0
                        },
                        "srcBlend": {
                            "ref": "",
                            "val": 2
                        },
                        "srcBlendAlpha": {
                            "ref": "",
                            "val": 2
                        },
                        "stencilOp": {
                            "comp": 8,
                            "fail": 0,
                            "pass": 0,
                            "zFail": 0
                        },
                        "stencilOpBack": {
                            "comp": 8,
                            "fail": 0,
                            "pass": 0,
                            "zFail": 0
                        },
                        "stencilOpFront": {
                            "comp": 8,
                            "fail": 0,
                            "pass": 0,
                            "zFail": 0
                        },
                        "stencilReadMask": {
                            "ref": "",
                            "val": 255
                        },
                        "stencilRef": {
                            "ref": "",
                            "val": 0
                        },
                        "stencilWriteMask": {
                            "ref": "",
                            "val": 255
                        },
                        "tags": {
                            "IgnoreProjector": "True",
                            "Queue": "Transparent",
                            "RenderType": "Transparent"
                        },
                        "zTest": {
                            "ref": "",
                            "val": 4
                        },
                        "zWrite": {
                            "ref": "",
                            "val": 0
                        }
                    },
                    "type": "compiledPass"
                }
            ],
            "tags": {
                "IgnoreProjector": "True",
                "Queue": "Transparent",
                "RenderType": "Transparent"
            }
        }
    ]
}