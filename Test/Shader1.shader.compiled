{
    "fallbackName": "",
    "properties": {
        "description": "_Intensito",
        "name": "_Intensito",
        "texture": {
            "dimension": "Unknown",
            "name": ""
        },
        "type": "Range",
        "value": {
            "w": 0,
            "x": 2.200000047683716,
            "y": 0.009999999776482582,
            "z": 3
        }
    },
    "shaderName": "Particles/Blend",
    "subShaders": [
        {
            "lod": 0,
            "passes": [
                {
                    "errorMsg": "",
                    "programs": [
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 1.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 1.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAgD8rAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAoAAAAKQAAAAcAAAA7AAQAKAAAAC4AAAAHAAAAOwAEAAcAAAAyAAAABwAAADsABAAHAAAANgAAAAcAAAA9AAQAJwAAACwAAAArAAAADAAGACcAAAAtAAAAAQAAAEUAAAAsAAAAPgADACkAAAAtAAAAPgADAC4AAAAxAAAAPQAEACcAAAAzAAAAKQAAAD0ABAAnAAAANAAAAC4AAACUAAUABgAAADUAAAAzAAAANAAAAD4AAwAyAAAANQAAAD0ABAAGAAAANwAAADIAAAA+AAMANgAAADcAAAA5AAUABgAAADgAAAANAAAANgAAAD4AAwAyAAAAOAAAAD0ABAAGAAAAPAAAADIAAAA9AAQABgAAAD0AAAAyAAAAPQAEAAYAAAA+AAAAMgAAAFAABwA5AAAAPwAAADwAAAA9AAAAPgAAAB0AAAA+AAMAOwAAAD8AAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAPQAEAAYAAAAbAAAADAAAAD4AAwAaAAAAGwAAADkABQAGAAAAHAAAAAoAAAAaAAAAhQAFAAYAAAAeAAAAHAAAAB0AAAD+AAIAHgAAADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST1",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgARwAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAMQAAAEEAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACYAAABwYXJhbQAAAAUABAAvAAAAbm9ybWFsAAAFAAUAMQAAAGluTm9ybWFsAAAAAAUABQA0AAAAbGlnaHREaXIAAAAABQAEADgAAABkaWZmdXNlAAUABAA8AAAAcGFyYW0AAAAFAAYAQQAAAG91dEZyYWdDb2xvcgAAAABHAAQAMQAAAB4AAAAAAAAARwAEAEEAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAIAAEAAcAAAAHAAAABgAAACEABAAIAAAABgAAAAcAAAArAAQABgAAAB0AAAAAAABAKwAEAAYAAAAjAAAAAABAQCsABAAGAAAAKQAAAAAAgEAXAAQALQAAAAYAAAADAAAAIAAEAC4AAAAHAAAALQAAACAABAAwAAAAAQAAAC0AAAA7AAQAMAAAADEAAAABAAAAKwAEAAYAAAA1AAAAAAAAACsABAAGAAAANgAAAAAAgL8sAAYALQAAADcAAAA1AAAANQAAADYAAAAXAAQAPwAAAAYAAAAEAAAAIAAEAEAAAAADAAAAPwAAADsABABAAAAAQQAAAAMAAAArAAQABgAAAEUAAAAAAIA/NgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAADsABAAuAAAALwAAAAcAAAA7AAQALgAAADQAAAAHAAAAOwAEAAcAAAA4AAAABwAAADsABAAHAAAAPAAAAAcAAAA9AAQALQAAADIAAAAxAAAADAAGAC0AAAAzAAAAAQAAAEUAAAAyAAAAPgADAC8AAAAzAAAAPgADADQAAAA3AAAAPQAEAC0AAAA5AAAALwAAAD0ABAAtAAAAOgAAADQAAACUAAUABgAAADsAAAA5AAAAOgAAAD4AAwA4AAAAOwAAAD0ABAAGAAAAPQAAADgAAAA+AAMAPAAAAD0AAAA5AAUABgAAAD4AAAANAAAAPAAAAD4AAwA4AAAAPgAAAD0ABAAGAAAAQgAAADgAAAA9AAQABgAAAEMAAAA4AAAAPQAEAAYAAABEAAAAOAAAAFAABwA/AAAARgAAAEIAAABDAAAARAAAAEUAAAA+AAMAQQAAAEYAAAD9AAEAOAABADYABQAGAAAACgAAAAAAAAAIAAAANwADAAcAAAAJAAAA+AACAAsAAAA9AAQABgAAAA8AAAAJAAAAPQAEAAYAAAAQAAAACQAAAIUABQAGAAAAEQAAAA8AAAAQAAAAPQAEAAYAAAASAAAACQAAAIUABQAGAAAAEwAAABEAAAASAAAAPQAEAAYAAAAUAAAACQAAAIUABQAGAAAAFQAAABMAAAAUAAAAPQAEAAYAAAAWAAAACQAAAIUABQAGAAAAFwAAABUAAAAWAAAA/gACABcAAAA4AAEANgAFAAYAAAANAAAAAAAAAAgAAAA3AAMABwAAAAwAAAD4AAIADgAAADsABAAHAAAAGgAAAAcAAAA7AAQABwAAACAAAAAHAAAAOwAEAAcAAAAmAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST3",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "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",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST4",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST6"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST7"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST8"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nout gl_PerVertex\n{\n    vec4 gl_Position;\n};\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\n\nstruct UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n};\n\nuniform UBO ubo;\n\nvarying vec3 outColor;\nattribute vec3 inColor;\nattribute vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\n\nlayout(binding = 0, std140) uniform UBO\n{\n    mat4 modelMatrix;\n    mat4 viewMatrix;\n    mat4 projectionMatrix;\n} ubo;\n\nlayout(location = 0) out vec3 outColor;\nlayout(location = 1) in vec3 inColor;\nlayout(location = 0) in vec3 inPos;\n\nvoid main()\n{\n    outColor = inColor;\n    gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * vec4(inPos, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct UBO\n{\n    float4x4 modelMatrix;\n    float4x4 viewMatrix;\n    float4x4 projectionMatrix;\n};\n\nstruct vert_out\n{\n    float3 outColor [[user(locn0)]];\n    float4 gl_Position [[position]];\n};\n\nstruct vert_in\n{\n    float3 inPos [[attribute(0)]];\n    float3 inColor [[attribute(1)]];\n};\n\nvertex vert_out vert(vert_in in [[stage_in]], constant UBO& ubo [[buffer(0)]])\n{\n    vert_out out = {};\n    out.outColor = in.inColor;\n    out.gl_Position = ((ubo.projectionMatrix * ubo.viewMatrix) * ubo.modelMatrix) * float4(in.inPos, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgALAAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ACgAAAAAABAAAAHZlcnQAAAAACQAAAAsAAAAQAAAAFgAAACIAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAHZlcnQAAAAABQAFAAkAAABvdXRDb2xvcgAAAAAFAAQACwAAAGluQ29sb3IABQAGAA4AAABnbF9QZXJWZXJ0ZXgAAAAABgAGAA4AAAAAAAAAZ2xfUG9zaXRpb24ABQADABAAAAAAAAAABQADABQAAABVQk8ABgAGABQAAAAAAAAAbW9kZWxNYXRyaXgABgAGABQAAAABAAAAdmlld01hdHJpeAAABgAIABQAAAACAAAAcHJvamVjdGlvbk1hdHJpeAAAAAAFAAMAFgAAAHVibwAFAAQAIgAAAGluUG9zAAAARwAEAAkAAAAeAAAAAAAAAEcABAALAAAAHgAAAAEAAABIAAUADgAAAAAAAAALAAAAAAAAAEcAAwAOAAAAAgAAAEgABAAUAAAAAAAAAAUAAABIAAUAFAAAAAAAAAAjAAAAAAAAAEgABQAUAAAAAAAAAAcAAAAQAAAASAAEABQAAAABAAAABQAAAEgABQAUAAAAAQAAACMAAABAAAAASAAFABQAAAABAAAABwAAABAAAABIAAQAFAAAAAIAAAAFAAAASAAFABQAAAACAAAAIwAAAIAAAABIAAUAFAAAAAIAAAAHAAAAEAAAAEcAAwAUAAAAAgAAAEcABAAWAAAAIgAAAAAAAABHAAQAFgAAACEAAAAAAAAARwAEACIAAAAeAAAAAAAAABMAAgACAAAAIQADAAMAAAACAAAAFgADAAYAAAAgAAAAFwAEAAcAAAAGAAAAAwAAACAABAAIAAAAAwAAAAcAAAA7AAQACAAAAAkAAAADAAAAIAAEAAoAAAABAAAABwAAADsABAAKAAAACwAAAAEAAAAXAAQADQAAAAYAAAAEAAAAHgADAA4AAAANAAAAIAAEAA8AAAADAAAADgAAADsABAAPAAAAEAAAAAMAAAAVAAQAEQAAACAAAAABAAAAKwAEABEAAAASAAAAAAAAABgABAATAAAADQAAAAQAAAAeAAUAFAAAABMAAAATAAAAEwAAACAABAAVAAAAAgAAABQAAAA7AAQAFQAAABYAAAACAAAAKwAEABEAAAAXAAAAAgAAACAABAAYAAAAAgAAABMAAAArAAQAEQAAABsAAAABAAAAOwAEAAoAAAAiAAAAAQAAACsABAAGAAAAJAAAAAAAgD8gAAQAKgAAAAMAAAANAAAANgAFAAIAAAAEAAAAAAAAAAMAAAD4AAIABQAAAD0ABAAHAAAADAAAAAsAAAA+AAMACQAAAAwAAABBAAUAGAAAABkAAAAWAAAAFwAAAD0ABAATAAAAGgAAABkAAABBAAUAGAAAABwAAAAWAAAAGwAAAD0ABAATAAAAHQAAABwAAACSAAUAEwAAAB4AAAAaAAAAHQAAAEEABQAYAAAAHwAAABYAAAASAAAAPQAEABMAAAAgAAAAHwAAAJIABQATAAAAIQAAAB4AAAAgAAAAPQAEAAcAAAAjAAAAIgAAAFEABQAGAAAAJQAAACMAAAAAAAAAUQAFAAYAAAAmAAAAIwAAAAEAAABRAAUABgAAACcAAAAjAAAAAgAAAFAABwANAAAAKAAAACUAAAAmAAAAJwAAACQAAACRAAUADQAAACkAAAAhAAAAKAAAAEEABQAqAAAAKwAAABAAAAASAAAAPgADACsAAAApAAAA/QABADgAAQA=",
                            "encode": "base64",
                            "entryPoint": "vert",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "vertex",
                            "shaderTarget": "vulkan"
                        },
                        {
                            "data": "#version 460\n\nlayout(location = 0) in vec3 inNormal;\nlayout(location = 0) out vec4 outFragColor;\n\nfloat Pow5(float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nfloat TestCGIncludeFunc(float v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(inNormal);\n    vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "opengl"
                        },
                        {
                            "data": "#version 100\nprecision mediump float;\nprecision highp int;\n\nvarying highp vec3 inNormal;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    gl_FragData[0] = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles20"
                        },
                        {
                            "data": "#version 320 es\nprecision mediump float;\nprecision highp int;\n\nlayout(location = 0) in highp vec3 inNormal;\nlayout(location = 0) out highp vec4 outFragColor;\n\nhighp float Pow5(highp float v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nhighp float TestCGIncludeFunc(highp float v)\n{\n    highp float param = v;\n    return Pow5(param) * 2.0;\n}\n\nvoid main()\n{\n    highp vec3 normal = normalize(inNormal);\n    highp vec3 lightDir = vec3(0.0, 0.0, -1.0);\n    highp float diffuse = dot(normal, lightDir);\n    highp float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    outFragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "gles30"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "ios"
                        },
                        {
                            "data": "#pragma clang diagnostic ignored \"-Wmissing-prototypes\"\n\n#include <metal_stdlib>\n#include <simd/simd.h>\n\nusing namespace metal;\n\nstruct frag_out\n{\n    float4 outFragColor [[color(0)]];\n};\n\nstruct frag_in\n{\n    float3 inNormal [[user(locn0)]];\n};\n\nstatic inline __attribute__((always_inline))\nfloat Pow5(thread const float& v)\n{\n    return (((v * v) * v) * v) * v;\n}\n\nstatic inline __attribute__((always_inline))\nfloat TestCGIncludeFunc(thread const float& v)\n{\n    float param = v;\n    return Pow5(param) * 2.0;\n}\n\nfragment frag_out frag(frag_in in [[stage_in]])\n{\n    frag_out out = {};\n    float3 normal = normalize(in.inNormal);\n    float3 lightDir = float3(0.0, 0.0, -1.0);\n    float diffuse = dot(normal, lightDir);\n    float param = diffuse;\n    diffuse = TestCGIncludeFunc(param);\n    out.outFragColor = float4(diffuse, diffuse, diffuse, 1.0);\n    return out;\n}\n\n",
                            "encode": "string",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "mac"
                        },
                        {
                            "data": "",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "hlsl"
                        },
                        {
                            "data": "AwIjBwAFAQAKAAgAQQAAAAAAAAARAAIAAQAAAAsABgABAAAAR0xTTC5zdGQuNDUwAAAAAA4AAwAAAAAAAQAAAA8ABwAEAAAABAAAAGZyYWcAAAAAKwAAADsAAAAQAAMABAAAAAcAAAADAAMAAgAAAMIBAAAEAAoAR0xfR09PR0xFX2NwcF9zdHlsZV9saW5lX2RpcmVjdGl2ZQAABAAIAEdMX0dPT0dMRV9pbmNsdWRlX2RpcmVjdGl2ZQAFAAQABAAAAGZyYWcAAAAABQAFAAoAAABQb3c1KGYxOwAAAAAFAAMACQAAAHYAAAAFAAgADQAAAFRlc3RDR0luY2x1ZGVGdW5jKGYxOwAAAAUAAwAMAAAAdgAAAAUABAAaAAAAcGFyYW0AAAAFAAQAIAAAAHBhcmFtAAAABQAEACkAAABub3JtYWwAAAUABQArAAAAaW5Ob3JtYWwAAAAABQAFAC4AAABsaWdodERpcgAAAAAFAAQAMgAAAGRpZmZ1c2UABQAEADYAAABwYXJhbQAAAAUABgA7AAAAb3V0RnJhZ0NvbG9yAAAAAEcABAArAAAAHgAAAAAAAABHAAQAOwAAAB4AAAAAAAAAEwACAAIAAAAhAAMAAwAAAAIAAAAWAAMABgAAACAAAAAgAAQABwAAAAcAAAAGAAAAIQAEAAgAAAAGAAAABwAAACsABAAGAAAAHQAAAAAAAEArAAQABgAAACMAAAAAAIBAFwAEACcAAAAGAAAAAwAAACAABAAoAAAABwAAACcAAAAgAAQAKgAAAAEAAAAnAAAAOwAEACoAAAArAAAAAQAAACsABAAGAAAALwAAAAAAAAArAAQABgAAADAAAAAAAIC/LAAGACcAAAAxAAAALwAAAC8AAAAwAAAAFwAEADkAAAAGAAAABAAAACAABAA6AAAAAwAAADkAAAA7AAQAOgAAADsAAAADAAAAKwAEAAYAAAA/AAAAAACAPzYABQACAAAABAAAAAAAAAADAAAA+AACAAUAAAA7AAQAKAAAACkAAAAHAAAAOwAEACgAAAAuAAAABwAAADsABAAHAAAAMgAAAAcAAAA7AAQABwAAADYAAAAHAAAAPQAEACcAAAAsAAAAKwAAAAwABgAnAAAALQAAAAEAAABFAAAALAAAAD4AAwApAAAALQAAAD4AAwAuAAAAMQAAAD0ABAAnAAAAMwAAACkAAAA9AAQAJwAAADQAAAAuAAAAlAAFAAYAAAA1AAAAMwAAADQAAAA+AAMAMgAAADUAAAA9AAQABgAAADcAAAAyAAAAPgADADYAAAA3AAAAOQAFAAYAAAA4AAAADQAAADYAAAA+AAMAMgAAADgAAAA9AAQABgAAADwAAAAyAAAAPQAEAAYAAAA9AAAAMgAAAD0ABAAGAAAAPgAAADIAAABQAAcAOQAAAEAAAAA8AAAAPQAAAD4AAAA/AAAAPgADADsAAABAAAAA/QABADgAAQA2AAUABgAAAAoAAAAAAAAACAAAADcAAwAHAAAACQAAAPgAAgALAAAAPQAEAAYAAAAPAAAACQAAAD0ABAAGAAAAEAAAAAkAAACFAAUABgAAABEAAAAPAAAAEAAAAD0ABAAGAAAAEgAAAAkAAACFAAUABgAAABMAAAARAAAAEgAAAD0ABAAGAAAAFAAAAAkAAACFAAUABgAAABUAAAATAAAAFAAAAD0ABAAGAAAAFgAAAAkAAACFAAUABgAAABcAAAAVAAAAFgAAAP4AAgAXAAAAOAABADYABQAGAAAADQAAAAAAAAAIAAAANwADAAcAAAAMAAAA+AACAA4AAAA7AAQABwAAABoAAAAHAAAAOwAEAAcAAAAgAAAABwAAAD0ABAAGAAAAGwAAAAwAAAA+AAMAGgAAABsAAAA5AAUABgAAABwAAAAKAAAAGgAAAIUABQAGAAAAHgAAABwAAAAdAAAA/gACAB4AAAA4AAEA",
                            "encode": "base64",
                            "entryPoint": "frag",
                            "keywords": [
                                "TEST2",
                                "TEST5",
                                "TEST9"
                            ],
                            "shaderStage": "fragment",
                            "shaderTarget": "vulkan"
                        }
                    ],
                    "state": {
                        "alphaToMask": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOp": {
                            "ref": "",
                            "val": 0
                        },
                        "blendOpAlpha": {
                            "ref": "",
                            "val": 0
                        },
                        "colMask": {
                            "ref": "",
                            "val": 14
                        },
                        "culling": {
                            "ref": "",
                            "val": 0
                        },
                        "destBlend": {
                            "ref": "",
                            "val": 1
                        },
                        "destBlendAlpha": {
                            "ref": "",
                            "val": 1
                        },
                        "lod": 0,
                        "name": "",
                        "offsetFactor": {
                            "ref": "",
                            "val": 0
                        },
                        "offsetUnits": {
                            "ref": "",
                            "val": 0
                        },
                        "srcBlend": {
                            "ref": "",
                            "val": 2
                        },
                        "srcBlendAlpha": {
                            "ref": "",
                            "val": 2
                        },
                        "stencilOp": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilOpBack": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilOpFront": {
                            "comp": {
                                "ref": "",
                                "val": 8
                            },
                            "fail": {
                                "ref": "",
                                "val": 0
                            },
                            "pass": {
                                "ref": "",
                                "val": 0
                            },
                            "zFail": {
                                "ref": "",
                                "val": 0
                            }
                        },
                        "stencilReadMask": {
                            "ref": "",
                            "val": 255
                        },
                        "stencilRef": {
                            "ref": "",
                            "val": 0
                        },
                        "stencilWriteMask": {
                            "ref": "",
                            "val": 255
                        },
                        "tags": {
                            "IgnoreProjector": "True",
                            "Queue": "Transparent",
                            "RenderType": "Transparent"
                        },
                        "zTest": {
                            "ref": "",
                            "val": 4
                        },
                        "zWrite": {
                            "ref": "",
                            "val": 0
                        }
                    },
                    "type": "compiledPass"
                }
            ],
            "tags": {
                "IgnoreProjector": "True",
                "Queue": "Transparent",
                "RenderType": "Transparent"
            }
        }
    ]
}